// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.13.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == "string")
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    printToConsole: function(line) {
      H.printString(line);
    },
    makeListFixedLength: function(growableList, $T) {
      return J.JSArray_markFixedList(growableList, $T);
    },
    isSentinel: function(value) {
      return value === $;
    },
    LateError$: function(_message) {
      return new H.LateError(_message);
    },
    LateError$fieldNI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI: function(localName) {
      return new H.LateError("Local '" + localName + "' has not been initialized.");
    },
    CodeUnits$: function(_string) {
      return new H.CodeUnits(_string);
    },
    checkNotNullable: function(value, $name, $T) {
      if (value == null)
        throw H.wrapException(H.NotNullableError$($name, $T));
      return value;
    },
    NotNullableError$: function(_name, $T) {
      return new H.NotNullableError(_name, $T._eval$1("NotNullableError<0>"));
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      var t1 = new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
      t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
      return t1;
    },
    ListIterator$: function(iterable, $E) {
      return new H.ListIterator(iterable, J.get$length$asx(iterable), $E._eval$1("ListIterator<0>"));
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return H.EfficientLengthMappedIterable$(iterable, $function, $S, $T);
      return H.MappedIterable$_(iterable, $function, $S, $T);
    },
    MappedIterable$_: function(_iterable, _f, $S, $T) {
      return new H.MappedIterable(_iterable, _f, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    EfficientLengthMappedIterable$: function(iterable, $function, $S, $T) {
      return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    MappedIterator$: function(_iterator, _f, $S, $T) {
      return new H.MappedIterator(_iterator, _f, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterator<1,2>"));
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return H.EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E);
      return H.SkipIterable$_(iterable, H._checkCount(count), $E);
    },
    SkipIterable$_: function(_iterable, _skipCount, $E) {
      return new H.SkipIterable(_iterable, _skipCount, $E._eval$1("SkipIterable<0>"));
    },
    EfficientLengthSkipIterable_EfficientLengthSkipIterable: function(iterable, count, $E) {
      return H.EfficientLengthSkipIterable$_(iterable, H._checkCount(count), $E);
    },
    EfficientLengthSkipIterable$_: function(iterable, count, $E) {
      return new H.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
    },
    _checkCount: function(count) {
      P.ArgumentError_checkNotNull(count, "count", type$.int);
      P.RangeError_checkNotNegative(count, "count");
      return count;
    },
    SkipIterator$: function(_iterator, _skipCount, $E) {
      var t1 = new H.SkipIterator(_iterator, _skipCount, $E._eval$1("SkipIterator<0>"));
      t1.SkipIterator$2(_iterator, _skipCount, $E);
      return t1;
    },
    EmptyIterable$: function($E) {
      return new H.EmptyIterable($E._eval$1("EmptyIterable<0>"));
    },
    IterableElementError_noElement: function() {
      return P.StateError$("No element");
    },
    IterableElementError_tooFew: function() {
      return P.StateError$("Too few elements");
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    NotNullableError: function NotNullableError(t0, t1) {
      this.__internal$_name = t0;
      this.$ti = t1;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    requiresPreamble: function() {
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = J.dispatchRecordIndexability(record);
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H.instanceTypeName(object);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = H.constructorNameFallback(object);
        if (H.boolConversionCheck(H.Primitives__saneNativeClassName(dispatchName)))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.boolConversionCheck(H.Primitives__saneNativeClassName(constructorName)))
            return constructorName;
        }
      }
      return H.instanceTypeName(object);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1;
      if ($name != null) {
        t1 = J.getInterceptor$($name);
        t1 = !H.boolConversionCheck(t1.$eq($name, "Object")) && !H.boolConversionCheck(t1.$eq($name, ""));
      } else
        t1 = false;
      return t1;
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = J.get$length$asx(array);
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, i,
        a = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(codePoints)); H.boolConversionCheck(t1.moveNext$0());) {
        i = t1.get$current();
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (type$.Iterable_dynamic._as(charCodes), t1 = J.get$iterator$ax(charCodes); H.boolConversionCheck(t1.moveNext$0());) {
        i = t1.get$current();
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(type$.List_dynamic._as(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      H._asNum(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((C.JSNumber_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return string1 + string2;
    },
    Primitives_flattenString: function(str) {
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.get$millisecondsSinceEpoch());
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace: function(error) {
      return H.getTraceFromException(error.$thrownJsError);
    },
    JsCache_fetch: function(cache, key) {
      return cache[key];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return P.ArgumentError$value(index, _s5_, null);
      $length = H._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var _null = null;
      if (!H._isInt(start))
        return P.ArgumentError$value(start, "start", _null);
      if (start < 0 || start > H._asNum($length))
        return P.RangeError$range(start, 0, H._asIntQ($length), "start", _null);
      if (end != null) {
        if (!H._isInt(end))
          return P.ArgumentError$value(end, "end", _null);
        if (end < start || end > H._asNum($length))
          return P.RangeError$range(end, start, H._asIntQ($length), "end", _null);
      }
      return P.ArgumentError$value(end, "end", _null);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkNull: function(object) {
      if (object == null)
        throw H.wrapException(H.argumentErrorValue(object));
      return object;
    },
    checkNum: function(value) {
      if (typeof value != "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver);
    },
    TypeErrorDecoder_buildJavaScriptObject: function() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match;
      message = H._asString(H.quoteStringForRegExp(message.replace(String({}), "$receiver$")));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"));
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull: function() {
      return function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
      return function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull: function() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    UnknownJsTypeError$: function(_message) {
      return new H.UnknownJsTypeError(_message);
    },
    NullThrownFromJavaScriptException$: function(_irritant) {
      return new H.NullThrownFromJavaScriptException(_irritant);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return H.NullThrownFromJavaScriptException$(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t1;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return H.saveStackTrace(ex, H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return H.saveStackTrace(ex, H.NullError$(H._asString(message), match));
          }
        }
        return H.saveStackTrace(ex, H.UnknownJsTypeError$(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && H.boolConversionCheck(H.contains(message, "call stack")))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return H.saveStackTrace(ex, P.ArgumentError$(typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return H._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = H._StackTrace$(exception);
    },
    _StackTrace$: function(_exception) {
      return new H._StackTrace(_exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = H.getLength(keyValuePairs);
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, H.getIndex(keyValuePairs, index), H.getIndex(keyValuePairs, index0));
      }
      return result;
    },
    getIndex: function(array, index) {
      return array[index];
    },
    getLength: function(array) {
      return array.length;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, t2, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.boolConversionCheck(H.Closure_isCsp())) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      t1 = J.getInterceptor$asx(functions);
      applyTrampoline = trampoline;
      i = 1;
      while (true) {
        t2 = t1.get$length(functions);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        stub = t1.$index(functions, i);
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
        ++i;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.boolConversionCheck(H.Closure_isCsp()) || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += H.S(t1);
      return new Function("return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = H.BoundClosure_receiverFieldName(),
        stubName = $function.$stubName,
        arity = $function.length,
        lookedUpFunction = receiver[stubName],
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction,
        t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    StaticClosure$: function() {
      return new H.StaticClosure();
    },
    BoundClosure$: function(_self, _target, _receiver, _name) {
      return new H.BoundClosure(_self, _target, _receiver, _name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H.evalInInstance(closure._self, recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H.evalInInstance(closure._receiver, recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t1.toString;
      return t1;
    },
    BoundClosure_receiverFieldName: function() {
      var t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      t1.toString;
      return t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t2, $name,
        template = H.BoundClosure$("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object),
        t1 = J.getInterceptor$asx(names),
        i = 0;
      while (true) {
        t2 = t1.get$length(names);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $name = t1.$index(names, i);
        if (template[$name] === fieldName)
          return $name;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(H._AssertionError$(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(string);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    _AssertionError$: function(message) {
      return new H._AssertionError(message);
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(H.LateError$($name));
    },
    JsLinkedHashMap$: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      var t1 = H.JsLinkedHashMap$($K, $V);
      return t1;
    },
    JsLinkedHashMap__isStringKey: function(key) {
      return typeof key == "string";
    },
    JsLinkedHashMap__isNumericKey: function(key) {
      return typeof key == "number" && (key & 0x3ffffff) === key;
    },
    LinkedHashMapCell$: function(hashMapCellKey, hashMapCellValue) {
      return new H.LinkedHashMapCell(hashMapCellKey, hashMapCellValue);
    },
    LinkedHashMapKeyIterable$: function(_map, $E) {
      return new H.LinkedHashMapKeyIterable(_map, $E._eval$1("LinkedHashMapKeyIterable<0>"));
    },
    LinkedHashMapKeyIterator$: function(_map, _modifications, $E) {
      var t1 = new H.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains: function(userAgent, $name) {
      return userAgent.indexOf($name) !== -1;
    },
    propertyGet: function(object, property) {
      return object[property];
    },
    propertySet: function(object, property, value) {
      object[property] = value;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag: function() {
      return init.interceptorsByTag;
    },
    leafTags: function() {
      return init.leafTags;
    },
    lookupInterceptor: function(tag) {
      return H.propertyGet(H.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark,
        tag = H._asString($.getTagFunction.call$1(obj)),
        record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return H.patchInstance(obj, record);
      interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = H.lookupInterceptor(tag);
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = H.propertyGet($.dispatchRecordsForInstanceTags, altTag);
          if (record != null)
            return H.patchInstance(obj, record);
          interceptor = H.propertyGet($.interceptorsForUncacheableTags, altTag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = H.lookupInterceptor(altTag);
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        H.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return H.patchInstance(obj, record);
      }
      if (mark === "~") {
        H.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (H.leafTags()[tag] === true)
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInstance: function(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto: function(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (H.leafTags()[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback: function(object) {
      return C.C_JS_CONST(object);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = H.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = H.propertyGet(map, tag);
          H.propertySet(map, "!" + tag, interceptorClass);
          H.propertySet(map, "~" + tag, interceptorClass);
          H.propertySet(map, "-" + tag, interceptorClass);
          H.propertySet(map, "+" + tag, interceptorClass);
          H.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = H.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    ConstantMap: function ConstantMap() {
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _checkLength: function($length) {
      if (!H._isInt($length))
        throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
      return $length;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (!type$.NativeByteBuffer._is(buffer))
        throw H.wrapException(P.ArgumentError$("Invalid view buffer"));
      if (!H._isInt(offsetInBytes))
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
      if (!type$.nullable_int._is($length))
        throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
    },
    _ensureNativeList: function(list) {
      var t1, result, t2, i, t3;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = P.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      t2 = J.getInterceptor$ax(result);
      i = 0;
      while (true) {
        t3 = t1.get$length(list);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t2.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeFloat32List_NativeFloat32List: function($length) {
      return H.NativeFloat32List__createLength(H._checkLength($length));
    },
    NativeFloat32List_NativeFloat32List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = C.NativeByteBuffer_methods.get$lengthInBytes(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = C.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 4);
      }
      return H.NativeFloat32List__create3(buffer, offsetInBytes, $length);
    },
    NativeFloat32List__createLength: function(arg) {
      return new Float32Array(arg);
    },
    NativeFloat32List__create1: function(arg) {
      return new Float32Array(arg);
    },
    NativeFloat32List__create3: function(arg1, arg2, arg3) {
      return new Float32Array(arg1, arg2, arg3);
    },
    NativeFloat64List_NativeFloat64List: function($length) {
      return H.NativeFloat64List__createLength(H._checkLength($length));
    },
    NativeFloat64List_NativeFloat64List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = C.NativeByteBuffer_methods.get$lengthInBytes(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = C.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 8);
      }
      return H.NativeFloat64List__create3(buffer, offsetInBytes, $length);
    },
    NativeFloat64List__createLength: function(arg) {
      return new Float64Array(arg);
    },
    NativeFloat64List__create1: function(arg) {
      return new Float64Array(arg);
    },
    NativeFloat64List__create3: function(arg1, arg2, arg3) {
      return new Float64Array(arg1, arg2, arg3);
    },
    NativeInt16List_NativeInt16List: function($length) {
      return H.NativeInt16List__createLength(H._checkLength($length));
    },
    NativeInt16List_NativeInt16List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = C.NativeByteBuffer_methods.get$lengthInBytes(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = C.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 2);
      }
      return H.NativeInt16List__create3(buffer, offsetInBytes, $length);
    },
    NativeInt16List__createLength: function(arg) {
      return new Int16Array(arg);
    },
    NativeInt16List__create1: function(arg) {
      return new Int16Array(arg);
    },
    NativeInt16List__create3: function(arg1, arg2, arg3) {
      return new Int16Array(arg1, arg2, arg3);
    },
    NativeInt32List_NativeInt32List: function($length) {
      return H.NativeInt32List__createLength(H._checkLength($length));
    },
    NativeInt32List_NativeInt32List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = C.NativeByteBuffer_methods.get$lengthInBytes(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = C.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 4);
      }
      return H.NativeInt32List__create3(buffer, offsetInBytes, $length);
    },
    NativeInt32List__createLength: function(arg) {
      return new Int32Array(arg);
    },
    NativeInt32List__create1: function(arg) {
      return new Int32Array(arg);
    },
    NativeInt32List__create3: function(arg1, arg2, arg3) {
      return new Int32Array(arg1, arg2, arg3);
    },
    NativeInt8List_NativeInt8List: function($length) {
      return H.NativeInt8List__createLength(H._checkLength($length));
    },
    NativeInt8List_NativeInt8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? H.NativeInt8List__create2(buffer, offsetInBytes) : H.NativeInt8List__create3(buffer, offsetInBytes, $length);
    },
    NativeInt8List__createLength: function(arg) {
      return new Int8Array(arg);
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeInt8List__create2: function(arg1, arg2) {
      return new Int8Array(arg1, arg2);
    },
    NativeInt8List__create3: function(arg1, arg2, arg3) {
      return new Int8Array(arg1, arg2, arg3);
    },
    NativeUint16List_NativeUint16List: function($length) {
      return H.NativeUint16List__createLength(H._checkLength($length));
    },
    NativeUint16List__createLength: function(arg) {
      return new Uint16Array(arg);
    },
    NativeUint16List__create1: function(arg) {
      return new Uint16Array(arg);
    },
    NativeUint32List_NativeUint32List: function($length) {
      return H.NativeUint32List__createLength(H._checkLength($length));
    },
    NativeUint32List_NativeUint32List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      if ($length == null) {
        t1 = C.NativeByteBuffer_methods.get$lengthInBytes(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = C.JSNumber_methods._tdivFast$1(t1 - offsetInBytes, 4);
      }
      return H.NativeUint32List__create3(buffer, offsetInBytes, $length);
    },
    NativeUint32List__createLength: function(arg) {
      return new Uint32Array(arg);
    },
    NativeUint32List__create1: function(arg) {
      return new Uint32Array(arg);
    },
    NativeUint32List__create3: function(arg1, arg2, arg3) {
      return new Uint32Array(arg1, arg2, arg3);
    },
    NativeUint8ClampedList__create1: function(arg) {
      return new Uint8ClampedArray(arg);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return H.NativeUint8List__createLength(H._checkLength($length));
    },
    NativeUint8List_NativeUint8List$fromList: function(elements) {
      return H.NativeUint8List__create1(H._ensureNativeList(elements));
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? H.NativeUint8List__create2(buffer, offsetInBytes) : H.NativeUint8List__create3(buffer, offsetInBytes, $length);
    },
    NativeUint8List__createLength: function(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create1: function(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create2: function(arg1, arg2) {
      return new Uint8Array(arg1, arg2);
    },
    NativeUint8List__create3: function(arg1, arg2, arg3) {
      return new Uint8Array(arg1, arg2, arg3);
    },
    _isInvalidArrayIndex: function(index) {
      return index >>> 0 !== index;
    },
    _checkValidIndex: function(index, list, $length) {
      if (H.boolConversionCheck(H._isInvalidArrayIndex(index)) || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!H.boolConversionCheck(H._isInvalidArrayIndex(start)))
        if (end == null)
          t1 = start > $length;
        else
          t1 = H.boolConversionCheck(H._isInvalidArrayIndex(end)) || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti$: function() {
      return new H.Rti(null, null);
    },
    Rti__setAsCheckFunction: function(rti, fn) {
      rti._as = fn;
    },
    Rti__setIsTestFunction: function(rti, fn) {
      rti._is = fn;
    },
    Rti__asCheck: function(rti, object) {
      return rti._as(object);
    },
    Rti__isCheck: function(rti, object) {
      return rti._is(object);
    },
    Rti__getPrecomputed1: function(rti) {
      return rti._precomputed1;
    },
    Rti__setPrecomputed1: function(rti, precomputed) {
      rti._precomputed1 = precomputed;
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = H._Utils_asRtiOrNull(H.Rti__getPrecomputed1(rti));
      if (question == null) {
        question = H._Universe__lookupQuestionRti(universe, H.Rti__getStarArgument(rti), true);
        H.Rti__setPrecomputed1(rti, question);
      }
      return question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = H._Utils_asRtiOrNull(H.Rti__getPrecomputed1(rti));
      if (future == null) {
        future = H._Universe__lookupFutureRti(universe, H.Rti__getFutureOrArgument(rti));
        H.Rti__setPrecomputed1(rti, future);
      }
      return future;
    },
    Rti__getSpecializedTestResource: function(rti) {
      return rti._specializedTestResource;
    },
    Rti__setSpecializedTestResource: function(rti, value) {
      rti._specializedTestResource = value;
    },
    Rti__getCachedRuntimeType: function(rti) {
      return rti._cachedRuntimeType;
    },
    Rti__setCachedRuntimeType: function(rti, type) {
      rti._cachedRuntimeType = type;
    },
    Rti__getKind: function(rti) {
      return H._Utils_asInt(rti._kind);
    },
    Rti__setKind: function(rti, kind) {
      rti._kind = kind;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = H.Rti__getKind(rti);
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(H._Utils_asRti(H.Rti__getPrimary(rti)));
      return kind === 11 || kind === 12;
    },
    Rti__getPrimary: function(rti) {
      return rti._primary;
    },
    Rti__setPrimary: function(rti, value) {
      rti._primary = value;
    },
    Rti__getRest: function(rti) {
      return rti._rest;
    },
    Rti__setRest: function(rti, value) {
      rti._rest = value;
    },
    Rti__getInterfaceName: function(rti) {
      return H._Utils_asString(H.Rti__getPrimary(rti));
    },
    Rti__getInterfaceTypeArguments: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getBindingBase: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getBindingArguments: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getStarArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getQuestionArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getFutureOrArgument: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getReturnType: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getFunctionParameters: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getGenericFunctionBase: function(rti) {
      return H._Utils_asRti(H.Rti__getPrimary(rti));
    },
    Rti__getGenericFunctionBounds: function(rti) {
      return H.Rti__getRest(rti);
    },
    Rti__getGenericFunctionParameterIndex: function(rti) {
      return H._Utils_asInt(H.Rti__getPrimary(rti));
    },
    Rti__getEvalCache: function(rti) {
      return rti._evalCache;
    },
    Rti__setEvalCache: function(rti, value) {
      rti._evalCache = value;
    },
    Rti__getBindCache: function(rti) {
      return rti._bindCache;
    },
    Rti__setBindCache: function(rti, value) {
      rti._bindCache = value;
    },
    Rti_allocate: function() {
      return H.Rti$();
    },
    Rti__getCanonicalRecipe: function(rti) {
      return H._Utils_asString(rti._canonicalRecipe);
    },
    Rti__setCanonicalRecipe: function(rti, s) {
      rti._canonicalRecipe = s;
    },
    _FunctionParameters$: function() {
      return new H._FunctionParameters();
    },
    _FunctionParameters_allocate: function() {
      return H._FunctionParameters$();
    },
    _FunctionParameters__getRequiredPositional: function(parameters) {
      return parameters._requiredPositional;
    },
    _FunctionParameters__setRequiredPositional: function(parameters, requiredPositional) {
      parameters._requiredPositional = requiredPositional;
    },
    _FunctionParameters__getOptionalPositional: function(parameters) {
      return parameters._optionalPositional;
    },
    _FunctionParameters__setOptionalPositional: function(parameters, optionalPositional) {
      parameters._optionalPositional = optionalPositional;
    },
    _FunctionParameters__getNamed: function(parameters) {
      return parameters._named;
    },
    _FunctionParameters__setNamed: function(parameters, named) {
      parameters._named = named;
    },
    _theUniverse: function() {
      return init.typeUniverse;
    },
    _rtiEval: function(environment, recipe) {
      return H._Universe_evalInEnvironment(H._theUniverse(), environment, recipe);
    },
    _rtiBind: function(environment, types) {
      return H._Universe_bind(H._theUniverse(), environment, types);
    },
    findType: function(recipe) {
      return H._Universe_eval(H._theUniverse(), recipe, false);
    },
    evalInInstance: function(instance, recipe) {
      return H._rtiEval(H.instanceType(instance), recipe);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, t1, substitutedBounds, index, argument,
        kind = H.Rti__getKind(rti);
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = H._Utils_asRti(H.Rti__getPrimary(rti));
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBaseType, baseType)))
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = H.Rti__getInterfaceTypeArguments(rti);
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedInterfaceTypeArguments, interfaceTypeArguments)))
            return rti;
          return H._Universe__lookupInterfaceRti(universe, H.Rti__getInterfaceName(rti), substitutedInterfaceTypeArguments);
        case 10:
          base = H.Rti__getBindingBase(rti);
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = H.Rti__getBindingArguments(rti);
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBase, base)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedArguments, $arguments)))
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = H.Rti__getReturnType(rti);
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = H.Rti__getFunctionParameters(rti);
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedReturnType, returnType)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedFunctionParameters, functionParameters)))
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = H.Rti__getGenericFunctionBounds(rti);
          t1 = H._Utils_arrayLength(bounds);
          if (typeof t1 !== "number")
            return H.iae(t1);
          depth += t1;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = H.Rti__getGenericFunctionBase(rti);
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (H.boolConversionCheck(H._Utils_isIdentical(substitutedBounds, bounds)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedBase, base)))
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = H.Rti__getGenericFunctionParameterIndex(rti);
          if (index < depth)
            return rti;
          argument = H._Utils_arrayAt(typeArguments, index - depth);
          if (argument == null)
            return rti;
          return H._Utils_asRti(argument);
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + H.S(kind)));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = H._Utils_arrayLength(rtiArray),
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = H._Utils_asRti(H._Utils_arrayAt(rtiArray, i));
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (H.boolConversionCheck(H._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        H._Utils_arrayPush(result, substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, $name, isRequired, rti, substitutedRti,
        $length = H._Utils_arrayLength(namedArray),
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        $name = H._Utils_asString(H._Utils_arrayAt(namedArray, i));
        isRequired = H._Utils_asBool(H._Utils_arrayAt(namedArray, i + 1));
        rti = H._Utils_asRti(H._Utils_arrayAt(namedArray, i + 2));
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (H.boolConversionCheck(H._Utils_isNotIdentical(substitutedRti, rti)))
          changed = true;
        H._Utils_arrayPush(result, $name);
        H._Utils_arrayPush(result, isRequired);
        H._Utils_arrayPush(result, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = H._FunctionParameters__getRequiredPositional(functionParameters),
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = H._FunctionParameters__getOptionalPositional(functionParameters),
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = H._FunctionParameters__getNamed(functionParameters),
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (H.boolConversionCheck(H._Utils_isIdentical(substitutedRequiredPositional, requiredPositional)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedOptionalPositional, optionalPositional)) && H.boolConversionCheck(H._Utils_isIdentical(substitutedNamed, named)))
        return functionParameters;
      result = H._FunctionParameters_allocate();
      H._FunctionParameters__setRequiredPositional(result, substitutedRequiredPositional);
      H._FunctionParameters__setOptionalPositional(result, substitutedOptionalPositional);
      H._FunctionParameters__setNamed(result, substitutedNamed);
      return result;
    },
    _isDartObject: function(object) {
      return H._Utils_instanceOf(object, P.Object);
    },
    _isClosure: function(object) {
      return H._Utils_instanceOf(object, H.Closure);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(H._Utils_asInt(signature));
        return H._Utils_asRti(closure.$signature());
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.boolConversionCheck(H.Rti__isUnionOfFunctionType(testRti)))
        if (H.boolConversionCheck(H._isClosure(object))) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      if (H.boolConversionCheck(H._isDartObject(object)))
        return H._instanceType(object);
      if (H.boolConversionCheck(H._Utils_isArray(object)))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return H._Utils_asRti(defaultRti);
      if (rti.constructor !== defaultRti.constructor)
        return H._Utils_asRti(defaultRti);
      return H._Utils_asRti(rti);
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? H._Utils_asRti(rti) : H._instanceTypeFromConstructor(object);
    },
    instanceTypeName: function(object) {
      return H._rtiToString(H.instanceType(object), null);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = H.boolConversionCheck(H._isClosure(instance)) ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(H._theUniverse(), effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    _instanceFunctionType: function(object) {
      return H.boolConversionCheck(H._isClosure(object)) ? H.closureFunctionType(object) : null;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = H._Utils_arrayAt(table, index);
      if (H.boolConversionCheck(H._Utils_isString(type))) {
        rti = H.findType(H._Utils_asString(type));
        H._Utils_arraySetAt(table, index, rti);
        return rti;
      }
      return H._Utils_asRti(type);
    },
    getRuntimeType: function(object) {
      var rti = H._instanceFunctionType(object);
      return H.createRuntimeType(rti == null ? H.instanceType(object) : rti);
    },
    createRuntimeType: function(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = H.Rti__getCachedRuntimeType(rti);
      if (type != null)
        return type;
      recipe = H.Rti__getCanonicalRecipe(rti);
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return H._Type$(rti);
      starErasedRti = H._Universe_eval(H._theUniverse(), starErasedRecipe, true);
      type = H.Rti__getCachedRuntimeType(starErasedRti);
      if (type == null)
        type = H._Type$(starErasedRti);
      H.Rti__setCachedRuntimeType(rti, type);
      return type;
    },
    typeLiteral: function(recipe) {
      return H.createRuntimeType(H.findType(recipe));
    },
    _Type$: function(_rti) {
      var t1 = new H._Type(_rti);
      t1._Type$1(_rti);
      return t1;
    },
    _installSpecializedIsTest: function(object) {
      var unstarred, isFn, $name,
        testRti = H._Utils_asRti(this);
      if (H.boolConversionCheck(H.isObjectType(testRti)))
        return H._finishIsFn(testRti, object, H._isObject);
      if (H.boolConversionCheck(H.isTopType(testRti)))
        return H._finishIsFn(testRti, object, H._isTop);
      unstarred = H.boolConversionCheck(J.$eq$(H.Rti__getKind(testRti), 6)) ? H.Rti__getStarArgument(testRti) : testRti;
      isFn = H._simpleSpecializedIsTest(unstarred);
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(unstarred), 9))) {
        $name = H.Rti__getInterfaceName(unstarred);
        if (H.Rti__getInterfaceTypeArguments(unstarred).every(H.isTopType)) {
          H.Rti__setSpecializedTestResource(testRti, "$is" + $name);
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(testRti), 7)))
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      H.Rti__setIsTestFunction(testRti, isFn);
      return H.Rti__isCheck(testRti, object);
    },
    _simpleSpecializedIsTest: function(testRti) {
      var isFn;
      if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.int)))
        isFn = H._isInt;
      else if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.double)) || H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.num)))
        isFn = H._isNum;
      else if (H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.String)))
        isFn = H._isString;
      else
        isFn = H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.bool)) ? H._isBool : null;
      return isFn;
    },
    _installSpecializedAsCheck: function(object) {
      var t1,
        testRti = H._Utils_asRti(this),
        asFn = H._generalAsCheckImplementation;
      if (H.boolConversionCheck(H.isTopType(testRti)))
        asFn = H._asTop;
      else if (H.boolConversionCheck(H.isObjectType(testRti)))
        asFn = H._asObject;
      else {
        t1 = H.boolConversionCheck(H.isNullable(testRti));
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      H.Rti__setAsCheckFunction(testRti, asFn);
      return H.Rti__asCheck(testRti, object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = H.Rti__getKind(testRti);
      if (!H.boolConversionCheck(H.isStrongTopType(testRti)))
        if (!H.boolConversionCheck(H.isLegacyObjectType(testRti)))
          if (!H.boolConversionCheck(H._Utils_isIdentical(testRti, type$.legacy_Never)))
            if (kind !== 7)
              t1 = kind === 8 && H.boolConversionCheck(H._nullIs(H.Rti__getFutureOrArgument(testRti))) || H.boolConversionCheck(H.isNullType(testRti));
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var objectRti,
        testRti = H._Utils_asRti(this);
      if (object == null)
        return H._nullIs(testRti);
      objectRti = H.instanceOrFunctionType(object, testRti);
      return H.isSubtype(H._theUniverse(), objectRti, testRti);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return H.Rti__isCheck(H.Rti__getQuestionArgument(H._Utils_asRti(this)), object);
    },
    _isTestViaProperty: function(object) {
      var tag,
        testRti = H._Utils_asRti(this);
      if (object == null)
        return H._nullIs(testRti);
      tag = H.Rti__getSpecializedTestResource(testRti);
      if (H.boolConversionCheck(H._isDartObject(object)))
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1,
        testRti = H._Utils_asRti(this);
      if (object == null) {
        t1 = H.boolConversionCheck(H.isNullable(testRti));
        if (t1)
          return object;
      } else if (H.boolConversionCheck(H.Rti__isCheck(testRti, object)))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = H._Utils_asRti(this);
      if (object == null)
        return object;
      else if (H.boolConversionCheck(H.Rti__isCheck(testRti, object)))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return H._TypeError$fromMessage(H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asDouble(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (H.boolConversionCheck(H._isInt(object)))
        return H._Utils_asInt(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (H.boolConversionCheck(H._isNum(object)))
        return H._Utils_asNum(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (H.boolConversionCheck(H._isString(object)))
        return H._Utils_asString(object);
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var t1, s = "", sep = "", i = 0;
      while (true) {
        t1 = H._Utils_arrayLength(array);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        s = C.JSString_methods.$add(s, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(array, i)), genericContext)));
        ++i;
        sep = ", ";
      }
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, t1, offset, i, typeParametersText, typeSep, t2, boundRti, returnType, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = H._Utils_arrayLength(bounds);
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = J.get$length$asx(genericContext);
        t1 = J.getInterceptor$asx(genericContext);
        offset = t1.get$length(genericContext);
        for (i = boundsLength; i > 0; --i)
          t1.add$1(genericContext, "T" + (offset + i));
        for (typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t2 = t1.get$length(genericContext);
          if (typeof t2 !== "number")
            return t2.$sub();
          typeParametersText = C.JSString_methods.$add(typeParametersText, t1.$index(genericContext, t2 - 1 - i));
          boundRti = H._Utils_asRti(H._Utils_arrayAt(bounds, i));
          if (!H.boolConversionCheck(H.isTopType(boundRti)))
            typeParametersText = C.JSString_methods.$add(typeParametersText, C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext)));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      returnType = H.Rti__getReturnType(functionType);
      parameters = H.Rti__getFunctionParameters(functionType);
      requiredPositional = H._FunctionParameters__getRequiredPositional(parameters);
      requiredPositionalLength = H._Utils_arrayLength(requiredPositional);
      optionalPositional = H._FunctionParameters__getOptionalPositional(parameters);
      optionalPositionalLength = H._Utils_arrayLength(optionalPositional);
      named = H._FunctionParameters__getNamed(parameters);
      namedLength = H._Utils_arrayLength(named);
      returnTypeText = H._rtiToString(returnType, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText = C.JSString_methods.$add(argumentsText, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(requiredPositional, i)), genericContext)));
      if (optionalPositionalLength > 0) {
        argumentsText = C.JSString_methods.$add(argumentsText, sep + "[");
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText = C.JSString_methods.$add(argumentsText, C.JSString_methods.$add(sep, H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(optionalPositional, i)), genericContext)));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText = C.JSString_methods.$add(argumentsText, sep + "{");
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(named, i + 1))))
            argumentsText += "required ";
          argumentsText = C.JSString_methods.$add(argumentsText, J.$add$ns(J.$add$ns(H._rtiToString(H._Utils_asRti(H._Utils_arrayAt(named, i + 2)), genericContext), " "), H._Utils_asString(H._Utils_arrayAt(named, i))));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, index, t1, t2,
        kind = H.Rti__getKind(rti);
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(H.Rti__getStarArgument(rti), genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = H.Rti__getQuestionArgument(rti);
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = H.Rti__getKind(questionArgument);
        return (argumentKind === 11 || argumentKind === 12 ? J.$add$ns("(" + s, ")") : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(H.Rti__getFutureOrArgument(rti), genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(H.Rti__getInterfaceName(rti));
        $arguments = H.Rti__getInterfaceTypeArguments(rti);
        return $arguments.length !== 0 ? C.JSString_methods.$add($name, J.$add$ns(C.JSString_methods.$add("<", H._rtiArrayToString($arguments, genericContext)), ">")) : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(H.Rti__getGenericFunctionBase(rti), genericContext, H.Rti__getGenericFunctionBounds(rti));
      if (kind === 13) {
        genericContext.toString;
        index = H.Rti__getGenericFunctionParameterIndex(rti);
        t1 = J.getInterceptor$asx(genericContext);
        t2 = t1.get$length(genericContext);
        if (typeof t2 !== "number")
          return t2.$sub();
        return t1.$index(genericContext, t2 - 1 - index);
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_evalCache: function(universe) {
      return universe.eC;
    },
    _Universe_typeRules: function(universe) {
      return universe.tR;
    },
    _Universe_erasedTypes: function(universe) {
      return universe.eT;
    },
    _Universe__findRule: function(universe, targetType) {
      return H._Universe_typeRules(universe)[targetType];
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = H._Universe__findRule(universe, targetType);
      for (; H.boolConversionCheck(H._Utils_isString(rule));)
        rule = H._Universe__findRule(universe, H._Utils_asString(rule));
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = H._Universe_erasedTypes(universe),
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (H.boolConversionCheck(H._Utils_isNum(probe))) {
        $length = H._Utils_asInt(probe);
        erased = H._Universe__lookupErasedRti(universe);
        $arguments = [];
        for (i = 0; i < $length; ++i)
          H._Utils_arrayPush($arguments, erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return H._Utils_asRti(probe);
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(H._Universe_typeRules(universe), rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(H._Universe_erasedTypes(universe), types);
    },
    _Universe_sharedEmptyArray: function(universe) {
      return universe.sEA;
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        cache = H._Universe_evalCache(universe),
        probe = H._Utils_mapGet(cache, recipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__parseRecipe(universe, null, recipe, normalize);
      H._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = H.Rti__getEvalCache(environment);
      if (cache == null) {
        cache = new Map();
        H.Rti__setEvalCache(environment, cache);
      }
      probe = H._Utils_mapGet(cache, recipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__parseRecipe(universe, environment, recipe, true);
      H._Utils_mapSet(cache, recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = H.Rti__getBindCache(environment);
      if (cache == null) {
        cache = new Map();
        H.Rti__setBindCache(environment, cache);
      }
      argumentsRecipe = H.Rti__getCanonicalRecipe(argumentsRti);
      probe = H._Utils_mapGet(cache, argumentsRecipe);
      if (probe != null)
        return H._Utils_asRti(probe);
      rti = H._Universe__lookupBindingRti(universe, environment, H.boolConversionCheck(J.$eq$(H.Rti__getKind(argumentsRti), 10)) ? H.Rti__getBindingArguments(argumentsRti) : [argumentsRti]);
      H._Utils_mapSet(cache, argumentsRecipe, rti);
      return rti;
    },
    _Universe_evalTypeVariable: function(universe, environment, $name) {
      var recipe;
      if (H.Rti__getKind(environment) === 10)
        environment = H.Rti__getBindingBase(environment);
      recipe = H.TypeRule_lookupTypeVariable(H._Universe_findRule(universe, H.Rti__getInterfaceName(environment)), $name);
      if (recipe == null)
        throw H.wrapException('No "' + $name + '" in "' + H.S(H.Rti__getCanonicalRecipe(environment)) + '"');
      return H._Universe_evalInEnvironment(universe, environment, recipe);
    },
    _Universe__parseRecipe: function(universe, environment, recipe, normalize) {
      return H._Parser_parse(H._Parser_create(universe, environment, recipe, normalize));
    },
    _Universe__installTypeTests: function(universe, rti) {
      H.Rti__setAsCheckFunction(rti, H._installSpecializedAsCheck);
      H.Rti__setIsTestFunction(rti, H._installSpecializedIsTest);
      return rti;
    },
    _Universe__installRti: function(universe, key, rti) {
      H._Utils_mapSet(H._Universe_evalCache(universe), key, rti);
      return rti;
    },
    _Universe__recipeJoin: function(s1, s2) {
      return s1 + s2;
    },
    _Universe__recipeJoin3: function(s1, s2, s3) {
      return s1 + (s2 + s3);
    },
    _Universe__recipeJoin4: function(s1, s2, s3, s4) {
      return s1 + (s2 + s3 + s4);
    },
    _Universe__recipeJoin5: function(s1, s2, s3, s4, s5) {
      return s1 + (s2 + s3 + s4 + s5);
    },
    _Universe__canonicalRecipeOfErased: function() {
      return "#";
    },
    _Universe__canonicalRecipeOfDynamic: function() {
      return "@";
    },
    _Universe__canonicalRecipeOfVoid: function() {
      return "~";
    },
    _Universe__canonicalRecipeOfNever: function() {
      return H._Universe__recipeJoin("0", "&");
    },
    _Universe__canonicalRecipeOfAny: function() {
      return H._Universe__recipeJoin("1", "&");
    },
    _Universe__canonicalRecipeOfStar: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "*");
    },
    _Universe__canonicalRecipeOfQuestion: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "?");
    },
    _Universe__canonicalRecipeOfFutureOr: function(baseType) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(baseType), "/");
    },
    _Universe__canonicalRecipeOfGenericFunctionParameter: function(index) {
      return H._Universe__recipeJoin(H.S(index), "^");
    },
    _Universe__lookupErasedRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 5, H._Universe__canonicalRecipeOfErased());
    },
    _Universe__lookupDynamicRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 2, H._Universe__canonicalRecipeOfDynamic());
    },
    _Universe__lookupVoidRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 3, H._Universe__canonicalRecipeOfVoid());
    },
    _Universe__lookupNeverRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 1, H._Universe__canonicalRecipeOfNever());
    },
    _Universe__lookupAnyRti: function(universe) {
      return H._Universe__lookupTerminalRti(universe, 4, H._Universe__canonicalRecipeOfAny());
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createTerminalRti(universe, kind, key));
    },
    _Universe__createTerminalRti: function(universe, kind, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, kind);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfStar(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createStarRti(universe, baseType, key, normalize));
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (H.boolConversionCheck(H.isStrongTopType(baseType)) || H.boolConversionCheck(H.isNullType(baseType)) || baseKind === 7 || baseKind === 6)
          return baseType;
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 6);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfQuestion(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createQuestionRti(universe, baseType, key, normalize));
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (!H.boolConversionCheck(H.isStrongTopType(baseType)))
          if (!H.boolConversionCheck(H.isNullType(baseType)))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(baseType)));
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || H.boolConversionCheck(H._Utils_isIdentical(baseType, type$.legacy_Never)))
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = H.Rti__getStarArgument(baseType);
          if (H.Rti__getKind(starArgument) === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(starArgument))))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 7);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var key = H._Universe__canonicalRecipeOfFutureOr(baseType),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createFutureOrRti(universe, baseType, key, normalize));
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var baseKind, rti;
      if (normalize) {
        baseKind = H.Rti__getKind(baseType);
        if (H.boolConversionCheck(H.isTopType(baseType)) || H.boolConversionCheck(H.isObjectType(baseType)))
          return baseType;
        else if (baseKind === 1)
          return H._Universe__lookupFutureRti(universe, baseType);
        else if (H.boolConversionCheck(H.isNullType(baseType)))
          return type$.nullable_Future_Null;
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 8);
      H.Rti__setPrimary(rti, baseType);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var key = H._Universe__canonicalRecipeOfGenericFunctionParameter(index),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createGenericFunctionParameterRti(universe, index, key));
    },
    _Universe__createGenericFunctionParameterRti: function(universe, index, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 13);
      H.Rti__setPrimary(rti, index);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = H._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s = H._Universe__recipeJoin3(s, sep, H.Rti__getCanonicalRecipe(H._Utils_asRti(H._Utils_arrayAt($arguments, i))));
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, $name, nameSep,
        $length = H._Utils_arrayLength($arguments);
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        $name = H._Utils_asString(H._Utils_arrayAt($arguments, i));
        nameSep = H._Utils_asBool(H._Utils_arrayAt($arguments, i + 1)) ? "!" : ":";
        s = H._Universe__recipeJoin5(s, sep, $name, nameSep, H.Rti__getCanonicalRecipe(H._Utils_asRti(H._Utils_arrayAt($arguments, i + 2))));
      }
      return s;
    },
    _Universe__canonicalRecipeOfInterface: function($name, $arguments) {
      var s = H._Utils_asString($name);
      return H._Utils_arrayLength($arguments) !== 0 ? H._Universe__recipeJoin4(s, "<", H._Universe__canonicalRecipeJoin($arguments), ">") : s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var key = H._Universe__canonicalRecipeOfInterface($name, $arguments),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createInterfaceRti(universe, $name, $arguments, key));
    },
    _Universe__createInterfaceRti: function(universe, $name, typeArguments, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 9);
      H.Rti__setPrimary(rti, $name);
      H.Rti__setRest(rti, typeArguments);
      if (H._Utils_arrayLength(typeArguments) > 0)
        H.Rti__setPrecomputed1(rti, H._Utils_arrayAt(typeArguments, 0));
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureRti: function(universe, base) {
      return H._Universe__lookupInterfaceRti(universe, "Future", [base]);
    },
    _Universe__canonicalRecipeOfBinding: function(base, $arguments) {
      return H._Universe__recipeJoin5(H.Rti__getCanonicalRecipe(base), ";", "<", H._Universe__canonicalRecipeJoin($arguments), ">");
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe;
      if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(base), 10))) {
        newBase = H.Rti__getBindingBase(base);
        newArguments = H._Utils_arrayConcat(H.Rti__getBindingArguments(base), $arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = H._Universe__canonicalRecipeOfBinding(newBase, newArguments);
      probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createBindingRti(universe, newBase, newArguments, key));
    },
    _Universe__createBindingRti: function(universe, base, $arguments, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 10);
      H.Rti__setPrimary(rti, base);
      H.Rti__setRest(rti, $arguments);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfFunction: function(returnType, parameters) {
      return H._Universe__recipeJoin(H.Rti__getCanonicalRecipe(returnType), H._Universe__canonicalRecipeOfFunctionParameters(parameters));
    },
    _Universe__canonicalRecipeOfFunctionParameters: function(parameters) {
      var sep,
        requiredPositional = H._FunctionParameters__getRequiredPositional(parameters),
        requiredPositionalLength = H._Utils_arrayLength(requiredPositional),
        optionalPositional = H._FunctionParameters__getOptionalPositional(parameters),
        optionalPositionalLength = H._Utils_arrayLength(optionalPositional),
        named = H._FunctionParameters__getNamed(parameters),
        namedLength = H._Utils_arrayLength(named),
        recipe = H._Universe__recipeJoin("(", H._Universe__canonicalRecipeJoin(requiredPositional));
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = H._Universe__recipeJoin5(recipe, sep, "[", H._Universe__canonicalRecipeJoin(optionalPositional), "]");
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe = H._Universe__recipeJoin5(recipe, sep, "{", H._Universe__canonicalRecipeJoinNamed(named), "}");
      }
      return H._Universe__recipeJoin(recipe, ")");
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var key = H._Universe__canonicalRecipeOfFunction(returnType, parameters),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createFunctionRti(universe, returnType, parameters, key));
    },
    _Universe__createFunctionRti: function(universe, returnType, parameters, key) {
      var rti = H.Rti_allocate();
      H.Rti__setKind(rti, 11);
      H.Rti__setPrimary(rti, returnType);
      H.Rti__setRest(rti, parameters);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__canonicalRecipeOfGenericFunction: function(baseFunctionType, bounds) {
      return H._Universe__recipeJoin4(H.Rti__getCanonicalRecipe(baseFunctionType), "<", H._Universe__canonicalRecipeJoin(bounds), ">");
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var key = H._Universe__canonicalRecipeOfGenericFunction(baseFunctionType, bounds),
        probe = H._Utils_mapGet(H._Universe_evalCache(universe), key);
      if (probe != null)
        return H._Utils_asRti(probe);
      return H._Universe__installRti(universe, key, H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize));
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = H._Utils_arrayLength(bounds);
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = H._Utils_asRti(H._Utils_arrayAt(bounds, i));
          if (H.boolConversionCheck(J.$eq$(H.Rti__getKind(bound), 1))) {
            H._Utils_arraySetAt(typeArguments, i, bound);
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, H._Utils_isNotIdentical(bounds, substitutedBounds));
        }
      }
      rti = H.Rti_allocate();
      H.Rti__setKind(rti, 12);
      H.Rti__setPrimary(rti, baseFunctionType);
      H.Rti__setRest(rti, bounds);
      H.Rti__setCanonicalRecipe(rti, key);
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_universe: function(parser) {
      return parser.u;
    },
    _Parser_environment: function(parser) {
      return parser.e;
    },
    _Parser_recipe: function(parser) {
      return parser.r;
    },
    _Parser_stack: function(parser) {
      return parser.s;
    },
    _Parser_position: function(parser) {
      return parser.p;
    },
    _Parser_setPosition: function(parser, p) {
      parser.p = p;
    },
    _Parser_normalize: function(parser) {
      return parser.n;
    },
    _Parser_charCodeAt: function(s, i) {
      return s.charCodeAt(i);
    },
    _Parser_push: function(stack, value) {
      stack.push(value);
    },
    _Parser_pop: function(stack) {
      return stack.pop();
    },
    _Parser_parse: function(parser) {
      var t1, i, ch, u, item,
        source = H._Parser_recipe(parser),
        stack = H._Parser_stack(parser);
      for (t1 = source.length, i = 0; i < t1;) {
        ch = H._Parser_charCodeAt(source, i);
        if (H.boolConversionCheck(H.Recipe_isDigit(ch)))
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if (H.boolConversionCheck(H.Recipe_isIdentifierStart(ch)))
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              H._Parser_push(stack, false);
              break;
            case 33:
              H._Parser_push(stack, true);
              break;
            case 59:
              H._Parser_push(stack, H._Parser_toType(H._Parser_universe(parser), H._Parser_environment(parser), H._Parser_pop(stack)));
              break;
            case 94:
              H._Parser_push(stack, H._Parser_toGenericFunctionParameter(H._Parser_universe(parser), H._Parser_pop(stack)));
              break;
            case 35:
              H._Parser_push(stack, H._Universe__lookupErasedRti(H._Parser_universe(parser)));
              break;
            case 64:
              H._Parser_push(stack, H._Universe__lookupDynamicRti(H._Parser_universe(parser)));
              break;
            case 126:
              H._Parser_push(stack, H._Universe__lookupVoidRti(H._Parser_universe(parser)));
              break;
            case 60:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 62:
              H._Parser_handleTypeArguments(parser, stack);
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupStarRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 63:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupQuestionRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 47:
              u = H._Parser_universe(parser);
              H._Parser_push(stack, H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, H._Parser_environment(parser), H._Parser_pop(stack)), H._Parser_normalize(parser)));
              break;
            case 40:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 41:
              H._Parser_handleFunctionArguments(parser, stack);
              break;
            case 91:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 93:
              H._Parser_handleOptionalGroup(parser, stack);
              break;
            case 123:
              H._Parser_pushStackFrame(parser, stack);
              break;
            case 125:
              H._Parser_handleNamedGroup(parser, stack);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = H._Parser_pop(stack);
      return H._Parser_toType(H._Parser_universe(parser), H._Parser_environment(parser), item);
    },
    _Parser_pushStackFrame: function(parser, stack) {
      H._Parser_push(stack, H._Parser_position(parser));
      H._Parser_setPosition(parser, H._Utils_arrayLength(stack));
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch, t2,
        value = H.Recipe_digitValue(digit);
      for (t1 = source.length; i < t1; ++i) {
        ch = H._Parser_charCodeAt(source, i);
        if (!H.boolConversionCheck(H.Recipe_isDigit(ch)))
          break;
        t2 = H.Recipe_digitValue(ch);
        if (typeof t2 !== "number")
          return H.iae(t2);
        value = value * 10 + t2;
      }
      H._Parser_push(stack, value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, string,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = H._Parser_charCodeAt(source, i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else if (!(H.boolConversionCheck(H.Recipe_isIdentifierStart(ch)) || H.boolConversionCheck(H.Recipe_isDigit(ch))))
          break;
      }
      string = H._Utils_substring(source, start, i);
      if (hasPeriod)
        H._Parser_push(stack, H._Universe_evalTypeVariable(H._Parser_universe(parser), H._Parser_environment(parser), string));
      else
        H._Parser_push(stack, string);
      return i;
    },
    _Parser_handleTypeArguments: function(parser, stack) {
      var base,
        universe = H._Parser_universe(parser),
        $arguments = H._Parser_collectArray(parser, stack),
        head = H._Parser_pop(stack);
      if (H.boolConversionCheck(H._Utils_isString(head)))
        H._Parser_push(stack, H._Universe__lookupInterfaceRti(universe, H._Utils_asString(head), $arguments));
      else {
        base = H._Parser_toType(universe, H._Parser_environment(parser), head);
        switch (H.Rti__getKind(base)) {
          case 11:
            H._Parser_push(stack, H._Universe__lookupGenericFunctionRti(universe, base, $arguments, H._Parser_normalize(parser)));
            break;
          default:
            H._Parser_push(stack, H._Universe__lookupBindingRti(universe, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleFunctionArguments: function(parser, stack) {
      var universe = H._Parser_universe(parser),
        parameters = H._FunctionParameters_allocate(),
        optionalPositional = H._Universe_sharedEmptyArray(universe),
        named = H._Universe_sharedEmptyArray(universe),
        head = H._Parser_pop(stack);
      if (H.boolConversionCheck(H._Utils_isNum(head)))
        switch (H._Utils_asInt(head)) {
          case -1:
            optionalPositional = H._Parser_pop(stack);
            break;
          case -2:
            named = H._Parser_pop(stack);
            break;
          default:
            H._Parser_push(stack, head);
            break;
        }
      else
        H._Parser_push(stack, head);
      H._FunctionParameters__setRequiredPositional(parameters, H._Parser_collectArray(parser, stack));
      H._FunctionParameters__setOptionalPositional(parameters, optionalPositional);
      H._FunctionParameters__setNamed(parameters, named);
      H._Parser_push(stack, H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, H._Parser_environment(parser), H._Parser_pop(stack)), parameters));
    },
    _Parser_handleOptionalGroup: function(parser, stack) {
      H._Parser_push(stack, H._Parser_collectArray(parser, stack));
      H._Parser_push(stack, -1);
    },
    _Parser_handleNamedGroup: function(parser, stack) {
      H._Parser_push(stack, H._Parser_collectNamed(parser, stack));
      H._Parser_push(stack, -2);
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = H._Parser_pop(stack);
      if (0 === $top) {
        H._Parser_push(stack, H._Universe__lookupNeverRti(H._Parser_universe(parser)));
        return;
      }
      if (1 === $top) {
        H._Parser_push(stack, H._Universe__lookupAnyRti(H._Parser_universe(parser)));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_collectArray: function(parser, stack) {
      var array = H._Utils_arraySplice(stack, H._Parser_position(parser));
      H._Parser_toTypes(H._Parser_universe(parser), H._Parser_environment(parser), array);
      H._Parser_setPosition(parser, H._Utils_asInt(H._Parser_pop(stack)));
      return array;
    },
    _Parser_collectNamed: function(parser, stack) {
      var array = H._Utils_arraySplice(stack, H._Parser_position(parser));
      H._Parser_toTypesNamed(H._Parser_universe(parser), H._Parser_environment(parser), array);
      H._Parser_setPosition(parser, H._Utils_asInt(H._Parser_pop(stack)));
      return array;
    },
    _Parser_toType: function(universe, environment, item) {
      if (H.boolConversionCheck(H._Utils_isString(item)))
        return H._Universe__lookupInterfaceRti(universe, H._Utils_asString(item), H._Universe_sharedEmptyArray(universe));
      else if (H.boolConversionCheck(H._Utils_isNum(item)))
        return H._Parser_indexToType(universe, environment, H._Utils_asInt(item));
      else
        return H._Utils_asRti(item);
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = H._Utils_arrayLength(items);
      for (i = 0; i < $length; ++i)
        H._Utils_arraySetAt(items, i, H._Parser_toType(universe, environment, H._Utils_arrayAt(items, i)));
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = H._Utils_arrayLength(items);
      for (i = 2; i < $length; i += 3)
        H._Utils_arraySetAt(items, i, H._Parser_toType(universe, environment, H._Utils_arrayAt(items, i)));
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = H.Rti__getKind(environment);
      if (kind === 10) {
        if (index === 0)
          return H.Rti__getBindingBase(environment);
        typeArguments = H.Rti__getBindingArguments(environment);
        len = H._Utils_arrayLength(typeArguments);
        if (index <= len)
          return H._Utils_asRti(H._Utils_arrayAt(typeArguments, index - 1));
        index -= len;
        environment = H.Rti__getBindingBase(environment);
        kind = H.Rti__getKind(environment);
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = H.Rti__getInterfaceTypeArguments(environment);
      if (index <= H._Utils_arrayLength(typeArguments))
        return H._Utils_asRti(H._Utils_arrayAt(typeArguments, index - 1));
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + H.S(environment)));
    },
    _Parser_toGenericFunctionParameter: function(universe, item) {
      return H._Universe__lookupGenericFunctionParameterRti(universe, H._Utils_asInt(item));
    },
    TypeRule_lookupTypeVariable: function(rule, typeVariable) {
      return rule[typeVariable];
    },
    TypeRule_lookupSupertype: function(rule, supertype) {
      return rule[supertype];
    },
    isSubtype: function(universe, s, t) {
      return H._isSubtype(universe, s, null, t, null);
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, sBounds, tBounds, sLength, i, sBound, tBound;
      if (H.boolConversionCheck(H._Utils_isIdentical(s, t)))
        return true;
      if (H.boolConversionCheck(H.isTopType(t)))
        return true;
      sKind = H.Rti__getKind(s);
      if (sKind === 4)
        return true;
      if (H.boolConversionCheck(H.isStrongTopType(s)))
        return false;
      if (H.boolConversionCheck(H.isBottomType(s)))
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(sEnv, H.Rti__getGenericFunctionParameterIndex(s))), sEnv, t, tEnv)))
          return true;
      tKind = H.Rti__getKind(t);
      t1 = H.boolConversionCheck(H.isNullType(s));
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, H.Rti__getFutureOrArgument(t), tEnv);
        return H.boolConversionCheck(H.isNullType(t)) || tKind === 7 || tKind === 6;
      }
      t1 = H.boolConversionCheck(H.isObjectType(t));
      if (t1) {
        if (sKind === 8)
          return H._isSubtype(universe, H.Rti__getFutureOrArgument(s), sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, H.Rti__getStarArgument(s), sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, H.Rti__getStarArgument(s), sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H.boolConversionCheck(H._isSubtype(universe, H.Rti__getFutureOrArgument(s), sEnv, t, tEnv)))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H.boolConversionCheck(H._isSubtype(universe, type$.Null, sEnv, t, tEnv));
        return t1 && H.boolConversionCheck(H._isSubtype(universe, H.Rti__getQuestionArgument(s), sEnv, t, tEnv));
      }
      if (tKind === 8) {
        if (H.boolConversionCheck(H._isSubtype(universe, s, sEnv, H.Rti__getFutureOrArgument(t), tEnv)))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H.boolConversionCheck(H._isSubtype(universe, s, sEnv, type$.Null, tEnv));
        return t1 || H.boolConversionCheck(H._isSubtype(universe, s, sEnv, H.Rti__getQuestionArgument(t), tEnv));
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && H.boolConversionCheck(H.isFunctionType(t)))
        return true;
      if (tKind === 12) {
        if (H.boolConversionCheck(H.isJsFunctionType(s)))
          return true;
        if (sKind !== 12)
          return false;
        sBounds = H.Rti__getGenericFunctionBounds(s);
        tBounds = H.Rti__getGenericFunctionBounds(t);
        sLength = H._Utils_arrayLength(sBounds);
        if (sLength !== H._Utils_arrayLength(tBounds))
          return false;
        sEnv = sEnv == null ? sBounds : H._Utils_arrayConcat(sBounds, sEnv);
        tEnv = tEnv == null ? tBounds : H._Utils_arrayConcat(tBounds, tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = H._Utils_asRti(H._Utils_arrayAt(sBounds, i));
          tBound = H._Utils_asRti(H._Utils_arrayAt(tBounds, i));
          if (!H.boolConversionCheck(H._isSubtype(universe, sBound, sEnv, tBound, tEnv)) || !H.boolConversionCheck(H._isSubtype(universe, tBound, tEnv, sBound, sEnv)))
            return false;
        }
        return H._isFunctionSubtype(universe, H.Rti__getGenericFunctionBase(s), sEnv, H.Rti__getGenericFunctionBase(t), tEnv);
      }
      if (tKind === 11) {
        if (H.boolConversionCheck(H.isJsFunctionType(s)))
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, sParameter, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired, tIsRequired, sType;
      if (!H.boolConversionCheck(H._isSubtype(universe, H.Rti__getReturnType(s), sEnv, H.Rti__getReturnType(t), tEnv)))
        return false;
      sParameters = H.Rti__getFunctionParameters(s);
      tParameters = H.Rti__getFunctionParameters(t);
      sRequiredPositional = H._FunctionParameters__getRequiredPositional(sParameters);
      tRequiredPositional = H._FunctionParameters__getRequiredPositional(tParameters);
      sRequiredPositionalLength = H._Utils_arrayLength(sRequiredPositional);
      tRequiredPositionalLength = H._Utils_arrayLength(tRequiredPositional);
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = H._FunctionParameters__getOptionalPositional(sParameters);
      tOptionalPositional = H._FunctionParameters__getOptionalPositional(tParameters);
      sOptionalPositionalLength = H._Utils_arrayLength(sOptionalPositional);
      tOptionalPositionalLength = H._Utils_arrayLength(tOptionalPositional);
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sRequiredPositional, i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tRequiredPositional, i)), tEnv, sParameter, sEnv)))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sOptionalPositional, i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tRequiredPositional, sRequiredPositionalLength + i)), tEnv, sParameter, sEnv)))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        sParameter = H._Utils_asRti(H._Utils_arrayAt(sOptionalPositional, requiredPositionalDelta + i));
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tOptionalPositional, i)), tEnv, sParameter, sEnv)))
          return false;
      }
      sNamed = H._FunctionParameters__getNamed(sParameters);
      tNamed = H._FunctionParameters__getNamed(tParameters);
      sNamedLength = H._Utils_arrayLength(sNamed);
      tNamedLength = H._Utils_arrayLength(tNamed);
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = H._Utils_asString(H._Utils_arrayAt(tNamed, tIndex));
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = H._Utils_asString(H._Utils_arrayAt(sNamed, sIndex));
          sIndex += 3;
          if (H.boolConversionCheck(H._Utils_stringLessThan(tName, sName)))
            return false;
          sIsRequired = H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(sNamed, sIndex - 2)));
          if (H.boolConversionCheck(H._Utils_stringLessThan(sName, tName))) {
            if (sIsRequired)
              return false;
            continue;
          }
          tIsRequired = H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(tNamed, tIndex + 1)));
          if (sIsRequired && !tIsRequired)
            return false;
          sType = H._Utils_asRti(H._Utils_arrayAt(sNamed, sIndex - 1));
          if (!H.boolConversionCheck(H._isSubtype(universe, H._Utils_asRti(H._Utils_arrayAt(tNamed, tIndex + 2)), tEnv, sType, sEnv)))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (H.boolConversionCheck(H._Utils_asBool(H._Utils_arrayAt(sNamed, sIndex + 1))))
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, sArg, tArg, rule, supertypeArgs,
        sName = H.Rti__getInterfaceName(s),
        tName = H.Rti__getInterfaceName(t);
      if (sName === tName) {
        sArgs = H.Rti__getInterfaceTypeArguments(s);
        tArgs = H.Rti__getInterfaceTypeArguments(t);
        $length = H._Utils_arrayLength(sArgs);
        for (i = 0; i < $length; ++i) {
          sArg = H._Utils_asRti(H._Utils_arrayAt(sArgs, i));
          tArg = H._Utils_asRti(H._Utils_arrayAt(tArgs, i));
          if (!H.boolConversionCheck(H._isSubtype(universe, sArg, sEnv, tArg, tEnv)))
            return false;
        }
        return true;
      }
      if (H.boolConversionCheck(H.isObjectType(t)))
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = H.TypeRule_lookupSupertype(rule, tName);
      if (supertypeArgs == null)
        return false;
      $length = H._Utils_arrayLength(supertypeArgs);
      tArgs = H.Rti__getInterfaceTypeArguments(t);
      for (i = 0; i < $length; ++i)
        if (!H.boolConversionCheck(H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, H._Utils_asString(H._Utils_arrayAt(supertypeArgs, i))), sEnv, H._Utils_asRti(H._Utils_arrayAt(tArgs, i)), tEnv)))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = H.Rti__getKind(t);
      if (!H.boolConversionCheck(H.isNullType(t)))
        if (!H.boolConversionCheck(H.isStrongTopType(t)))
          if (kind !== 7)
            if (!(kind === 6 && H.boolConversionCheck(H.isNullable(H.Rti__getStarArgument(t)))))
              t1 = kind === 8 && H.boolConversionCheck(H.isNullable(H.Rti__getFutureOrArgument(t)));
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.boolConversionCheck(H.isStrongTopType(t)))
        if (!H.boolConversionCheck(H.isLegacyObjectType(t)))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = H.Rti__getKind(t);
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || H.boolConversionCheck(H.isNullableObjectType(t));
    },
    isBottomType: function(t) {
      var t1;
      if (!H.boolConversionCheck(J.$eq$(H.Rti__getKind(t), 1)))
        t1 = false;
      else
        t1 = true;
      return t1;
    },
    isObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.Object);
    },
    isLegacyObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.legacy_Object);
    },
    isNullableObjectType: function(t) {
      return H._Utils_isIdentical(t, type$.nullable_Object);
    },
    isNullType: function(t) {
      return H.boolConversionCheck(H._Utils_isIdentical(t, type$.Null)) || H.boolConversionCheck(H._Utils_isIdentical(t, type$.JSNull));
    },
    isFunctionType: function(t) {
      return H._Utils_isIdentical(t, type$.Function);
    },
    isJsFunctionType: function(t) {
      return H._Utils_isIdentical(t, type$.JavaScriptFunction);
    },
    _Utils_asBool: function(o) {
      return o;
    },
    _Utils_asDouble: function(o) {
      return o;
    },
    _Utils_asInt: function(o) {
      return o;
    },
    _Utils_asNum: function(o) {
      return o;
    },
    _Utils_asString: function(o) {
      return o;
    },
    _Utils_asRti: function(s) {
      return s;
    },
    _Utils_asRtiOrNull: function(s) {
      return s;
    },
    _Utils_isString: function(o) {
      return typeof o == "string";
    },
    _Utils_isNum: function(o) {
      return typeof o == "number";
    },
    _Utils_instanceOf: function(o, $constructor) {
      return o instanceof $constructor;
    },
    _Utils_isIdentical: function(s, t) {
      return s === t;
    },
    _Utils_isNotIdentical: function(s, t) {
      return s !== t;
    },
    _Utils_objectKeys: function(o) {
      return Object.keys(o);
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = H._Utils_objectKeys(other),
        $length = H._Utils_arrayLength(keys);
      for (i = 0; i < $length; ++i) {
        key = H._Utils_asString(H._Utils_arrayAt(keys, i));
        o[key] = other[key];
      }
    },
    _Utils_isArray: function(o) {
      return Array.isArray(o);
    },
    _Utils_arrayLength: function(array) {
      return array.length;
    },
    _Utils_arrayAt: function(array, i) {
      return array[i];
    },
    _Utils_arraySetAt: function(array, i, value) {
      array[i] = value;
    },
    _Utils_arraySplice: function(array, position) {
      return array.splice(position);
    },
    _Utils_arrayConcat: function(a1, a2) {
      return a1.concat(a2);
    },
    _Utils_arrayPush: function(array, value) {
      array.push(value);
    },
    _Utils_substring: function(s, start, end) {
      return s.substring(start, end);
    },
    _Utils_stringLessThan: function(s1, s2) {
      return s1 < s2;
    },
    _Utils_mapGet: function(cache, key) {
      return cache.get(key);
    },
    _Utils_mapSet: function(cache, key, value) {
      cache.set(key, value);
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.JsCache_fetch(init.mangledGlobalNames, $name);
    },
    Recipe_isDigit: function(code) {
      return code >= 48 && code <= 57;
    },
    Recipe_digitValue: function(code) {
      return code - 48;
    },
    Recipe_isIdentifierStart: function(ch) {
      return (((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36;
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    getDispatchProperty: function(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty: function(object, value) {
      H.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor: function(record) {
      return record.i;
    },
    dispatchRecordProto: function(record) {
      return record.p;
    },
    dispatchRecordExtension: function(record) {
      return record.e;
    },
    dispatchRecordIndexability: function(record) {
      return record.x;
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, C.UnknownJavaScriptObject_methods);
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JS_INTEROP_INTERCEPTOR_TAG: function() {
      var t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
      return t1 == null ? $._JS_INTEROP_INTERCEPTOR_TAG = H.getIsolateAffinityTag("_$dart_js") : t1;
    },
    lookupInterceptorByConstructor: function($constructor) {
      return $constructor == null ? null : $constructor[J.JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor: function($constructor, interceptor) {
      H.defineProperty($constructor, H._asString(J.JS_INTEROP_INTERCEPTOR_TAG()), interceptor);
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$allocateFixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable: function($length, $E) {
      if ($length < 0)
        throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
      return J.JSArray_JSArray$markGrowable(new Array($length), $E);
    },
    JSArray_JSArray$allocateGrowable: function($length, $E) {
      if ($length < 0)
        throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
      return J.JSArray_JSArray$markGrowable(new Array($length), $E);
    },
    JSArray_JSArray$typed: function(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_JSArray$markGrowable: function(allocation, $E) {
      return H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), $E._eval$1("JSArray<0>"));
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_isFixedLength: function(a) {
      return !!a.fixed$length;
    },
    JSArray_isUnmodifiable: function(a) {
      return !!a.immutable$list;
    },
    JSArray_isGrowable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isFixedLength(a));
    },
    JSArray_isMutable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isUnmodifiable(a));
    },
    ArrayIterator$: function(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, $E._eval$1("ArrayIterator<0>"));
    },
    JSNumber__handleIEtoString: function(result) {
      var t1, exponent,
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        throw H.wrapException(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return C.JSString_methods.$add(result, C.JSString_methods.$mul("0", exponent));
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$in: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$height$z: function(receiver, value) {
      return J.getInterceptor$z(receiver).set$height(receiver, value);
    },
    set$offset$z: function(receiver, value) {
      return J.getInterceptor$z(receiver).set$offset(receiver, value);
    },
    set$repeat$z: function(receiver, value) {
      return J.getInterceptor$z(receiver).set$repeat(receiver, value);
    },
    set$width$z: function(receiver, value) {
      return J.getInterceptor$z(receiver).set$width(receiver, value);
    },
    get$buffer$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$buffer(receiver);
    },
    get$data$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$data(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$height$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$height(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNegative$n: function(receiver) {
      return J.getInterceptor$n(receiver).get$isNegative(receiver);
    },
    get$isNotEmpty$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$offset$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$offset(receiver);
    },
    get$onMessage$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMessage(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ns(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $negate$in: function(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    abs$0$in: function(receiver) {
      if (typeof receiver === "number")
        return Math.abs(receiver);
      return J.getInterceptor$in(receiver).abs$0(receiver);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    contains$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fillRange$3$ax: function(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    forEach$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).forEach$1(receiver, a0);
    },
    postMessage$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).postMessage$1(receiver, a0);
    },
    remainder$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).remainder$1(receiver, a0);
    },
    removeLast$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    setRange$3$ax: function(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    toInt$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__scheduleImmediate: function(callback) {
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      H.requiresPreamble();
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _hasTimer: function() {
      H.requiresPreamble();
      return self.setTimeout != null;
    },
    _rethrow: function(error, stackTrace) {
      error = type$.Object._as(H.wrapException(error));
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = H.checkNotNullable(error, "error", type$.Object);
      return new P.AsyncError(t1, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    Completer_Completer: function($T) {
      return P._AsyncCompleter$($T);
    },
    _AsyncCompleter$: function($T) {
      return new P._AsyncCompleter(P._Future$($T), $T._eval$1("_AsyncCompleter<0>"));
    },
    _FutureListener$then: function(result, onValue, errorCallback, $S, $T) {
      var t1 = errorCallback == null ? 1 : 3;
      return new P._FutureListener(result, t1, onValue, errorCallback, $S._eval$1("@<0>")._bind$1($T)._eval$1("_FutureListener<1,2>"));
    },
    _Future$: function($T) {
      return new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
    },
    _Future__chainCoreFuture: function(source, target) {
      var listeners;
      for (; H.boolConversionCheck(source.get$_isChained());)
        source = source.get$_chainSource();
      if (H.boolConversionCheck(source.get$_isComplete())) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, _box_0, hasError, asyncError, nextListener, nextListener0, sourceResult, t4, zone, oldZone, chainSource, result, _box_1 = {},
        t1 = _box_1.source = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1.get$_hasError();
        if (listeners == null) {
          if (hasError) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        sourceResult = _box_1.source._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t4 = !hasError;
        if (!t4 || H.boolConversionCheck(t1.get$handlesValue()) || H.boolConversionCheck(_box_0.listener.get$handlesComplete())) {
          zone = _box_0.listener.get$_zone();
          if (hasError && !H.boolConversionCheck(_box_1.source._zone.inSameErrorZone$1(zone))) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current !== zone ? P.Zone__enter(zone) : null;
          if (H.boolConversionCheck(_box_0.listener.get$handlesComplete()))
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if (H.boolConversionCheck(_box_0.listener.get$handlesValue()))
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if (H.boolConversionCheck(_box_0.listener.get$handlesError()))
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            P.Zone__leave(oldZone);
          t1 = _box_0.listenerValueOrError;
          if (t3._is(t1) && H.boolConversionCheck(_box_0.listener.shouldChain$1(t1))) {
            chainSource = t3._as(_box_0.listenerValueOrError);
            result = _box_0.listener.result;
            if (H.boolConversionCheck(chainSource.get$_isComplete())) {
              listeners = result._removeListeners$0();
              result._cloneResult$1(chainSource);
              _box_1.source = chainSource;
              t1 = chainSource;
              continue;
            } else
              P._Future__chainCoreFuture(chainSource, result);
            return;
          }
        }
        result = _box_0.listener.result;
        listeners = result._removeListeners$0();
        t1 = H.boolConversionCheck(_box_0.listenerHasError);
        t4 = _box_0.listenerValueOrError;
        if (!t1)
          result._setValue$1(t4);
        else
          result._setErrorObject$1(t2._as(t4));
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a valid result"));
    },
    _AsyncCallbackEntry$: function(callback) {
      return new P._AsyncCallbackEntry(callback);
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = P._AsyncCallbackEntry$(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!H.boolConversionCheck($._isInCallbackLoop))
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next;
      if ($._nextCallback == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = P._AsyncCallbackEntry$(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.set$next($._nextCallback);
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.get$_scheduleMicrotask();
      t1 = H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(currentZone));
      if (t1) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      P.Zone_current().scheduleMicrotask$1(P.Zone_current().bindCallbackGuarded$1(callback));
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave: function(previous) {
      $.Zone__current = previous;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = !H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(zone)) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _ZoneFunction: function _ZoneFunction(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      var t1 = H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
      return t1;
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V)));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      t1 = P.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(rightDelimiter);
      return t1.toString$0(0);
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable)))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var t2,
        t1 = J.getInterceptor$asx($._toStringVisiting),
        i = 0;
      while (true) {
        t2 = t1.get$length($._toStringVisiting);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (o === t1.$index($._toStringVisiting, i))
          return true;
        ++i;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t2, elision,
        it = J.get$iterator$ax(iterable),
        t1 = J.getInterceptor$asx(parts),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!H.boolConversionCheck(it.moveNext$0()))
          return;
        next = H.S(it.get$current());
        t1.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!H.boolConversionCheck(it.moveNext$0())) {
        if (count <= 5)
          return;
        ultimateString = t1.removeLast$0(parts);
        penultimateString = t1.removeLast$0(parts);
      } else {
        penultimate = it.get$current();
        ++count;
        if (!H.boolConversionCheck(it.moveNext$0())) {
          if (count <= 4) {
            t1.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = t1.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; H.boolConversionCheck(it.moveNext$0()); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t2 = J.get$length$asx(t1.removeLast$0(parts));
                if (typeof t2 !== "number")
                  return t2.$add();
                $length -= t2 + 2;
                --count;
              }
              t1.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      t2 = t1.get$length(parts);
      if (typeof t2 !== "number")
        return t2.$add();
      if (count > t2 + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if ($length > 80) {
          t2 = t1.get$length(parts);
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 3;
        } else
          t2 = false;
        if (!t2)
          break;
        t2 = J.get$length$asx(t1.removeLast$0(parts));
        if (typeof t2 !== "number")
          return t2.$add();
        $length -= t2 + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        t1.add$1(parts, elision);
      t1.add$1(parts, penultimateString);
      t1.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(list, "[", "]");
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (H.boolConversionCheck(P._isToStringVisiting(m)))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$ax($._toStringVisiting, m);
        result.write$1("{");
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$ax($._toStringVisiting);
      }
      return J.toString$0$(result);
    },
    _MapBaseValueIterable$: function(_map, $K, $V) {
      return new P._MapBaseValueIterable(_map, $K._eval$1("@<0>")._bind$1($V)._eval$1("_MapBaseValueIterable<1,2>"));
    },
    _MapBaseValueIterator$: function(map, $K, $V) {
      return new P._MapBaseValueIterator(J.get$iterator$ax(map.get$keys()), map, $K._eval$1("@<0>")._bind$1($V)._eval$1("_MapBaseValueIterator<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    JsonCyclicError$: function(object) {
      return new P.JsonCyclicError(object, null);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringifier_hexDigit: function(x) {
      return x < 10 ? 48 + x : 87 + x;
    },
    _JsonStringStringifier$: function(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? P.convert___defaultToEncodable$closure() : _toEncodable;
      return new P._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var output = P.StringBuffer$("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      return output.toString$0(0);
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      (indent == null ? P._JsonStringStringifier$(output, toEncodable) : P._JsonStringStringifierPretty$(output, toEncodable, indent)).writeObject$1(object);
    },
    _JsonStringStringifierPretty$: function(sink, toEncodable, _indent) {
      var t1 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
      return new P._JsonStringStringifierPretty(_indent, 0, sink, [], t1);
    },
    Converter: function Converter() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonEncoder: function JsonEncoder() {
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(string);
    },
    DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
      var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
      t1.DateTime$_withValue$2$isUtc(millisecondsSinceEpoch, isUtc);
      return t1;
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$empty: function(growable, $E) {
      return growable ? J.JSArray_JSArray$growable(0, $E) : J.JSArray_JSArray$fixed(0, $E);
    },
    List_List$from: function(elements, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); H.boolConversionCheck(t1.moveNext$0());)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      return list;
    },
    List_List$of: function(elements, growable, $E) {
      var t1;
      if (growable)
        return P.List_List$_of(elements, $E);
      t1 = P.List_List$_fixedOf(elements, $E);
      return t1;
    },
    List_List$_ofArray: function(elements, $E) {
      return J.JSArray_JSArray$markGrowable(elements.slice(0), $E);
    },
    List_List$_of: function(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return P.List_List$_ofArray(elements, $E);
      list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); H.boolConversionCheck(t1.moveNext$0());)
        C.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$_fixedOf: function(elements, $E) {
      return H.makeListFixedLength(P.List_List$_of(elements, $E), $E);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    String_String$fromCharCodes: function(charCodes) {
      if (Array.isArray(charCodes))
        return P.String__stringFromJSArray(charCodes, 0, null);
      if (type$.NativeUint8List._is(charCodes))
        return P.String__stringFromUint8List(charCodes, 0, null);
      return P.String__stringFromIterable(charCodes, 0, null);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromJSArray: function(list, start, endOrNull) {
      var len = list.length,
        end = P.RangeError_checkValidRange(start, endOrNull, len);
      return H.Primitives_stringFromCharCodes(start > 0 || end < len ? list.slice(start, end) : list);
    },
    String__stringFromUint8List: function(charCodes, start, endOrNull) {
      return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, endOrNull, charCodes.length));
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!H.boolConversionCheck(it.moveNext$0()))
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; H.boolConversionCheck(it.moveNext$0());)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!H.boolConversionCheck(it.moveNext$0()))
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer(H.S($content));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return string;
      if (H.boolConversionCheck(C.JSString_methods.get$isEmpty(separator))) {
        do
          string = P.StringBuffer__writeOne(string, iterator.get$current());
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        string = P.StringBuffer__writeOne(string, iterator.get$current());
        for (; H.boolConversionCheck(iterator.moveNext$0());)
          string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current());
      }
      return string;
    },
    StringBuffer__writeOne: function(string, obj) {
      return H.Primitives_stringConcatUnchecked(string, H.S(obj));
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return H.S(n);
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return H.S(n);
      if (n >= 10)
        return "0" + H.S(n);
      return "00" + H.S(n);
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    },
    Duration$_microseconds: function(_duration) {
      return new P.Duration(_duration);
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    NullThrownError$: function() {
      return new P.NullThrownError();
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull: function(argument, $name, $T) {
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
      return argument;
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, message == null ? "Invalid value" : message);
    },
    RangeError_checkValidIndex: function(index, indexable) {
      var $length = H._asInt(J.get$length$asx(indexable));
      if (0 > index || index >= $length)
        throw H.wrapException(P.IndexError$(index, indexable, "index", null, $length));
      return index;
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name == null ? "index" : $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, message == null ? "Index out of range" : message);
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    StackOverflowError$: function() {
      return new P.StackOverflowError();
    },
    CyclicInitializationError$: function(variableName) {
      return new P.CyclicInitializationError(variableName);
    },
    Exception_Exception: function(message) {
      return P._Exception$(message);
    },
    _Exception$: function(message) {
      return new P._Exception(message);
    },
    Iterable_Iterable$generate: function(count, generator, $E) {
      if (count <= 0)
        return H.EmptyIterable$($E);
      return P._GeneratorIterable$(count, generator, $E);
    },
    _GeneratorIterable$: function($length, generator, $E) {
      var t1 = generator == null ? $E._eval$1("0(int)")._as(P.core__GeneratorIterable__id$closure()) : generator;
      return new P._GeneratorIterable($length, t1, $E._eval$1("_GeneratorIterable<0>"));
    },
    _GeneratorIterable__id: function(n) {
      return H._asInt(n);
    },
    print: function(object) {
      H.printToConsole(J.toString$0$(object));
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    Iterator: function Iterator() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    convertDartToNative_SerializedScriptValue: function(value) {
      return P.convertDartToNative_PrepareForStructuredClone(value);
    },
    convertNativeToDart_SerializedScriptValue: function(object) {
      return P.convertNativeToDart_AcceptStructuredClone(object, true);
    },
    convertNativeToDart_DateTime: function(date) {
      return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
    },
    convertDartToNative_DateTime: function(date) {
      return new Date(date.get$millisecondsSinceEpoch());
    },
    convertDartToNative_PrepareForStructuredClone: function(value) {
      return P._StructuredCloneDart2Js$().convertDartToNative_PrepareForStructuredClone$1(value);
    },
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      return P._AcceptStructuredCloneDart2Js$().convertNativeToDart_AcceptStructuredClone$2$mustCopy(object, mustCopy);
    },
    _StructuredCloneDart2Js$: function() {
      return new P._StructuredCloneDart2Js([], []);
    },
    _AcceptStructuredCloneDart2Js$: function() {
      return new P._AcceptStructuredCloneDart2Js([], []);
    },
    isJavaScriptDate: function(value) {
      return value instanceof Date;
    },
    isJavaScriptRegExp: function(value) {
      return value instanceof RegExp;
    },
    isJavaScriptArray: function(value) {
      return value instanceof Array;
    },
    isJavaScriptSimpleObject: function(value) {
      var proto = Object.getPrototypeOf(value);
      return proto === Object.prototype || proto === null;
    },
    isJavaScriptPromise: function(value) {
      return typeof Promise != "undefined" && value instanceof Promise;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    NullRejectionException$_: function(isUndefined) {
      return new P.NullRejectionException(isUndefined);
    },
    promiseToFuture: function(jsPromise, $T) {
      var completer = P.Completer_Completer($T);
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return completer.future;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    AudioProcessingEvent: function AudioProcessingEvent() {
    },
    OfflineAudioCompletionEvent: function OfflineAudioCompletionEvent() {
    },
    ContextEvent: function ContextEvent() {
    },
    SqlError: function SqlError() {
    },
    min: function(a, b, $T) {
      return Math.min(H.checkNum(a), H.checkNum(b));
    },
    max: function(a, b, $T) {
      return Math.max(H.checkNum(a), H.checkNum(b));
    },
    log: function(x) {
      return Math.log(x);
    },
    pow: function(x, exponent) {
      return Math.pow(x, exponent);
    },
    Uint64List_Uint64List: function($length) {
      throw H.wrapException(P.UnsupportedError$("Uint64List not supported on the web."));
    },
    Int8List_Int8List$view: function(buffer) {
      return C.NativeByteBuffer_methods.asInt8List$2(buffer, 0, null);
    },
    Uint8List_Uint8List$view: function(buffer, offsetInBytes, $length) {
      return C.NativeByteBuffer_methods.asUint8List$2(buffer, offsetInBytes, $length);
    },
    Int16List_Int16List$view: function(buffer) {
      return C.NativeByteBuffer_methods.asInt16List$2(buffer, 0, null);
    },
    Int32List_Int32List$view: function(buffer) {
      return C.NativeByteBuffer_methods.asInt32List$2(buffer, 0, null);
    },
    Uint32List_Uint32List$view: function(buffer, offsetInBytes) {
      return C.NativeByteBuffer_methods.asUint32List$2(buffer, offsetInBytes, null);
    },
    Float32List_Float32List$view: function(buffer) {
      return C.NativeByteBuffer_methods.asFloat32List$2(buffer, 0, null);
    },
    Float64List_Float64List$view: function(buffer) {
      return C.NativeByteBuffer_methods.asFloat64List$2(buffer, 0, null);
    }
  },
  W = {
    _EventStream$: function(_target, _eventType, _useCapture, $T) {
      return new W._EventStream(_target, _eventType, _useCapture, $T._eval$1("_EventStream<0>"));
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, _useCapture, $T._eval$1("_EventStreamSubscription<0>"));
      t1._EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T);
      return t1;
    },
    _wrapZone: function(callback, $T) {
      if (H.boolConversionCheck(J.$eq$(P.Zone_current(), C.C__RootZone)))
        return callback;
      if (callback == null)
        return null;
      return P.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    AbortPaymentEvent: function AbortPaymentEvent() {
    },
    AnimationEvent: function AnimationEvent() {
    },
    AnimationPlaybackEvent: function AnimationPlaybackEvent() {
    },
    ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    },
    BackgroundFetchClickEvent: function BackgroundFetchClickEvent() {
    },
    BackgroundFetchEvent: function BackgroundFetchEvent() {
    },
    BackgroundFetchFailEvent: function BackgroundFetchFailEvent() {
    },
    BackgroundFetchedEvent: function BackgroundFetchedEvent() {
    },
    BeforeInstallPromptEvent: function BeforeInstallPromptEvent() {
    },
    BeforeUnloadEvent: function BeforeUnloadEvent() {
    },
    Blob: function Blob() {
    },
    BlobEvent: function BlobEvent() {
    },
    CanMakePaymentEvent: function CanMakePaymentEvent() {
    },
    ClipboardEvent: function ClipboardEvent() {
    },
    CloseEvent: function CloseEvent() {
    },
    CompositionEvent: function CompositionEvent() {
    },
    CustomEvent: function CustomEvent() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DeviceMotionEvent: function DeviceMotionEvent() {
    },
    DeviceOrientationEvent: function DeviceOrientationEvent() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    ExtendableEvent: function ExtendableEvent() {
    },
    ExtendableMessageEvent: function ExtendableMessageEvent() {
    },
    FetchEvent: function FetchEvent() {
    },
    File: function File() {
    },
    FocusEvent: function FocusEvent() {
    },
    FontFaceSetLoadEvent: function FontFaceSetLoadEvent() {
    },
    ForeignFetchEvent: function ForeignFetchEvent() {
    },
    GamepadEvent: function GamepadEvent() {
    },
    HashChangeEvent: function HashChangeEvent() {
    },
    InstallEvent: function InstallEvent() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    MediaEncryptedEvent: function MediaEncryptedEvent() {
    },
    MediaError: function MediaError() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaQueryListEvent: function MediaQueryListEvent() {
    },
    MediaStreamEvent: function MediaStreamEvent() {
    },
    MediaStreamTrackEvent: function MediaStreamTrackEvent() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MidiConnectionEvent: function MidiConnectionEvent() {
    },
    MidiMessageEvent: function MidiMessageEvent() {
    },
    MouseEvent: function MouseEvent() {
    },
    MutationEvent: function MutationEvent() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    NotificationEvent: function NotificationEvent() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    PageTransitionEvent: function PageTransitionEvent() {
    },
    PaymentRequestEvent: function PaymentRequestEvent() {
    },
    PaymentRequestUpdateEvent: function PaymentRequestUpdateEvent() {
    },
    PointerEvent: function PointerEvent() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    PositionError: function PositionError() {
    },
    PresentationConnectionAvailableEvent: function PresentationConnectionAvailableEvent() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    PromiseRejectionEvent: function PromiseRejectionEvent() {
    },
    PushEvent: function PushEvent() {
    },
    RtcDataChannelEvent: function RtcDataChannelEvent() {
    },
    RtcDtmfToneChangeEvent: function RtcDtmfToneChangeEvent() {
    },
    RtcPeerConnectionIceEvent: function RtcPeerConnectionIceEvent() {
    },
    RtcTrackEvent: function RtcTrackEvent() {
    },
    SecurityPolicyViolationEvent: function SecurityPolicyViolationEvent() {
    },
    SensorErrorEvent: function SensorErrorEvent() {
    },
    SpeechRecognitionError: function SpeechRecognitionError() {
    },
    SpeechRecognitionEvent: function SpeechRecognitionEvent() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    StorageEvent: function StorageEvent() {
    },
    SyncEvent: function SyncEvent() {
    },
    TextEvent: function TextEvent() {
    },
    TouchEvent: function TouchEvent() {
    },
    TrackEvent: function TrackEvent() {
    },
    TransitionEvent: function TransitionEvent() {
    },
    UIEvent: function UIEvent() {
    },
    VRDeviceEvent: function VRDeviceEvent() {
    },
    VRDisplayEvent: function VRDisplayEvent() {
    },
    VRSessionEvent: function VRSessionEvent() {
    },
    WheelEvent: function WheelEvent() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _MojoInterfaceRequestEvent: function _MojoInterfaceRequestEvent() {
    },
    _ResourceProgressEvent: function _ResourceProgressEvent() {
    },
    _USBConnectionEvent: function _USBConnectionEvent() {
    },
    EventStreamProvider: function EventStreamProvider(t0) {
      this.$ti = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  R = {
    ArchiveException$: function(message) {
      return new R.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    InternalExrZipCompressor$: function(header, maxScanLineSize, _numScanLines) {
      return new R.InternalExrZipCompressor(Z.ZLibDecoder$(), _numScanLines, header);
    },
    InternalExrZipCompressor: function InternalExrZipCompressor(t0, t1, t2) {
      var _ = this;
      _.zlib = t0;
      _._exr_zip_compressor$_numScanLines = t1;
      _._outCache = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t2;
    },
    JpegComponent$: function(hSamples, vSamples, quantizationTableList, quantizationIndex) {
      return new R.JpegComponent(hSamples, vSamples, quantizationTableList, quantizationIndex);
    },
    JpegComponent: function JpegComponent(t0, t1, t2, t3) {
      var _ = this;
      _.hSamples = t0;
      _.vSamples = t1;
      _.quantizationTableList = t2;
      _.quantizationIndex = t3;
      _.__JpegComponent_pred = _.__JpegComponent_huffmanTableAC = _.__JpegComponent_huffmanTableDC = _.__JpegComponent_blocks = _.__JpegComponent_blocksPerColumn = _.__JpegComponent_blocksPerLine = null;
    },
    JpegScan$: function(input, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
      var t1 = new R.JpegScan(input, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive);
      t1.JpegScan$8(input, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive);
      return t1;
    },
    JpegScan: function JpegScan(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.input = t0;
      _.frame = t1;
      _.progressive = _.__JpegScan_mcusPerLine = null;
      _.components = t2;
      _.resetInterval = t3;
      _.spectralStart = t4;
      _.spectralEnd = t5;
      _.successivePrev = t6;
      _.successive = t7;
      _.successiveACState = _.eobrun = _.bitsCount = _.bitsData = 0;
      _.__JpegScan_successiveACNextValue = null;
    },
    TgaInfo$: function() {
      return new R.TgaInfo();
    },
    TgaInfo: function TgaInfo() {
      var _ = this;
      _.bpp = _.imageOffset = null;
      _.height = _.width = 0;
    },
    VP8LTransform$: function() {
      return new R.VP8LTransform();
    },
    VP8LTransform__getARGBIndex: function(idx) {
      return C.JSInt_methods._shrOtherPositive$1(idx, 8) & 255;
    },
    VP8LTransform__getAlphaIndex: function(idx) {
      return idx;
    },
    VP8LTransform__getARGBValue: function(val) {
      return val;
    },
    VP8LTransform__getAlphaValue: function(val) {
      return C.JSInt_methods._shrOtherPositive$1(val, 8) & 255;
    },
    VP8LTransform__addPixelsEq: function(pixels, a, b) {
      var pa;
      if (a >>> 0 !== a || a >= pixels.length)
        return H.ioore(pixels, a);
      pa = pixels[a];
      pixels[a] = (((pa & 4278255360) >>> 0) + ((b & 4278255360) >>> 0) & 4278255360 | (pa & 16711935) + (b & 16711935) & 16711935) >>> 0;
    },
    VP8LTransform__average2: function(a0, a1) {
      return ((a0 ^ a1) >>> 1 & 2139062143) + ((a0 & a1) >>> 0);
    },
    VP8LTransform__average3: function(a0, a1, a2) {
      return R.VP8LTransform__average2(R.VP8LTransform__average2(a0, a2), a1);
    },
    VP8LTransform__average4: function(a0, a1, a2, a3) {
      return R.VP8LTransform__average2(R.VP8LTransform__average2(a0, a1), R.VP8LTransform__average2(a2, a3));
    },
    VP8LTransform__clip255: function(a) {
      if (a < 0)
        return 0;
      if (a > 255)
        return 255;
      return a;
    },
    VP8LTransform__addSubtractComponentFull: function(a, b, c) {
      return R.VP8LTransform__clip255(a + b - c);
    },
    VP8LTransform__clampedAddSubtractFull: function(c0, c1, c2) {
      return (R.VP8LTransform__addSubtractComponentFull(C.JSInt_methods._shrOtherPositive$1(c0, 24), C.JSInt_methods._shrOtherPositive$1(c1, 24), C.JSInt_methods._shrOtherPositive$1(c2, 24)) << 24 | R.VP8LTransform__addSubtractComponentFull(C.JSInt_methods._shrOtherPositive$1(c0, 16) & 255, C.JSInt_methods._shrOtherPositive$1(c1, 16) & 255, C.JSInt_methods._shrOtherPositive$1(c2, 16) & 255) << 16 | R.VP8LTransform__addSubtractComponentFull(C.JSInt_methods._shrOtherPositive$1(c0, 8) & 255, C.JSInt_methods._shrOtherPositive$1(c1, 8) & 255, C.JSInt_methods._shrOtherPositive$1(c2, 8) & 255) << 8 | R.VP8LTransform__addSubtractComponentFull(c0 & 255, c1 & 255, c2 & 255)) >>> 0;
    },
    VP8LTransform__addSubtractComponentHalf: function(a, b) {
      return R.VP8LTransform__clip255(a + C.JSInt_methods._tdivFast$1(a - b, 2));
    },
    VP8LTransform__clampedAddSubtractHalf: function(c0, c1, c2) {
      var avg = R.VP8LTransform__average2(c0, c1);
      return (R.VP8LTransform__addSubtractComponentHalf(C.JSInt_methods._shrOtherPositive$1(avg, 24), C.JSInt_methods._shrOtherPositive$1(c2, 24)) << 24 | R.VP8LTransform__addSubtractComponentHalf(C.JSInt_methods._shrOtherPositive$1(avg, 16) & 255, C.JSInt_methods._shrOtherPositive$1(c2, 16) & 255) << 16 | R.VP8LTransform__addSubtractComponentHalf(C.JSInt_methods._shrOtherPositive$1(avg, 8) & 255, C.JSInt_methods._shrOtherPositive$1(c2, 8) & 255) << 8 | R.VP8LTransform__addSubtractComponentHalf(C.JSInt_methods._shrOtherPositive$1(avg, 0) & 255, C.JSInt_methods._shrOtherPositive$1(c2, 0) & 255)) >>> 0;
    },
    VP8LTransform__sub3: function(a, b, c) {
      return Math.abs(b - c) - Math.abs(a - c);
    },
    VP8LTransform__select: function(a, b, c) {
      var t3, t4,
        t1 = R.VP8LTransform__sub3(C.JSInt_methods._shrOtherPositive$1(a, 24), C.JSInt_methods._shrOtherPositive$1(b, 24), C.JSInt_methods._shrOtherPositive$1(c, 24)),
        t2 = R.VP8LTransform__sub3(C.JSInt_methods._shrOtherPositive$1(a, 16) & 255, C.JSInt_methods._shrOtherPositive$1(b, 16) & 255, C.JSInt_methods._shrOtherPositive$1(c, 16) & 255);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = R.VP8LTransform__sub3(C.JSInt_methods._shrOtherPositive$1(a, 8) & 255, C.JSInt_methods._shrOtherPositive$1(b, 8) & 255, C.JSInt_methods._shrOtherPositive$1(c, 8) & 255);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = R.VP8LTransform__sub3(a & 255, b & 255, c & 255);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return t1 + t2 + t3 + t4 <= 0 ? a : b;
    },
    VP8LTransform__predictor0: function(pixels, left, $top) {
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      return 4278190080;
    },
    VP8LTransform__predictor1: function(pixels, left, $top) {
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      return left;
    },
    VP8LTransform__predictor2: function(pixels, left, $top) {
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      if ($top < 0 || $top >= pixels.length)
        return H.ioore(pixels, $top);
      return pixels[$top];
    },
    VP8LTransform__predictor3: function(pixels, left, $top) {
      var t1;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      t1 = H._asInt($top) + 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return pixels[t1];
    },
    VP8LTransform__predictor4: function(pixels, left, $top) {
      var t1;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      t1 = H._asInt($top) - 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return pixels[t1];
    },
    VP8LTransform__predictor5: function(pixels, left, $top) {
      var t1, t2, t3;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top + 1;
      if (t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__average3(left, t2, pixels[t3]);
    },
    VP8LTransform__predictor6: function(pixels, left, $top) {
      var t1;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      t1 = H._asInt($top) - 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return R.VP8LTransform__average2(left, pixels[t1]);
    },
    VP8LTransform__predictor7: function(pixels, left, $top) {
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      if ($top < 0 || $top >= pixels.length)
        return H.ioore(pixels, $top);
      return R.VP8LTransform__average2(left, pixels[$top]);
    },
    VP8LTransform__predictor8: function(pixels, left, $top) {
      var t1, t2;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = $top - 1;
      t2 = pixels.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(pixels, t1);
      t1 = pixels[t1];
      if ($top < 0 || $top >= t2)
        return H.ioore(pixels, $top);
      return R.VP8LTransform__average2(t1, pixels[$top]);
    },
    VP8LTransform__predictor9: function(pixels, left, $top) {
      var t1, t2, t3;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top + 1;
      if (t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__average2(t2, pixels[t3]);
    },
    VP8LTransform__predictor10: function(pixels, left, $top) {
      var t1, t2, t3, t4;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = $top - 1;
      t2 = pixels.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(pixels, t1);
      t1 = pixels[t1];
      if ($top < 0 || $top >= t2)
        return H.ioore(pixels, $top);
      t3 = pixels[$top];
      t4 = $top + 1;
      if (t4 >= t2)
        return H.ioore(pixels, t4);
      return R.VP8LTransform__average4(left, t1, t3, pixels[t4]);
    },
    VP8LTransform__predictor11: function(pixels, left, $top) {
      var t1, t2, t3;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__select(t2, left, pixels[t3]);
    },
    VP8LTransform__predictor12: function(pixels, left, $top) {
      var t1, t2, t3;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__clampedAddSubtractFull(left, t2, pixels[t3]);
    },
    VP8LTransform__predictor13: function(pixels, left, $top) {
      var t1, t2, t3;
      type$.Uint32List._as(pixels);
      H._asInt(left);
      H._asInt($top);
      t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__clampedAddSubtractHalf(left, t2, pixels[t3]);
    },
    _VP8LMultipliers$: function() {
      return new R._VP8LMultipliers(H.NativeUint8List_NativeUint8List(3));
    },
    VP8LTransform: function VP8LTransform() {
      var _ = this;
      _.ysize = _.xsize = _.type = 0;
      _.data = null;
      _.bits = 0;
    },
    _VP8LMultipliers: function _VP8LMultipliers(t0) {
      this.data = t0;
    },
    copyCrop: function(src, x, y, w, h) {
      var t2, dst, sy, yi, sx, xi,
        t1 = src.width;
      if (typeof t1 !== "number")
        return t1.$sub();
      x = J.toInt$0$n(C.JSInt_methods.clamp$2(x, 0, t1 - 1));
      t2 = src.height;
      if (typeof t2 !== "number")
        return t2.$sub();
      y = J.toInt$0$n(C.JSInt_methods.clamp$2(y, 0, t2 - 1));
      if (x + w > t1)
        w = t1 - x;
      if (y + h > t2)
        h = t2 - y;
      dst = U.Image$(w, h, src.channels, src.exif, src.iccProfile);
      for (sy = y, yi = 0; yi < h; ++yi, ++sy)
        for (sx = x, xi = 0; xi < w; ++xi, ++sx)
          dst.setPixel$3(xi, yi, src.getPixel$2(sx, sy));
      return dst;
    }
  },
  T = {
    InputStream$: function(data, byteOrder, $length, start) {
      var t1;
      if (type$.TypedData._is(data)) {
        t1 = J.getInterceptor$x(data);
        t1 = P.Uint8List_Uint8List$view(t1.get$buffer(data), t1.get$offsetInBytes(data), t1.get$lengthInBytes(data));
      } else
        t1 = type$.List_int._is(data) ? data : P.List_List$from(type$.Iterable_dynamic._as(data), type$.int);
      t1 = new T.InputStream(t1, start, start, byteOrder);
      t1.InputStream$4$byteOrder$length$start(data, byteOrder, $length, start);
      return t1;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3) {
      var _ = this;
      _.buffer = t0;
      _.offset = t1;
      _.start = t2;
      _.byteOrder = t3;
      _.__InputStream__length = null;
    },
    getAdler32: function(array) {
      var s1, s2, i, n, i0, t2,
        t1 = J.getInterceptor$asx(array),
        len = t1.get$length(array);
      for (s1 = 1, s2 = 0, i = 0; len > 0;) {
        n = 3800 > len ? len : 3800;
        len -= n;
        for (; --n, n >= 0; i = i0) {
          i0 = i + 1;
          t2 = t1.$index(array, i);
          if (typeof t2 !== "number")
            return t2.$and();
          s1 += t2 & 255;
          s2 += s1;
        }
        s1 = C.JSInt_methods.$mod(s1, 65521);
        s2 = C.JSInt_methods.$mod(s2, 65521);
      }
      return (s2 << 16 | s1) >>> 0;
    }
  },
  Q = {
    OutputStream$: function(size) {
      return new Q.OutputStream(H.NativeUint8List_NativeUint8List(size == null ? 32768 : size));
    },
    OutputStreamBase: function OutputStreamBase() {
    },
    OutputStream: function OutputStream(t0) {
      this._output_stream$_length = 0;
      this._output_stream$_buffer = t0;
    },
    InternalPngInfo$: function() {
      return new Q.InternalPngInfo(H.setRuntimeTypeInfo([], type$.JSArray_PngFrame), H.setRuntimeTypeInfo([], type$.JSArray_int));
    },
    PngInfo: function PngInfo() {
    },
    InternalPngInfo: function InternalPngInfo(t0, t1) {
      var _ = this;
      _.gamma = _.colorLut = _.transparency = _.palette = _.interlaceMethod = _.filterMethod = _.colorType = _.bits = null;
      _.iCCPName = "";
      _.iCCPData = null;
      _.frames = t0;
      _._idat = t1;
      _.height = _.width = 0;
    },
    PsdLayerData_PsdLayerData: function(tag, data) {
      switch (tag) {
        case "lsct":
          return Y.PsdLayerSectionDivider$(tag, data);
        default:
          return K.PsdLayerAdditionalData$(tag, data);
      }
    },
    PsdLayerData: function PsdLayerData() {
    },
    ExrWavelet_decode: function(input, si, nx, ox, ny, oy, mx) {
      var p, p0, a_b, t1, p2, ey, oy1, oy2, ox1, ox2, t2, t3, i11, i10, i01, i00, py, ex, px, p01, p10, p11, t4, _null = null,
        w14 = mx < 16384,
        n = nx > ny ? ny : nx;
      for (p = 1; p <= n;)
        p = p << 1 >>> 0;
      p = p >>> 1;
      p0 = p >>> 1;
      a_b = H.setRuntimeTypeInfo([0, 0], type$.JSArray_int);
      for (t1 = input.length, p2 = p, p = p0; p >= 1; p2 = p, p = p0) {
        ey = si + oy * (ny - p2);
        oy1 = oy * p;
        oy2 = oy * p2;
        ox1 = ox * p;
        ox2 = ox * p2;
        for (t2 = (nx & p) >>> 0 !== 0, t3 = ox * (nx - p2), i11 = _null, i10 = i11, i01 = i10, i00 = i01, py = si; py <= ey; py += oy2) {
          ex = py + t3;
          for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            p10 = px + oy1;
            p11 = p10 + ox1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec14(t4, input[p10], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              i10 = a_b[1];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              t4 = input[p01];
              if (p11 < 0 || p11 >= t1)
                return H.ioore(input, p11);
              Q.ExrWavelet_wdec14(t4, input[p11], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i01 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              i11 = a_b[1];
              Q.ExrWavelet_wdec14(i00, i01, a_b);
              if (0 >= a_b.length)
                return H.ioore(a_b, 0);
              C.NativeUint16List_methods.$indexSet(input, px, a_b[0]);
              if (1 >= a_b.length)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p01, a_b[1]);
              Q.ExrWavelet_wdec14(i10, i11, a_b);
              if (0 >= a_b.length)
                return H.ioore(a_b, 0);
              C.NativeUint16List_methods.$indexSet(input, p10, a_b[0]);
              if (1 >= a_b.length)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p11, a_b[1]);
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec16(t4, input[p10], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              i10 = a_b[1];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              t4 = input[p01];
              if (p11 < 0 || p11 >= t1)
                return H.ioore(input, p11);
              Q.ExrWavelet_wdec16(t4, input[p11], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i01 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              i11 = a_b[1];
              Q.ExrWavelet_wdec16(i00, i01, a_b);
              if (0 >= a_b.length)
                return H.ioore(a_b, 0);
              C.NativeUint16List_methods.$indexSet(input, px, a_b[0]);
              if (1 >= a_b.length)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p01, a_b[1]);
              Q.ExrWavelet_wdec16(i10, i11, a_b);
              if (0 >= a_b.length)
                return H.ioore(a_b, 0);
              C.NativeUint16List_methods.$indexSet(input, p10, a_b[0]);
              if (1 >= a_b.length)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p11, a_b[1]);
            }
          }
          if (t2) {
            p10 = px + oy1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec14(t4, input[p10], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p10, a_b[1]);
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec16(t4, input[p10], a_b);
              t4 = a_b.length;
              if (0 >= t4)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t4)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p10, a_b[1]);
            }
            if (px < 0 || px >= t1)
              return H.ioore(input, px);
            input[px] = i00;
          }
        }
        if ((ny & p) >>> 0 !== 0) {
          ex = py + t3;
          for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t2 = input[px];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              Q.ExrWavelet_wdec14(t2, input[p01], a_b);
              t2 = a_b.length;
              if (0 >= t2)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t2)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p01, a_b[1]);
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t2 = input[px];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              Q.ExrWavelet_wdec16(t2, input[p01], a_b);
              t2 = a_b.length;
              if (0 >= t2)
                return H.ioore(a_b, 0);
              i00 = a_b[0];
              if (1 >= t2)
                return H.ioore(a_b, 1);
              C.NativeUint16List_methods.$indexSet(input, p01, a_b[1]);
            }
            if (px < 0 || px >= t1)
              return H.ioore(input, px);
            input[px] = i00;
          }
        }
        p0 = p >>> 1;
      }
    },
    ExrWavelet_wdec14: function(l, h, a_b) {
      var ls = Z.uint16ToInt16(l),
        hs = Z.uint16ToInt16(h),
        ai = ls + (hs & 1) + C.JSInt_methods._shrOtherPositive$1(hs, 1),
        t1 = J.getInterceptor$ax(a_b);
      t1.$indexSet(a_b, 0, ai);
      t1.$indexSet(a_b, 1, ai - hs);
    },
    ExrWavelet_wdec16: function(l, h, a_b) {
      var bb = l - C.JSInt_methods._shrOtherPositive$1(h, 1) & 65535,
        t1 = J.getInterceptor$ax(a_b);
      t1.$indexSet(a_b, 1, bb);
      t1.$indexSet(a_b, 0, h + bb - 32768 & 65535);
    },
    Half_HalfToDouble: function(bits) {
      var t1;
      if ($.Half__toFloatFloat32 == null)
        Q.Half__initialize();
      t1 = $.Half__toFloatFloat32;
      t1.toString;
      return J.$index$asx(t1, bits);
    },
    Half_DoubleToHalf: function(n) {
      var f, x_i, t1, e, m;
      if ($.Half__toFloatFloat32 == null)
        Q.Half__initialize();
      f = C.JSNumber_methods.toDouble$0(n);
      x_i = Z.float32ToUint32(f);
      if (f === 0)
        return C.JSInt_methods._shrOtherPositive$1(x_i, 16);
      t1 = C.JSInt_methods._shrOtherPositive$1(x_i, 23);
      e = J.$index$asx(Q.Half__eLut0(), t1 & 511);
      if (e !== 0) {
        m = x_i & 8388607;
        return e + (m + 4095 + (m >>> 13 & 1) >>> 13);
      }
      return Q.Half__convert(x_i);
    },
    Half__convert: function(i) {
      var t, t1,
        s = C.JSInt_methods._shrOtherPositive$1(i, 16) & 32768,
        e = (C.JSInt_methods._shrOtherPositive$1(i, 23) & 255) - 112,
        m = i & 8388607;
      if (e <= 0) {
        if (e < -10)
          return s;
        m |= 8388608;
        t = 14 - e;
        return (s | C.JSInt_methods.$shr(m + (C.JSInt_methods.$shl(1, t - 1) - 1) + (C.JSInt_methods._shrReceiverPositive$1(m, t) & 1), t)) >>> 0;
      } else if (e === 143)
        if (m === 0)
          return s | 31744;
        else {
          m = m >>> 13;
          t1 = m === 0 ? 1 : 0;
          return (s | m | t1 | 31744) >>> 0;
        }
      else {
        m = m + 4095 + (m >>> 13 & 1);
        if ((m & 8388608) !== 0) {
          ++e;
          m = 0;
        }
        if (e > 30)
          return s | 31744;
        return (s | e << 10 | m >>> 13) >>> 0;
      }
    },
    Half__initialize: function() {
      var t1, i, e, t2;
      if ($.Half__toFloatUint32 != null)
        return;
      t1 = H.NativeUint32List_NativeUint32List(65536);
      $.Half__toFloatUint32 = t1;
      t1.toString;
      $.Half__toFloatFloat32 = P.Float32List_Float32List$view(C.NativeUint32List_methods.get$buffer(t1));
      Q.Half__eLut(H.NativeUint16List_NativeUint16List(512));
      for (i = 0; i < 256; ++i) {
        e = (i & 255) - 112;
        t1 = e <= 0 || e >= 30;
        t2 = (i | 256) >>> 0;
        if (t1) {
          J.$indexSet$ax(Q.Half__eLut0(), i, 0);
          J.$indexSet$ax(Q.Half__eLut0(), t2, 0);
        } else {
          t1 = e << 10 >>> 0;
          J.$indexSet$ax(Q.Half__eLut0(), i, t1);
          J.$indexSet$ax(Q.Half__eLut0(), t2, (t1 | 32768) >>> 0);
        }
      }
      for (i = 0; i < 65536; ++i) {
        t1 = $.Half__toFloatUint32;
        t1.toString;
        J.$indexSet$ax(t1, i, Q.Half__halfToFloat(i));
      }
    },
    Half__halfToFloat: function(y) {
      var t1,
        s = C.JSInt_methods._shrOtherPositive$1(y, 15) & 1,
        e = C.JSInt_methods._shrOtherPositive$1(y, 10) & 31,
        m = y & 1023;
      if (e === 0)
        if (m === 0)
          return s << 31 >>> 0;
        else {
          for (; (m & 1024) === 0;) {
            m = m << 1;
            --e;
          }
          ++e;
          m &= 4294966271;
        }
      else if (e === 31) {
        t1 = s << 31;
        if (m === 0)
          return (t1 | 2139095040) >>> 0;
        else
          return (t1 | m << 13 | 2139095040) >>> 0;
      }
      return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
    },
    Half__eLut: function(t1) {
      $.Half____eLut = t1;
    },
    Half__eLut0: function() {
      var t1 = $.Half____eLut;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_eLut")) : t1;
    }
  },
  G = {_ZLibDecoder: function _ZLibDecoder() {
    },
    ExifData$: function() {
      return new G.ExifData(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.dynamic));
    },
    ExifData$from: function(other) {
      var t1 = type$.int,
        t2 = type$.dynamic;
      t1 = new G.ExifData(other == null ? P.LinkedHashMap_LinkedHashMap$_empty(t1, t2) : P.LinkedHashMap_LinkedHashMap$from(other.data, t1, t2));
      t1.ExifData$from$1(other);
      return t1;
    },
    ExifData: function ExifData(t0) {
      this.rawData = null;
      this.data = t0;
    },
    InternalExrPizCompressor$: function(header, _maxScanLineSize, _numScanLines) {
      var t1 = new G.InternalExrPizCompressor(_maxScanLineSize, _numScanLines, header);
      t1.InternalExrPizCompressor$3(header, _maxScanLineSize, _numScanLines);
      return t1;
    },
    _PizChannelData$: function() {
      return new G._PizChannelData();
    },
    InternalExrPizCompressor: function InternalExrPizCompressor(t0, t1, t2) {
      var _ = this;
      _._exr_piz_compressor$_output = null;
      _._exr_piz_compressor$_maxScanLineSize = t0;
      _._exr_piz_compressor$_numScanLines = t1;
      _._tmpBuffer = _.__InternalExrPizCompressor__channelData = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t2;
    },
    _PizChannelData: function _PizChannelData() {
      var _ = this;
      _.___PizChannelData_size = _.___PizChannelData_ys = _.___PizChannelData_ny = _.___PizChannelData_nx = _.___PizChannelData_end = _.___PizChannelData_start = null;
    },
    PngDecoder$: function() {
      return new G.PngDecoder();
    },
    PngDecoder: function PngDecoder() {
      var _ = this;
      _._png_decoder$_info = null;
      _._png_decoder$_bitBufferLen = _._png_decoder$_bitBuffer = 0;
      _.__PngDecoder__input = null;
      _._progressY = 0;
    },
    PngDecoder_decodeFrame_closure: function PngDecoder_decodeFrame_closure() {
    },
    PngDecoder__getColor__g_set: function PngDecoder__getColor__g_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get: function PngDecoder__getColor__g_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_set: function PngDecoder__getColor__b_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set0: function PngDecoder__getColor__g_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_set: function PngDecoder__getColor__r_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_get: function PngDecoder__getColor__r_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get0: function PngDecoder__getColor__g_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_get: function PngDecoder__getColor__b_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_set: function PngDecoder__getColor__a_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set1: function PngDecoder__getColor__g_set1(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get1: function PngDecoder__getColor__g_get1(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_get: function PngDecoder__getColor__a_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_set0: function PngDecoder__getColor__a_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_set0: function PngDecoder__getColor__b_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set2: function PngDecoder__getColor__g_set2(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_set0: function PngDecoder__getColor__r_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_get0: function PngDecoder__getColor__r_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get2: function PngDecoder__getColor__g_get2(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_get0: function PngDecoder__getColor__b_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_get0: function PngDecoder__getColor__a_get0(t0) {
      this._box_0 = t0;
    },
    TiffEntry$: function(tag, type, numValues, p) {
      return new G.TiffEntry(tag, type, numValues, p);
    },
    TiffEntry: function TiffEntry(t0, t1, t2, t3) {
      var _ = this;
      _.tag = t0;
      _.type = t1;
      _.numValues = t2;
      _.valueOffset = null;
      _.p = t3;
    },
    LzwDecoder$: function() {
      return new G.LzwDecoder(H.NativeUint8List_NativeUint8List(4096));
    },
    LzwDecoder: function LzwDecoder(t0) {
      var _ = this;
      _._bitsToGet = 9;
      _._nextBits = _._nextData = _._bytePointer = 0;
      _.__LzwDecoder__outPointer = _.__LzwDecoder__out = _.__LzwDecoder__dataLength = _.__LzwDecoder__data = null;
      _._tiff_lzw_decoder$_buffer = t0;
      _.__LzwDecoder__bufferLength = _._tableIndex = _.__LzwDecoder__prefix = _.__LzwDecoder__table = null;
    },
    OutputBuffer$: function(bigEndian, size) {
      return new G.OutputBuffer(bigEndian, H.NativeUint8List_NativeUint8List(size == null ? 8192 : size));
    },
    OutputBuffer: function OutputBuffer(t0, t1) {
      this.length = 0;
      this.bigEndian = t0;
      this._buffer = t1;
    }
  },
  Y = {
    HuffmanTable$: function(lengths) {
      var t1 = new Y.HuffmanTable();
      t1.HuffmanTable$1(lengths);
      return t1;
    },
    HuffmanTable: function HuffmanTable() {
      this.__HuffmanTable_table = null;
      this.maxCodeLength = 0;
      this.minCodeLength = 2147483647;
    },
    main: function() {
      J.get$onMessage$x(self.self).listen$1(new Y.main_closure());
    },
    CropData: function CropData() {
    },
    main_closure: function main_closure() {
    },
    ExrHuffman_uncompress: function(compressed, nCompressed, raw, nRaw) {
      var start, im, iM, nBits, freq, hdec, _i, t1;
      if (nCompressed === 0) {
        if (nRaw !== 0)
          throw H.wrapException(K.ImageException$("Incomplete huffman data"));
        return;
      }
      start = compressed.offset;
      im = compressed.readUint32$0();
      iM = compressed.readUint32$0();
      compressed.skip$1(0, 4);
      nBits = compressed.readUint32$0();
      if (im < 0 || im >= 65537 || iM < 0 || iM >= 65537)
        throw H.wrapException(K.ImageException$("Invalid huffman table size"));
      compressed.skip$1(0, 4);
      freq = P.List_List$filled(65537, 0, false, type$.int);
      hdec = J.JSArray_JSArray$allocateFixed(16384, type$.ExrHufDec);
      for (_i = 0; _i < 16384; ++_i)
        C.JSArray_methods.$indexSet(hdec, _i, Y.ExrHufDec$());
      Y.ExrHuffman_unpackEncTable(compressed, nCompressed - 20, im, iM, freq);
      t1 = compressed.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (nBits > 8 * (nCompressed - (t1 - start)))
        throw H.wrapException(K.ImageException$("Error in header for Huffman-encoded data (invalid number of bits)."));
      Y.ExrHuffman_buildDecTable(freq, im, iM, hdec);
      Y.ExrHuffman_decode(freq, hdec, compressed, nBits, iM, nRaw, raw);
    },
    ExrHuffman_decode: function(hcode, hdecod, input, ni, rlc, no, out) {
      var ie, oi, t3, t4, pl, j, l, t5, oi0, i,
        _s45_ = "Error in Huffman-encoded data (invalid code).",
        c_lc = H.setRuntimeTypeInfo([0, 0], type$.JSArray_int),
        t1 = input.offset,
        t2 = C.JSInt_methods._tdivFast$1(ni + 7, 8);
      if (typeof t1 !== "number")
        return t1.$add();
      ie = t1 + t2;
      t1 = J.getInterceptor$asx(hcode);
      t2 = J.getInterceptor$asx(hdecod);
      oi = 0;
      while (true) {
        t3 = input.offset;
        if (typeof t3 !== "number")
          return t3.$lt();
        if (!(t3 < ie))
          break;
        Y.ExrHuffman_getChar(c_lc, input);
        while (true) {
          if (1 >= c_lc.length)
            return H.ioore(c_lc, 1);
          t3 = c_lc[1];
          if (typeof t3 !== "number")
            return t3.$ge();
          if (!(t3 >= 14))
            break;
          t4 = c_lc[0];
          if (typeof t4 !== "number")
            return t4.$shr();
          pl = t2.$index(hdecod, C.JSNumber_methods.$shr(t4, t3 - 14) & 16383);
          if (!H.boolConversionCheck(J.$eq$(pl.len, 0))) {
            if (1 >= c_lc.length)
              return H.ioore(c_lc, 1);
            t3 = c_lc[1];
            t4 = pl.len;
            if (typeof t3 !== "number")
              return t3.$sub();
            if (typeof t4 !== "number")
              return H.iae(t4);
            C.JSArray_methods.$indexSet(c_lc, 1, t3 - t4);
            oi = Y.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
          } else {
            if (pl.p == null)
              throw H.wrapException(K.ImageException$(_s45_));
            j = 0;
            while (true) {
              t3 = pl.lit;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(j < t3))
                break;
              t3 = pl.p;
              t3.toString;
              l = Y.ExrHuffman_hufLength(t1.$index(hcode, J.$index$asx(t3, j)));
              while (true) {
                if (1 >= c_lc.length)
                  return H.ioore(c_lc, 1);
                t3 = c_lc[1];
                if (typeof t3 !== "number")
                  return t3.$lt();
                if (t3 < l) {
                  t4 = input.offset;
                  if (typeof t4 !== "number")
                    return t4.$lt();
                  t4 = t4 < ie;
                } else
                  t4 = false;
                if (!t4)
                  break;
                Y.ExrHuffman_getChar(c_lc, input);
              }
              if (t3 >= l) {
                t3 = pl.p;
                t3.toString;
                t3 = Y.ExrHuffman_hufCode(t1.$index(hcode, J.$index$asx(t3, j)));
                t4 = c_lc.length;
                if (0 >= t4)
                  return H.ioore(c_lc, 0);
                t5 = c_lc[0];
                if (1 >= t4)
                  return H.ioore(c_lc, 1);
                t4 = c_lc[1];
                if (typeof t4 !== "number")
                  return t4.$sub();
                if (typeof t5 !== "number")
                  return t5.$shr();
                if (H.boolConversionCheck(J.$eq$(t3, (C.JSNumber_methods.$shr(t5, t4 - l) & C.JSInt_methods.$shl(1, l) - 1) >>> 0))) {
                  if (1 >= c_lc.length)
                    return H.ioore(c_lc, 1);
                  t3 = c_lc[1];
                  if (typeof t3 !== "number")
                    return t3.$sub();
                  C.JSArray_methods.$indexSet(c_lc, 1, t3 - l);
                  t3 = pl.p;
                  t3.toString;
                  oi0 = Y.ExrHuffman_getCode(J.$index$asx(t3, j), rlc, c_lc, input, out, oi, no);
                  oi = oi0;
                  break;
                }
              }
              ++j;
            }
            if (j === pl.lit)
              throw H.wrapException(K.ImageException$(_s45_));
          }
        }
      }
      i = 8 - ni & 7;
      if (0 >= c_lc.length)
        return H.ioore(c_lc, 0);
      t1 = c_lc[0];
      if (typeof t1 !== "number")
        return t1.$shr();
      C.JSArray_methods.$indexSet(c_lc, 0, C.JSNumber_methods._shrOtherPositive$1(t1, i));
      if (1 >= c_lc.length)
        return H.ioore(c_lc, 1);
      t1 = c_lc[1];
      if (typeof t1 !== "number")
        return t1.$sub();
      C.JSArray_methods.$indexSet(c_lc, 1, t1 - i);
      while (true) {
        if (1 >= c_lc.length)
          return H.ioore(c_lc, 1);
        t1 = c_lc[1];
        if (typeof t1 !== "number")
          return t1.$gt();
        if (!(t1 > 0))
          break;
        t3 = c_lc[0];
        if (typeof t3 !== "number")
          return t3.$shl();
        pl = t2.$index(hdecod, C.JSNumber_methods.$shl(t3, 14 - t1) & 16383);
        if (!H.boolConversionCheck(J.$eq$(pl.len, 0))) {
          if (1 >= c_lc.length)
            return H.ioore(c_lc, 1);
          t1 = c_lc[1];
          t3 = pl.len;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          C.JSArray_methods.$indexSet(c_lc, 1, t1 - t3);
          oi = Y.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
        } else
          throw H.wrapException(K.ImageException$(_s45_));
      }
      if (oi !== no)
        throw H.wrapException(K.ImageException$("Error in Huffman-encoded data (decoded data are shorter than expected)."));
    },
    ExrHuffman_getCode: function(po, rlc, c_lc, input, out, oi, oe) {
      var t1, t2, cs, s, cs0, oi0,
        _s70_ = "Error in Huffman-encoded data (decoded data are longer than expected).";
      if (po === rlc) {
        t1 = J.getInterceptor$asx(c_lc);
        t2 = t1.$index(c_lc, 1);
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 8)
          Y.ExrHuffman_getChar(c_lc, input);
        t2 = t1.$index(c_lc, 1);
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.$indexSet(c_lc, 1, t2 - 8);
        t2 = t1.$index(c_lc, 0);
        t1 = t1.$index(c_lc, 1);
        if (typeof t2 !== "number")
          return t2.$shr();
        if (typeof t1 !== "number")
          return H.iae(t1);
        cs = C.JSNumber_methods.$shr(t2, t1) & 255;
        if (oi + cs > oe)
          throw H.wrapException(K.ImageException$(_s70_));
        t1 = oi - 1;
        t2 = out.length;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(out, t1);
        s = out[t1];
        for (; cs0 = cs - 1, cs > 0; cs = cs0, oi = oi0) {
          oi0 = oi + 1;
          if (oi < 0 || oi >= t2)
            return H.ioore(out, oi);
          out[oi] = s;
        }
      } else {
        if (oi < oe) {
          oi0 = oi + 1;
          if (oi >>> 0 !== oi || oi >= out.length)
            return H.ioore(out, oi);
          out[oi] = po;
        } else
          throw H.wrapException(K.ImageException$(_s70_));
        oi = oi0;
      }
      return oi;
    },
    ExrHuffman_buildDecTable: function(hcode, im, iM, hdecod) {
      var t1, t2, t3, t4, c, l, pl, t5, i, t6, pi,
        _s57_ = "Error in Huffman-encoded data (invalid code table entry).";
      for (t1 = J.getInterceptor$asx(hcode), t2 = J.getInterceptor$asx(hdecod), t3 = type$.JSArray_int, t4 = type$.int; im <= iM; ++im) {
        c = Y.ExrHuffman_hufCode(t1.$index(hcode, im));
        l = Y.ExrHuffman_hufLength(t1.$index(hcode, im));
        if (C.JSInt_methods.$shr(c, l) !== 0)
          throw H.wrapException(K.ImageException$(_s57_));
        if (l > 14) {
          pl = t2.$index(hdecod, C.JSInt_methods.$shr(c, l - 14));
          if (!H.boolConversionCheck(J.$eq$(pl.len, 0)))
            throw H.wrapException(K.ImageException$(_s57_));
          t5 = pl.lit;
          if (typeof t5 !== "number")
            return t5.$add();
          pl.set$lit(t5 + 1);
          t5 = pl.p;
          if (t5 != null) {
            pl.set$p(P.List_List$filled(pl.lit, 0, false, t4));
            i = 0;
            while (true) {
              t6 = pl.lit;
              if (typeof t6 !== "number")
                return t6.$sub();
              if (!(i < t6 - 1))
                break;
              t6 = pl.p;
              t6.toString;
              J.$indexSet$ax(t6, i, J.$index$asx(t5, i));
              ++i;
            }
          } else
            pl.set$p(H.setRuntimeTypeInfo([0], t3));
          t5 = pl.p;
          t5.toString;
          t6 = pl.lit;
          if (typeof t6 !== "number")
            return t6.$sub();
          J.$indexSet$ax(t5, t6 - 1, im);
        } else if (l !== 0) {
          t5 = 14 - l;
          pi = C.JSInt_methods.$shl(c, t5);
          t2.$index(hdecod, pi);
          for (i = C.JSInt_methods.$shl(1, t5); i > 0; --i, ++pi) {
            pl = t2.$index(hdecod, pi);
            if (!H.boolConversionCheck(J.$eq$(pl.len, 0)) || pl.p != null)
              throw H.wrapException(K.ImageException$(_s57_));
            pl.len = l;
            pl.lit = im;
          }
        }
      }
    },
    ExrHuffman_unpackEncTable: function(p, ni, im, iM, hcode) {
      var t1, t2, t3, l, zerun, zerun0, im0,
        _s66_ = "Error in Huffman-encoded data (unexpected end of code table data).",
        _s67_ = "Error in Huffman-encoded data (code table is longer than expected).",
        pcode = p.offset,
        c_lc = H.setRuntimeTypeInfo([0, 0], type$.JSArray_int);
      for (t1 = J.getInterceptor$ax(hcode), t2 = iM + 1; im <= iM; ++im) {
        t3 = p.offset;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (t3 - pcode > ni)
          throw H.wrapException(K.ImageException$(_s66_));
        l = Y.ExrHuffman_getBits(6, c_lc, p);
        t1.$indexSet(hcode, im, l);
        if (l === 63) {
          t3 = p.offset;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (t3 - pcode > ni)
            throw H.wrapException(K.ImageException$(_s66_));
          t3 = Y.ExrHuffman_getBits(8, c_lc, p);
          if (typeof t3 !== "number")
            return t3.$add();
          zerun = t3 + 6;
          if (im + zerun > t2)
            throw H.wrapException(K.ImageException$(_s67_));
          for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            t1.$indexSet(hcode, im, 0);
          }
          --im;
        } else if (l >= 59) {
          zerun = l - 59 + 2;
          if (im + zerun > t2)
            throw H.wrapException(K.ImageException$(_s67_));
          for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            t1.$indexSet(hcode, im, 0);
          }
          --im;
        }
      }
      Y.ExrHuffman_canonicalCodeTable(hcode);
    },
    ExrHuffman_hufLength: function(code) {
      return code & 63;
    },
    ExrHuffman_hufCode: function(code) {
      return C.JSInt_methods._shrOtherPositive$1(code, 6);
    },
    ExrHuffman_canonicalCodeTable: function(hcode) {
      var t1, t2, i, t3, t4, c, nc, l,
        n = P.List_List$filled(59, 0, false, type$.int);
      for (t1 = J.getInterceptor$asx(hcode), t2 = J.getInterceptor$asx(n), i = 0; i < 65537; ++i) {
        t3 = t1.$index(hcode, i);
        t4 = t2.$index(n, t3);
        if (typeof t4 !== "number")
          return t4.$add();
        t2.$indexSet(n, t3, t4 + 1);
      }
      for (c = 0, i = 58; i > 0; --i, c = nc) {
        t3 = t2.$index(n, i);
        if (typeof t3 !== "number")
          return H.iae(t3);
        nc = C.JSNumber_methods._shrOtherPositive$1(c + t3, 1);
        t2.$indexSet(n, i, c);
      }
      for (i = 0; i < 65537; ++i) {
        l = t1.$index(hcode, i);
        if (l > 0) {
          t3 = t2.$index(n, l);
          if (typeof t3 !== "number")
            return t3.$add();
          t2.$indexSet(n, l, t3 + 1);
          t1.$indexSet(hcode, i, (l | t3 << 6) >>> 0);
        }
      }
    },
    ExrHuffman_getChar: function(c_lc, input) {
      var t3,
        t1 = J.getInterceptor$asx(c_lc),
        t2 = t1.$index(c_lc, 0);
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = input.readByte$0();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.$indexSet(c_lc, 0, ((t2 << 8 | t3) & -1) >>> 0);
      t3 = t1.$index(c_lc, 1);
      if (typeof t3 !== "number")
        return t3.$add();
      t1.$indexSet(c_lc, 1, (t3 + 8 & -1) >>> 0);
    },
    ExrHuffman_getBits: function(nBits, c_lc, input) {
      var t2, t3,
        t1 = J.getInterceptor$asx(c_lc);
      while (true) {
        t2 = t1.$index(c_lc, 1);
        if (typeof t2 !== "number")
          return t2.$lt();
        if (!(t2 < nBits))
          break;
        t2 = t1.$index(c_lc, 0);
        if (typeof t2 !== "number")
          return t2.$shl();
        t3 = input.readByte$0();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1.$indexSet(c_lc, 0, ((t2 << 8 | t3) & -1) >>> 0);
        t3 = t1.$index(c_lc, 1);
        if (typeof t3 !== "number")
          return t3.$add();
        t1.$indexSet(c_lc, 1, (t3 + 8 & -1) >>> 0);
      }
      t2 = t1.$index(c_lc, 1);
      if (typeof t2 !== "number")
        return t2.$sub();
      t1.$indexSet(c_lc, 1, t2 - nBits);
      t2 = t1.$index(c_lc, 0);
      t1 = t1.$index(c_lc, 1);
      if (typeof t2 !== "number")
        return t2.$shr();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (C.JSNumber_methods.$shr(t2, t1) & C.JSInt_methods.$shl(1, nBits) - 1) >>> 0;
    },
    ExrHufDec$: function() {
      return new Y.ExrHufDec();
    },
    ExrHufDec: function ExrHufDec() {
      this.lit = this.len = 0;
      this.p = null;
    },
    ExrImage$: function(bytes) {
      var t1 = new Y.ExrImage(H.setRuntimeTypeInfo([], type$.JSArray_InternalExrPart));
      t1.ExrImage$1(bytes);
      return t1;
    },
    ExrImage_isValidFile: function(bytes) {
      var input = Z.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        return false;
      if (input.readByte$0() !== 2)
        return false;
      if (!H.boolConversionCheck(Y.ExrImage__supportsFlags(input.readUint24$0())))
        return false;
      return true;
    },
    ExrImage__supportsFlags: function(flags) {
      return (flags & 4294967289) >>> 0 === 0;
    },
    ExrImage: function ExrImage(t0) {
      var _ = this;
      _._parts = t0;
      _.__ExrImage_flags = _.version = null;
      _.height = _.width = 0;
    },
    InternalExrRleCompressor$: function(header, maxScanLineSize) {
      return new Y.InternalExrRleCompressor(header);
    },
    InternalExrRleCompressor: function InternalExrRleCompressor(t0) {
      var _ = this;
      _._exr_rle_compressor$_outCache = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t0;
    },
    JpegData$: function() {
      var t1 = type$.JSArray_nullable_List_dynamic;
      return new Y.JpegData(G.ExifData$(), P.List_List$filled(4, null, false, type$.nullable_Int16List), H.setRuntimeTypeInfo([], type$.JSArray_nullable_JpegFrame), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], type$.JSArray_ComponentData));
    },
    _JpegHuffman$: function() {
      return new Y._JpegHuffman([]);
    },
    JpegData: function JpegData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.resetInterval = _.frame = _.adobe = _.__JpegData_jfif = _.__JpegData_input = null;
      _.exif = t0;
      _.quantizationTables = t1;
      _.frames = t2;
      _.huffmanTablesAC = t3;
      _.huffmanTablesDC = t4;
      _.components = t5;
    },
    JpegData__readSOS_closure: function JpegData__readSOS_closure(t0, t1) {
      this.$this = t0;
      this.block = t1;
    },
    _JpegHuffman: function _JpegHuffman(t0) {
      this.children = t0;
      this.index = 0;
    },
    PsdLayerSectionDivider$: function(tag, data) {
      var t1 = new Y.PsdLayerSectionDivider();
      t1.PsdLayerSectionDivider$2(tag, data);
      return t1;
    },
    PsdLayerSectionDivider: function PsdLayerSectionDivider() {
    },
    VP8LColorCache$: function(hashBits) {
      return new Y.VP8LColorCache(H.NativeUint32List_NativeUint32List(C.JSInt_methods.$shl(1, hashBits)), 32 - hashBits);
    },
    VP8LColorCache: function VP8LColorCache(t0, t1) {
      this.colors = t0;
      this.hashShift = t1;
    }
  },
  S = {
    Inflate$: function(bytes) {
      var t1 = Y.HuffmanTable$(C.List_2Bc),
        t2 = Y.HuffmanTable$(C.List_X3d);
      t2 = new S.Inflate(T.InputStream$(bytes, 0, null, 0), Q.OutputStream$(null), t1, t2);
      t2.Inflate$2(bytes, null);
      return t2;
    },
    Inflate$buffer: function(input) {
      var t1 = Y.HuffmanTable$(C.List_2Bc),
        t2 = Y.HuffmanTable$(C.List_X3d);
      t2 = new S.Inflate(input, Q.OutputStream$(null), t1, t2);
      t2.Inflate$buffer$2(input, null);
      return t2;
    },
    Inflate: function Inflate(t0, t1, t2, t3) {
      var _ = this;
      _.__Inflate_input = t0;
      _.inputSet = false;
      _.output = t1;
      _._bitBufferLen = _._bitBuffer = 0;
      _._fixedLiteralLengthTable = t2;
      _._fixedDistanceTable = t3;
    },
    InternalExrPart$: function(tiled, input) {
      var t1 = new S.InternalExrPart(F.HdrImage$(), H.setRuntimeTypeInfo([], type$.JSArray_ExrChannel), P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ExrAttribute), tiled);
      t1.ExrPart$2(tiled, input, {});
      return t1;
    },
    ExrPart: function ExrPart() {
    },
    ExrPart_closure: function ExrPart_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    InternalExrPart: function InternalExrPart(t0, t1, t2, t3) {
      var _ = this;
      _.framebuffer = t0;
      _.channels = t1;
      _.attributes = t2;
      _.__ExrPart_chromaticities = _.height = _.width = _.__ExrPart_dataWindow = null;
      _._compressionType = 0;
      _._offsetInLineBuffer = _._linesInBuffer = _._compressor = _.__ExrPart__bytesPerLine = _._offsets = null;
      _._tiled = t3;
      _._maxBytesPerTileLine = _.__ExrPart__bytesPerPixel = _._numYLevels = _._numXLevels = _._numYTiles = _._numXTiles = _._tileRoundingMode = _._tileLevelMode = _._tileHeight = _._tileWidth = null;
    },
    JpegJfif$: function() {
      return new S.JpegJfif();
    },
    JpegJfif: function JpegJfif() {
      this.__JpegJfif_thumbHeight = this.__JpegJfif_thumbWidth = null;
    },
    PsdImageResource$: function(id, $name, data) {
      return new S.PsdImageResource();
    },
    PsdImageResource: function PsdImageResource() {
    },
    PsdLayer$: function(input) {
      var t1 = new S.PsdLayer(P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.PsdLayerData), H.setRuntimeTypeInfo([], type$.JSArray_PsdLayer), H.setRuntimeTypeInfo([], type$.JSArray_PsdEffect));
      t1.PsdLayer$1(input);
      return t1;
    },
    PsdLayer: function PsdLayer(t0, t1, t2) {
      var _ = this;
      _.__PsdLayer_channels = _.__PsdLayer_flags = _.__PsdLayer_opacity = _.blendMode = _.__PsdLayer_height = _.__PsdLayer_width = _.__PsdLayer_right = _.__PsdLayer_bottom = _.left = _.top = null;
      _.additionalData = t0;
      _.children = t1;
      _.__PsdLayer_layerImage = null;
      _.effects = t2;
    },
    VP8L$: function(input, webp) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_HTreeGroup),
        t2 = H.setRuntimeTypeInfo([], type$.JSArray_VP8LTransform);
      return new S.VP8L(A.VP8LBitReader$(input), webp, t1, t2);
    },
    VP8L__subSampleSize: function(size, samplingBits) {
      return C.JSInt_methods.$shr(size + C.JSInt_methods.$shl(1, samplingBits) - 1, samplingBits);
    },
    InternalVP8L$: function(input, webp) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_HTreeGroup),
        t2 = H.setRuntimeTypeInfo([], type$.JSArray_VP8LTransform);
      return new S.InternalVP8L(A.VP8LBitReader$(input), webp, t1, t2);
    },
    InternalVP8L_subSampleSize: function(size, samplingBits) {
      return S.VP8L__subSampleSize(size, samplingBits);
    },
    VP8L: function VP8L(t0, t1, t2, t3) {
      var _ = this;
      _.br = t0;
      _.webp = t1;
      _.image = null;
      _._colorCacheSize = _._lastRow = _._lastPixel = 0;
      _._colorCache = null;
      _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
      _._huffmanImage = null;
      _._numHtreeGroups = 0;
      _._htreeGroups = t2;
      _._transforms = t3;
      _._transformsSeen = 0;
      _._ioWidth = _._opaque = _._argbCache = _.__VP8L__pixels8 = _._pixels = null;
    },
    InternalVP8L: function InternalVP8L(t0, t1, t2, t3) {
      var _ = this;
      _.br = t0;
      _.webp = t1;
      _.image = null;
      _._colorCacheSize = _._lastRow = _._lastPixel = 0;
      _._colorCache = null;
      _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
      _._huffmanImage = null;
      _._numHtreeGroups = 0;
      _._htreeGroups = t2;
      _._transforms = t3;
      _._transformsSeen = 0;
      _._ioWidth = _._opaque = _._argbCache = _.__VP8L__pixels8 = _._pixels = null;
    },
    WebPAlpha$: function(input, width, height) {
      var t1 = new S.WebPAlpha(input, width, height);
      t1.WebPAlpha$3(input, width, height);
      return t1;
    },
    WebPAlpha: function WebPAlpha(t0, t1, t2) {
      var _ = this;
      _.input = t0;
      _.width = t1;
      _.height = t2;
      _.preProcessing = _.filter = _.method = 0;
      _.rsrv = 1;
      _.isAlphaDecoded = false;
      _.__WebPAlpha__vp8l = null;
      _._use8bDecode = false;
    }
  },
  Z = {ZLibDecoderBase: function ZLibDecoderBase() {
    },
    ZLibDecoder$: function() {
      return new Z.ZLibDecoder();
    },
    ZLibDecoder: function ZLibDecoder() {
    },
    JpegDecoder$: function() {
      return new Z.JpegDecoder();
    },
    JpegDecoder: function JpegDecoder() {
    },
    JpegEncoder$: function(quality) {
      var _null = null,
        t1 = type$.nullable_int;
      t1 = new Z.JpegEncoder(H.NativeUint8List_NativeUint8List(64), H.NativeUint8List_NativeUint8List(64), H.NativeFloat32List_NativeFloat32List(64), H.NativeFloat32List_NativeFloat32List(64), P.List_List$filled(65535, _null, false, type$.nullable_List_int), P.List_List$filled(65535, _null, false, t1), P.List_List$filled(64, _null, false, t1), P.List_List$filled(64, _null, false, t1), H.NativeFloat32List_NativeFloat32List(64), H.NativeFloat32List_NativeFloat32List(64), H.NativeFloat32List_NativeFloat32List(64), H.NativeInt32List_NativeInt32List(2048));
      t1.JpegEncoder$1$quality(quality);
      return t1;
    },
    JpegEncoder: function JpegEncoder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.YTable = t0;
      _.UVTable = t1;
      _.fdtbl_Y = t2;
      _.fdtbl_UV = t3;
      _.__JpegEncoder_UVAC_HT = _.__JpegEncoder_YAC_HT = _.UVDC_HT = _.YDC_HT = null;
      _.bitcode = t4;
      _.category = t5;
      _.outputfDCTQuant = t6;
      _.DU = t7;
      _.YDU = t8;
      _.UDU = t9;
      _.VDU = t10;
      _.RGB_YUV_TABLE = t11;
      _.currentQuality = null;
      _._bytenew = 0;
      _._bytepos = 7;
    },
    InputBuffer$: function(buffer, bigEndian, $length, offset) {
      return new Z.InputBuffer(buffer, offset, $length == null ? J.get$length$asx(buffer) : offset + $length, offset, bigEndian);
    },
    InputBuffer$from: function(other, $length, offset) {
      var t3, t4,
        t1 = other.buffer,
        t2 = other.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += offset;
      t3 = other.start;
      t4 = $length == null ? other.end : t2 + $length;
      return new Z.InputBuffer(t1, t3, t4, t2, other.bigEndian);
    },
    InputBuffer: function InputBuffer(t0, t1, t2, t3, t4) {
      var _ = this;
      _.buffer = t0;
      _.start = t1;
      _.end = t2;
      _.offset = t3;
      _.bigEndian = t4;
    },
    shiftR: function(v, n) {
      return C.JSInt_methods.toSigned$1(C.JSInt_methods.$shr(v, n), 32);
    },
    shiftL: function(v, n) {
      return C.JSInt_methods.toSigned$1(C.JSInt_methods.$shl(v, n), 32);
    },
    uint8ToInt8: function(d) {
      J.$indexSet$ax($.$get$__uint8(), 0, d);
      return J.$index$asx($.$get$__uint8ToInt8(), 0);
    },
    uint16ToInt16: function(d) {
      J.$indexSet$ax($.$get$__uint16(), 0, d);
      return J.$index$asx($.$get$__uint16ToInt16(), 0);
    },
    uint32ToInt32: function(d) {
      J.$indexSet$ax($.$get$__uint32(), 0, d);
      return J.$index$asx($.$get$__uint32ToInt32(), 0);
    },
    uint32ToFloat32: function(d) {
      J.$indexSet$ax($.$get$__uint32(), 0, d);
      return J.$index$asx($.$get$__uint32ToFloat32(), 0);
    },
    uint64ToFloat64: function(d) {
      J.$indexSet$ax($.$get$__uint64(), 0, d);
      return J.$index$asx($.$get$__uint64ToFloat64(), 0);
    },
    int32ToUint32: function(d) {
      J.$indexSet$ax($.$get$__int32(), 0, d);
      return J.$index$asx($.$get$__int32ToUint32(), 0);
    },
    float32ToUint32: function(d) {
      J.$indexSet$ax($.$get$__float32(), 0, d);
      return J.$index$asx($.$get$__float32ToUint32(), 0);
    },
    debugBits32: function(value) {
      var result, i;
      if (value == null)
        return "null";
      result = P.StringBuffer$("");
      for (i = 32; i > -1; --i)
        result.write$1((value & C.JSInt_methods.$shl(1, i)) >>> 0 === 0 ? "0" : "1");
      return result.toString$0(0);
    }
  },
  L = {
    BitmapFileHeader$: function(b) {
      var t1 = new L.BitmapFileHeader();
      t1.BitmapFileHeader$1(b);
      return t1;
    },
    BitmapFileHeader_isValidFile: function(b) {
      var t1 = b.get$length(b);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 2)
        return false;
      return Z.InputBuffer$from(b, null, 0).readUint16$0() === 19778;
    },
    BmpInfo$: function(p, fileHeader) {
      var t1 = fileHeader == null ? L.BitmapFileHeader$(p) : fileHeader,
        t2 = p.readUint32$0(),
        t3 = p.readInt32$0();
      t2 = new L.BmpInfo(t1, p.readInt32$0(), t3, t2, p.readUint16$0(), p.readUint16$0(), L.BmpInfo__intToCompressions(p.readUint32$0()), p.readUint32$0(), p.readInt32$0(), p.readInt32$0(), p.readUint32$0(), p.readUint32$0());
      t2.BmpInfo$2$fileHeader(p, fileHeader);
      return t2;
    },
    BmpInfo__intToCompressions: function(compIndex) {
      var compression = P.LinkedHashMap_LinkedHashMap$_literal([0, C.BitmapCompression_1, 3, C.BitmapCompression_0], type$.int, type$.BitmapCompression).$index(0, compIndex);
      if (compression == null)
        throw H.wrapException(K.ImageException$("Bitmap compression " + H.S(compIndex) + " is not supported yet."));
      return compression;
    },
    BitmapCompression: function BitmapCompression(t0) {
      this._bmp_info$_name = t0;
    },
    BitmapFileHeader: function BitmapFileHeader() {
      this.__BitmapFileHeader_offset = this.__BitmapFileHeader_fileLength = null;
    },
    BmpInfo: function BmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.file = t0;
      _._height = t1;
      _.BmpInfo_width = t2;
      _.headerSize = t3;
      _.planes = t4;
      _.bpp = t5;
      _.compression = t6;
      _.imageSize = t7;
      _.xppm = t8;
      _.yppm = t9;
      _.totalColors = t10;
      _.importantColors = t11;
      _.colorPalette = _.v5alphaMask = _.v5blueMask = _.v5greenMask = _.v5redMask = null;
      _.height = _.width = 0;
    },
    BmpInfo_readPalette_closure: function BmpInfo_readPalette_closure(t0, t1, t2) {
      this.$this = t0;
      this.p = t1;
      this.colorBytes = t2;
    },
    JpegFrame$: function() {
      return new L.JpegFrame(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.JpegComponent), H.setRuntimeTypeInfo([], type$.JSArray_int));
    },
    JpegFrame: function JpegFrame(t0, t1) {
      var _ = this;
      _.samplesPerLine = _.scanLines = _.precision = _.progressive = null;
      _.maxVSamples = _.maxHSamples = 0;
      _.__JpegFrame_mcusPerColumn = _.__JpegFrame_mcusPerLine = null;
      _.components = t0;
      _.componentsOrder = t1;
    },
    PsdInnerShadowEffect$: function() {
      return new L.PsdInnerShadowEffect();
    },
    PsdInnerShadowEffect: function PsdInnerShadowEffect() {
      this.version = null;
    },
    PsdImage$: function(bytes) {
      var t1 = new L.PsdImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PsdImageResource));
      t1.PsdImage$1(bytes);
      return t1;
    },
    PsdImage__blendLighten: function(a, b) {
      return P.max(a, b, type$.int);
    },
    PsdImage__blendDarken: function(a, b) {
      return P.min(a, b, type$.int);
    },
    PsdImage__blendMultiply: function(a, b) {
      return C.JSInt_methods._shrOtherPositive$1(a * b, 8);
    },
    PsdImage__blendOverlay: function(a, b, aAlpha, bAlpha) {
      var x = a / 255,
        y = b / 255,
        aa = aAlpha / 255,
        ba = bAlpha / 255,
        t1 = y * (1 - aa),
        t2 = x * (1 - ba);
      return J.toInt$0$n(C.JSNumber_methods.clamp$2((2 * x < aa ? 2 * y * x + t1 + t2 : ba * aa - 2 * (aa - x) * (ba - y) + t1 + t2) * 255, 0, 255));
    },
    PsdImage__blendColorBurn: function(a, b) {
      if (b === 0)
        return 0;
      return J.toInt$0$n(C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(255 * (1 - (1 - a / 255) / (b / 255))), 0, 255));
    },
    PsdImage__blendLinearBurn: function(a, b) {
      return J.toInt$0$n(C.JSInt_methods.clamp$2(a + b - 255, 0, 255));
    },
    PsdImage__blendScreen: function(a, b) {
      return J.toInt$0$n(C.JSInt_methods.clamp$2(255 - (255 - b) * (255 - a), 0, 255));
    },
    PsdImage__blendColorDodge: function(a, b) {
      if (b === 255)
        return 255;
      return J.toInt$0$n(C.JSNumber_methods.clamp$2(a / 255 / (1 - b / 255) * 255, 0, 255));
    },
    PsdImage__blendLinearDodge: function(a, b) {
      return b + a > 255 ? 255 : a + b;
    },
    PsdImage__blendSoftLight: function(a, b) {
      var aa = a / 255,
        bb = b / 255,
        t1 = 1 - bb;
      return C.JSNumber_methods.round$0(255 * (t1 * bb * aa + bb * (1 - t1 * (1 - aa))));
    },
    PsdImage__blendHardLight: function(bottom, $top) {
      var a = $top / 255,
        b = bottom / 255;
      if (b < 0.5)
        return C.JSNumber_methods.round$0(510 * a * b);
      else
        return C.JSNumber_methods.round$0(255 * (1 - 2 * (1 - a) * (1 - b)));
    },
    PsdImage__blendVividLight: function(bottom, $top) {
      if ($top < 128)
        return L.PsdImage__blendColorBurn(bottom, 2 * $top);
      else
        return L.PsdImage__blendColorDodge(bottom, 2 * ($top - 128));
    },
    PsdImage__blendLinearLight: function(bottom, $top) {
      if ($top < 128)
        return L.PsdImage__blendLinearBurn(bottom, 2 * $top);
      else
        return L.PsdImage__blendLinearDodge(bottom, 2 * ($top - 128));
    },
    PsdImage__blendPinLight: function(bottom, $top) {
      return $top < 128 ? L.PsdImage__blendDarken(bottom, 2 * $top) : L.PsdImage__blendLighten(bottom, 2 * ($top - 128));
    },
    PsdImage__blendHardMix: function(bottom, $top) {
      return $top < 255 - bottom ? 0 : 255;
    },
    PsdImage__blendDifference: function(bottom, $top) {
      return Math.abs($top - bottom);
    },
    PsdImage__blendExclusion: function(bottom, $top) {
      return C.JSNumber_methods.round$0($top + bottom - 2 * $top * bottom / 255);
    },
    PsdImage__ch: function(data, si, ns) {
      var t2,
        t1 = J.getInterceptor$asx(data);
      if (ns === 1)
        t1 = t1.$index(data, si);
      else {
        t2 = t1.$index(data, si);
        if (typeof t2 !== "number")
          return t2.$shl();
        t1 = t1.$index(data, si + 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = (t2 << 8 | t1) >>> 8;
      }
      return t1;
    },
    PsdImage_createImageFromChannels: function(colorMode, bitDepth, width, height, channelList) {
      var t1, t2, t3, numChannels, ns, channel0, channel1, channel2, channel_1, t4, t5, y, di, si, x, di0, di1, di2, r, g, t6, b, t7, a, $L, alpha, rgb, gray, c, m, y0, k,
        output = U.Image$(width, height, C.Channels_1, null, null),
        pixels = output.getBytes$0(),
        channels = P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PsdChannel);
      for (t1 = J.getInterceptor$ax(channelList), t2 = t1.get$iterator(channelList); H.boolConversionCheck(t2.moveNext$0());) {
        t3 = t2.get$current();
        channels.$indexSet(0, t3.id, t3);
      }
      numChannels = t1.get$length(channelList);
      if (bitDepth === 8)
        ns = 1;
      else
        ns = bitDepth === 16 ? 2 : -1;
      if (ns === -1)
        throw H.wrapException(K.ImageException$("PSD: unsupported bit depth: " + H.S(bitDepth)));
      channel0 = channels.$index(0, 0);
      channel1 = channels.$index(0, 1);
      channel2 = channels.$index(0, 2);
      channel_1 = channels.$index(0, -1);
      for (t1 = pixels.length, t2 = numChannels >= 5, t3 = numChannels === 4, t4 = numChannels >= 2, t5 = numChannels >= 4, y = 0, di = 0, si = 0; y < height; ++y)
        for (x = 0; x < width; ++x, si += ns)
          switch (colorMode) {
            case 3:
              di0 = di + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di, L.PsdImage__ch(channel0.get$data(channel0), si, ns));
              di1 = di0 + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di0, L.PsdImage__ch(channel1.get$data(channel1), si, ns));
              di2 = di1 + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di1, L.PsdImage__ch(channel2.get$data(channel2), si, ns));
              di1 = di2 + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di2, t5 ? L.PsdImage__ch(channel_1.get$data(channel_1), si, ns) : 255);
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              r = pixels[di];
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              g = pixels[di0];
              t6 = di + 2;
              if (t6 >= t1)
                return H.ioore(pixels, t6);
              b = pixels[t6];
              t7 = di + 3;
              if (t7 >= t1)
                return H.ioore(pixels, t7);
              a = pixels[t7];
              if (a !== 0) {
                pixels[di] = C.JSInt_methods.$tdiv((r + a - 255) * 255, a);
                pixels[di0] = C.JSInt_methods.$tdiv((g + a - 255) * 255, a);
                pixels[t6] = C.JSInt_methods.$tdiv((b + a - 255) * 255, a);
              }
              di = di1;
              break;
            case 9:
              t6 = L.PsdImage__ch(channel0.get$data(channel0), si, ns);
              if (typeof t6 !== "number")
                return t6.$mul();
              $L = C.JSNumber_methods._shrOtherPositive$1(t6 * 100, 8);
              t6 = L.PsdImage__ch(channel1.get$data(channel1), si, ns);
              if (typeof t6 !== "number")
                return t6.$sub();
              t7 = L.PsdImage__ch(channel2.get$data(channel2), si, ns);
              if (typeof t7 !== "number")
                return t7.$sub();
              alpha = t5 ? L.PsdImage__ch(channel_1.get$data(channel_1), si, ns) : 255;
              rgb = K.labToRgb($L, t6 - 128, t7 - 128);
              di0 = di + 1;
              t6 = J.getInterceptor$asx(rgb);
              C.NativeUint8List_methods.$indexSet(pixels, di, t6.$index(rgb, 0));
              di = di0 + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di0, t6.$index(rgb, 1));
              di0 = di + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di, t6.$index(rgb, 2));
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            case 1:
              gray = L.PsdImage__ch(channel0.get$data(channel0), si, ns);
              alpha = t4 ? L.PsdImage__ch(channel_1.get$data(channel_1), si, ns) : 255;
              di0 = di + 1;
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = gray;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = gray;
              di0 = di + 1;
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = gray;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            case 4:
              c = L.PsdImage__ch(channel0.get$data(channel0), si, ns);
              m = L.PsdImage__ch(channel1.get$data(channel1), si, ns);
              y0 = L.PsdImage__ch(channel2.get$data(channel2), si, ns);
              t6 = channels.$index(0, t3 ? -1 : 3);
              t6.toString;
              k = L.PsdImage__ch(J.get$data$x(t6), si, ns);
              alpha = t2 ? L.PsdImage__ch(channel_1.get$data(channel_1), si, ns) : 255;
              rgb = K.cmykToRgb(255 - c, 255 - m, 255 - y0, 255 - k);
              di0 = di + 1;
              t6 = J.getInterceptor$asx(rgb);
              C.NativeUint8List_methods.$indexSet(pixels, di, t6.$index(rgb, 0));
              di = di0 + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di0, t6.$index(rgb, 1));
              di0 = di + 1;
              C.NativeUint8List_methods.$indexSet(pixels, di, t6.$index(rgb, 2));
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            default:
              throw H.wrapException(K.ImageException$("Unhandled color mode: " + H.S(colorMode)));
          }
      return output;
    },
    PsdImage: function PsdImage(t0) {
      var _ = this;
      _.mergedImage = _.__PsdImage_mergeImageChannels = _.__PsdImage_layers = _.colorMode = _.depth = _.__PsdImage_channels = _.version = _.signature = null;
      _.imageResources = t0;
      _.__PsdImage__imageData = _.__PsdImage__layerAndMaskData = _.__PsdImage__imageResourceData = _.__PsdImage__input = $;
      _.height = _.width = 0;
    },
    VP8FrameHeader$: function() {
      return new L.VP8FrameHeader();
    },
    VP8PictureHeader$: function() {
      return new L.VP8PictureHeader();
    },
    VP8SegmentHeader$: function() {
      return new L.VP8SegmentHeader(H.NativeInt8List_NativeInt8List(4), H.NativeInt8List_NativeInt8List(4));
    },
    VP8BandProbas$: function() {
      var _i,
        _list = J.JSArray_JSArray$allocateFixed(3, type$.Uint8List);
      for (_i = 0; _i < 3; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, H.NativeUint8List_NativeUint8List(11));
      return new L.VP8BandProbas(_list);
    },
    VP8Proba$: function() {
      var t2, _i, _list0, _i0,
        t1 = H.NativeUint8List_NativeUint8List(3),
        _list = J.JSArray_JSArray$allocateFixed(4, type$.List_VP8BandProbas);
      for (t2 = type$.VP8BandProbas, _i = 0; _i < 4; ++_i) {
        _list0 = J.JSArray_JSArray$allocateFixed(8, t2);
        for (_i0 = 0; _i0 < 8; ++_i0)
          C.JSArray_methods.$indexSet(_list0, _i0, L.VP8BandProbas$());
        C.JSArray_methods.$indexSet(_list, _i, _list0);
      }
      t1 = new L.VP8Proba(t1, _list);
      t1.VP8Proba$0();
      return t1;
    },
    VP8FilterHeader$: function() {
      return new L.VP8FilterHeader(H.NativeInt32List_NativeInt32List(4), H.NativeInt32List_NativeInt32List(4));
    },
    VP8FInfo$: function() {
      return new L.VP8FInfo();
    },
    VP8MB$: function() {
      return new L.VP8MB();
    },
    VP8QuantMatrix$: function() {
      return new L.VP8QuantMatrix(H.NativeInt32List_NativeInt32List(2), H.NativeInt32List_NativeInt32List(2), H.NativeInt32List_NativeInt32List(2));
    },
    VP8MBData$: function() {
      return new L.VP8MBData(H.NativeInt16List_NativeInt16List(384), H.NativeUint8List_NativeUint8List(16));
    },
    VP8TopSamples$: function() {
      return new L.VP8TopSamples(H.NativeUint8List_NativeUint8List(16), H.NativeUint8List_NativeUint8List(8), H.NativeUint8List_NativeUint8List(8));
    },
    VP8FrameHeader: function VP8FrameHeader() {
      this.__VP8FrameHeader_partitionLength = null;
    },
    VP8PictureHeader: function VP8PictureHeader() {
    },
    VP8SegmentHeader: function VP8SegmentHeader(t0, t1) {
      var _ = this;
      _.updateMap = _.useSegment = false;
      _.absoluteDelta = true;
      _.quantizer = t0;
      _.filterStrength = t1;
    },
    VP8BandProbas: function VP8BandProbas(t0) {
      this.probas = t0;
    },
    VP8Proba: function VP8Proba(t0, t1) {
      this.segments = t0;
      this.bands = t1;
    },
    VP8FilterHeader: function VP8FilterHeader(t0, t1) {
      var _ = this;
      _.__VP8FilterHeader_useLfDelta = _.__VP8FilterHeader_sharpness = _.level = _.__VP8FilterHeader_simple = null;
      _.refLfDelta = t0;
      _.modeLfDelta = t1;
    },
    VP8FInfo: function VP8FInfo() {
      var _ = this;
      _.fInnerLevel = _.fLimit = 0;
      _.fInner = false;
      _.hevThresh = 0;
    },
    VP8MB: function VP8MB() {
      this.nzDc = this.nz = 0;
    },
    VP8QuantMatrix: function VP8QuantMatrix(t0, t1, t2) {
      this.y1Mat = t0;
      this.y2Mat = t1;
      this.uvMat = t2;
    },
    VP8MBData: function VP8MBData(t0, t1) {
      var _ = this;
      _.coeffs = t0;
      _.__VP8MBData_isIntra4x4 = null;
      _.imodes = t1;
      _.__VP8MBData_nonZeroUV = _.nonZeroY = _.uvmode = null;
    },
    VP8TopSamples: function VP8TopSamples(t0, t1, t2) {
      this.y = t0;
      this.u = t1;
      this.v = t2;
    },
    _clamp8: function(i) {
      var t1;
      if (i < 0)
        t1 = 0;
      else
        t1 = i > 255 ? 255 : i;
      return t1;
    },
    quantizeAndInverse: function(quantizationTable, coefBlock, dataOut, dataIn) {
      var i, t1, t2, t3, t4, row, t, v0, v1, v2, t5, v3, t6, t7, t8, v4, v7, v5, v6, t9, t10, t11, t12;
      if ($._dctClip == null) {
        $._dctClip = H.NativeUint8List_NativeUint8List(768);
        for (i = -256; i < 0; ++i) {
          t1 = $._dctClip;
          t1.toString;
          J.$indexSet$ax(t1, 256 + i, 0);
        }
        for (i = 0; i < 256; ++i) {
          t1 = $._dctClip;
          t1.toString;
          J.$indexSet$ax(t1, 256 + i, i);
        }
        for (i = 256; i < 512; ++i) {
          t1 = $._dctClip;
          t1.toString;
          J.$indexSet$ax(t1, 256 + i, 255);
        }
      }
      for (t1 = coefBlock.length, t2 = quantizationTable.length, i = 0; i < 64; ++i) {
        if (i >= t1)
          return H.ioore(coefBlock, i);
        t3 = coefBlock[i];
        if (i >= t2)
          return H.ioore(quantizationTable, i);
        t4 = quantizationTable[i];
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        C.NativeInt32List_methods.$indexSet(dataIn, i, t3 * t4);
      }
      for (t1 = dataIn.length, row = 0, i = 0; i < 8; ++i, row += 8) {
        t2 = 1 + row;
        if (t2 >= t1)
          return H.ioore(dataIn, t2);
        if (H.boolConversionCheck(J.$eq$(dataIn[t2], 0))) {
          t3 = 2 + row;
          if (t3 >= t1)
            return H.ioore(dataIn, t3);
          if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
            t3 = 3 + row;
            if (t3 >= t1)
              return H.ioore(dataIn, t3);
            if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
              t3 = 4 + row;
              if (t3 >= t1)
                return H.ioore(dataIn, t3);
              if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                t3 = 5 + row;
                if (t3 >= t1)
                  return H.ioore(dataIn, t3);
                if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                  t3 = 6 + row;
                  if (t3 >= t1)
                    return H.ioore(dataIn, t3);
                  if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                    t3 = 7 + row;
                    if (t3 >= t1)
                      return H.ioore(dataIn, t3);
                    t3 = H.boolConversionCheck(J.$eq$(dataIn[t3], 0));
                  } else
                    t3 = false;
                } else
                  t3 = false;
              } else
                t3 = false;
            } else
              t3 = false;
          } else
            t3 = false;
        } else
          t3 = false;
        if (t3) {
          if (row >= t1)
            return H.ioore(dataIn, row);
          t2 = dataIn[row];
          if (typeof t2 !== "number")
            return H.iae(t2);
          t = Z.shiftR(5793 * t2 + 512, 10);
          dataIn[row] = t;
          t2 = row + 1;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 2;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 3;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 4;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 5;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 6;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = row + 7;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          continue;
        }
        if (row >= t1)
          return H.ioore(dataIn, row);
        t3 = dataIn[row];
        if (typeof t3 !== "number")
          return H.iae(t3);
        v0 = Z.shiftR(5793 * t3 + 128, 8);
        t3 = 4 + row;
        if (t3 >= t1)
          return H.ioore(dataIn, t3);
        t4 = dataIn[t3];
        if (typeof t4 !== "number")
          return H.iae(t4);
        v1 = Z.shiftR(5793 * t4 + 128, 8);
        t4 = 2 + row;
        if (t4 >= t1)
          return H.ioore(dataIn, t4);
        v2 = dataIn[t4];
        t5 = 6 + row;
        if (t5 >= t1)
          return H.ioore(dataIn, t5);
        v3 = dataIn[t5];
        t6 = dataIn[t2];
        t7 = 7 + row;
        if (t7 >= t1)
          return H.ioore(dataIn, t7);
        t8 = dataIn[t7];
        if (typeof t6 !== "number")
          return t6.$sub();
        if (typeof t8 !== "number")
          return H.iae(t8);
        v4 = Z.shiftR(2896 * (t6 - t8) + 128, 8);
        t8 = dataIn[t2];
        t6 = dataIn[t7];
        if (typeof t8 !== "number")
          return t8.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        v7 = Z.shiftR(2896 * (t8 + t6) + 128, 8);
        t6 = 3 + row;
        if (t6 >= t1)
          return H.ioore(dataIn, t6);
        v5 = Z.shiftL(dataIn[t6], 4);
        t8 = 5 + row;
        if (t8 >= t1)
          return H.ioore(dataIn, t8);
        v6 = Z.shiftL(dataIn[t8], 4);
        t = Z.shiftR(v0 - v1 + 1, 1);
        v0 = Z.shiftR(v0 + v1 + 1, 1);
        t9 = Z.shiftR(v2 * 3784 + v3 * 1567 + 128, 8);
        v2 = Z.shiftR(v2 * 1567 - v3 * 3784 + 128, 8);
        t10 = Z.shiftR(v4 - v6 + 1, 1);
        v4 = Z.shiftR(v4 + v6 + 1, 1);
        t11 = Z.shiftR(v7 + v5 + 1, 1);
        v5 = Z.shiftR(v7 - v5 + 1, 1);
        t12 = Z.shiftR(v0 - t9 + 1, 1);
        v0 = Z.shiftR(v0 + t9 + 1, 1);
        t9 = Z.shiftR(t - v2 + 1, 1);
        v1 = Z.shiftR(t + v2 + 1, 1);
        t = Z.shiftR(v4 * 2276 + t11 * 3406 + 2048, 12);
        v4 = Z.shiftR(v4 * 3406 - t11 * 2276 + 2048, 12);
        t11 = Z.shiftR(v5 * 799 + t10 * 4017 + 2048, 12);
        v5 = Z.shiftR(v5 * 4017 - t10 * 799 + 2048, 12);
        dataIn[row] = v0 + t;
        dataIn[t7] = v0 - t;
        dataIn[t2] = v1 + t11;
        dataIn[t5] = v1 - t11;
        dataIn[t4] = t9 + v5;
        dataIn[t8] = t9 - v5;
        dataIn[t6] = t12 + v4;
        dataIn[t3] = t12 - v4;
      }
      for (i = 0; i < 8; ++i) {
        t2 = 8 + i;
        if (t2 >= t1)
          return H.ioore(dataIn, t2);
        if (H.boolConversionCheck(J.$eq$(dataIn[t2], 0))) {
          t3 = 16 + i;
          if (t3 >= t1)
            return H.ioore(dataIn, t3);
          if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
            t3 = 24 + i;
            if (t3 >= t1)
              return H.ioore(dataIn, t3);
            if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
              t3 = 32 + i;
              if (t3 >= t1)
                return H.ioore(dataIn, t3);
              if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                t3 = 40 + i;
                if (t3 >= t1)
                  return H.ioore(dataIn, t3);
                if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                  t3 = 48 + i;
                  if (t3 >= t1)
                    return H.ioore(dataIn, t3);
                  if (H.boolConversionCheck(J.$eq$(dataIn[t3], 0))) {
                    t3 = 56 + i;
                    if (t3 >= t1)
                      return H.ioore(dataIn, t3);
                    t3 = H.boolConversionCheck(J.$eq$(dataIn[t3], 0));
                  } else
                    t3 = false;
                } else
                  t3 = false;
              } else
                t3 = false;
            } else
              t3 = false;
          } else
            t3 = false;
        } else
          t3 = false;
        if (t3) {
          t3 = dataIn[i];
          if (typeof t3 !== "number")
            return H.iae(t3);
          t = Z.shiftR(5793 * t3 + 8192, 14);
          dataIn[i] = t;
          dataIn[t2] = t;
          t2 = 16 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = 24 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = 32 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = 40 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = 48 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          t2 = 56 + i;
          if (t2 >= t1)
            return H.ioore(dataIn, t2);
          dataIn[t2] = t;
          continue;
        }
        t3 = dataIn[i];
        if (typeof t3 !== "number")
          return H.iae(t3);
        v0 = Z.shiftR(5793 * t3 + 2048, 12);
        t3 = 32 + i;
        if (t3 >= t1)
          return H.ioore(dataIn, t3);
        t4 = dataIn[t3];
        if (typeof t4 !== "number")
          return H.iae(t4);
        v1 = Z.shiftR(5793 * t4 + 2048, 12);
        t4 = 16 + i;
        v2 = dataIn[t4];
        t5 = 48 + i;
        if (t5 >= t1)
          return H.ioore(dataIn, t5);
        v3 = dataIn[t5];
        t6 = dataIn[t2];
        t7 = 56 + i;
        if (t7 >= t1)
          return H.ioore(dataIn, t7);
        t8 = dataIn[t7];
        if (typeof t6 !== "number")
          return t6.$sub();
        if (typeof t8 !== "number")
          return H.iae(t8);
        v4 = Z.shiftR(2896 * (t6 - t8) + 2048, 12);
        t8 = dataIn[t2];
        t6 = dataIn[t7];
        if (typeof t8 !== "number")
          return t8.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        v7 = Z.shiftR(2896 * (t8 + t6) + 2048, 12);
        t6 = 24 + i;
        v5 = dataIn[t6];
        t8 = 40 + i;
        v6 = dataIn[t8];
        t = Z.shiftR(v0 - v1 + 1, 1);
        v0 = Z.shiftR(v0 + v1 + 1, 1);
        t9 = Z.shiftR(v2 * 3784 + v3 * 1567 + 2048, 12);
        v2 = Z.shiftR(v2 * 1567 - v3 * 3784 + 2048, 12);
        t10 = Z.shiftR(v4 - v6 + 1, 1);
        v4 = Z.shiftR(v4 + v6 + 1, 1);
        t11 = Z.shiftR(v7 + v5 + 1, 1);
        v5 = Z.shiftR(v7 - v5 + 1, 1);
        t12 = Z.shiftR(v0 - t9 + 1, 1);
        v0 = Z.shiftR(v0 + t9 + 1, 1);
        t9 = Z.shiftR(t - v2 + 1, 1);
        v1 = Z.shiftR(t + v2 + 1, 1);
        t = Z.shiftR(v4 * 2276 + t11 * 3406 + 2048, 12);
        v4 = Z.shiftR(v4 * 3406 - t11 * 2276 + 2048, 12);
        t11 = Z.shiftR(v5 * 799 + t10 * 4017 + 2048, 12);
        v5 = Z.shiftR(v5 * 4017 - t10 * 799 + 2048, 12);
        dataIn[i] = v0 + t;
        dataIn[t7] = v0 - t;
        dataIn[t2] = v1 + t11;
        dataIn[t5] = v1 - t11;
        dataIn[t4] = t9 + v5;
        dataIn[t8] = t9 - v5;
        dataIn[t6] = t12 + v4;
        dataIn[t3] = t12 - v4;
      }
      for (i = 0; i < 64; ++i) {
        t2 = $._dctClip;
        t2.toString;
        if (i >= t1)
          return H.ioore(dataIn, i);
        t3 = dataIn[i];
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = Z.shiftR(t3 + 8, 4);
        if (typeof t3 !== "number")
          return H.iae(t3);
        C.NativeUint8List_methods.$indexSet(dataOut, i, J.$index$asx(t2, 384 + t3));
      }
    },
    getImageFromJpeg: function(jpeg) {
      var t2, image, component1, lines, hShift1, vShift1, $Y, offset, y, component1Line, x, x1, offset0, component2, component3, lines1, lines2, lines3, hShift2, vShift2, hShift3, vShift3, t3, $B, $G, $R, Cr, Cb, t4, y1, y2, y3, component2Line, component3Line, x2, x3, colorTransform, component4, lines4, hShift4, vShift4, t5, Ye, $M, $C, $K, t6, y4, component4Line, x4, t7, _null = null,
        t1 = jpeg.get$width(jpeg);
      t1.toString;
      t2 = jpeg.get$height(jpeg);
      t2.toString;
      image = U.Image$(t1, t2, C.Channels_0, _null, _null);
      image.exif = G.ExifData$from(jpeg.exif);
      t1 = jpeg.components;
      t2 = J.getInterceptor$asx(t1);
      switch (t2.get$length(t1)) {
        case 1:
          component1 = t2.$index(t1, 0);
          lines = component1.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          t1 = J.getInterceptor$asx(lines);
          $Y = _null;
          offset = 0;
          y = 0;
          while (true) {
            t2 = jpeg.get$height(jpeg);
            t2.toString;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(y < t2))
              break;
            component1Line = t1.$index(lines, C.JSInt_methods._shrReceiverPositive$1(y, vShift1));
            x = 0;
            while (true) {
              t2 = jpeg.get$width(jpeg);
              t2.toString;
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(x < t2))
                break;
              x1 = C.JSInt_methods._shrReceiverPositive$1(x, hShift1);
              if (x1 >= component1Line.length)
                return H.ioore(component1Line, x1);
              $Y = component1Line[x1];
              offset0 = offset + 1;
              image.$indexSet(0, offset, K.getColor($Y, $Y, $Y, 255));
              ++x;
              offset = offset0;
            }
            ++y;
          }
          break;
        case 3:
          component1 = t2.$index(t1, 0);
          component2 = t2.$index(t1, 1);
          component3 = t2.$index(t1, 2);
          lines1 = component1.lines;
          lines2 = component2.lines;
          lines3 = component3.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          hShift2 = component2.hScaleShift;
          vShift2 = component2.vScaleShift;
          hShift3 = component3.hScaleShift;
          vShift3 = component3.vScaleShift;
          t1 = J.getInterceptor$asx(lines1);
          t2 = J.getInterceptor$asx(lines2);
          t3 = J.getInterceptor$asx(lines3);
          $B = _null;
          $G = $B;
          $R = $G;
          Cr = $R;
          Cb = Cr;
          $Y = Cb;
          offset = 0;
          y = 0;
          while (true) {
            t4 = jpeg.get$height(jpeg);
            t4.toString;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(y < t4))
              break;
            y1 = C.JSInt_methods._shrReceiverPositive$1(y, vShift1);
            y2 = C.JSInt_methods._shrReceiverPositive$1(y, vShift2);
            y3 = C.JSInt_methods._shrReceiverPositive$1(y, vShift3);
            component1Line = t1.$index(lines1, y1);
            component2Line = t2.$index(lines2, y2);
            component3Line = t3.$index(lines3, y3);
            x = 0;
            while (true) {
              t4 = jpeg.get$width(jpeg);
              t4.toString;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(x < t4))
                break;
              x1 = C.JSInt_methods._shrReceiverPositive$1(x, hShift1);
              x2 = C.JSInt_methods._shrReceiverPositive$1(x, hShift2);
              x3 = C.JSInt_methods._shrReceiverPositive$1(x, hShift3);
              if (x1 >= component1Line.length)
                return H.ioore(component1Line, x1);
              t4 = component1Line[x1];
              if (typeof t4 !== "number")
                return t4.$shl();
              $Y = t4 << 8 >>> 0;
              if (x2 >= component2Line.length)
                return H.ioore(component2Line, x2);
              t4 = component2Line[x2];
              if (typeof t4 !== "number")
                return t4.$sub();
              Cb = t4 - 128;
              if (x3 >= component3Line.length)
                return H.ioore(component3Line, x3);
              t4 = component3Line[x3];
              if (typeof t4 !== "number")
                return t4.$sub();
              Cr = t4 - 128;
              $R = L._clamp8(Z.shiftR($Y + 359 * Cr + 128, 8));
              $G = L._clamp8(Z.shiftR($Y - 88 * Cb - 183 * Cr + 128, 8));
              $B = L._clamp8(Z.shiftR($Y + 454 * Cb + 128, 8));
              offset0 = offset + 1;
              image.$indexSet(0, offset, K.getColor($R, $G, $B, 255));
              ++x;
              offset = offset0;
            }
            ++y;
          }
          break;
        case 4:
          t3 = jpeg.adobe;
          if (t3 == null)
            throw H.wrapException(K.ImageException$("Unsupported color mode (4 components)"));
          colorTransform = !H.boolConversionCheck(J.$eq$(t3.transformCode, 0)) && true;
          component1 = t2.$index(t1, 0);
          component2 = t2.$index(t1, 1);
          component3 = t2.$index(t1, 2);
          component4 = t2.$index(t1, 3);
          lines1 = component1.lines;
          lines2 = component2.lines;
          lines3 = component3.lines;
          lines4 = component4.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          hShift2 = component2.hScaleShift;
          vShift2 = component2.vScaleShift;
          hShift3 = component3.hScaleShift;
          vShift3 = component3.vScaleShift;
          hShift4 = component4.hScaleShift;
          vShift4 = component4.vScaleShift;
          t1 = !colorTransform;
          t2 = J.getInterceptor$asx(lines1);
          t3 = J.getInterceptor$asx(lines2);
          t4 = J.getInterceptor$asx(lines3);
          t5 = J.getInterceptor$asx(lines4);
          $B = _null;
          $G = $B;
          $R = $G;
          Ye = $R;
          $M = Ye;
          $C = $M;
          $K = $C;
          Cr = $K;
          Cb = Cr;
          $Y = Cb;
          offset = 0;
          y = 0;
          while (true) {
            t6 = jpeg.get$height(jpeg);
            t6.toString;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (!(y < t6))
              break;
            y1 = C.JSInt_methods._shrReceiverPositive$1(y, vShift1);
            y2 = C.JSInt_methods._shrReceiverPositive$1(y, vShift2);
            y3 = C.JSInt_methods._shrReceiverPositive$1(y, vShift3);
            y4 = C.JSInt_methods._shrReceiverPositive$1(y, vShift4);
            component1Line = t2.$index(lines1, y1);
            component2Line = t3.$index(lines2, y2);
            component3Line = t4.$index(lines3, y3);
            component4Line = t5.$index(lines4, y4);
            x = 0;
            while (true) {
              t6 = jpeg.get$width(jpeg);
              t6.toString;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (!(x < t6))
                break;
              x1 = C.JSInt_methods._shrReceiverPositive$1(x, hShift1);
              x2 = C.JSInt_methods._shrReceiverPositive$1(x, hShift2);
              x3 = C.JSInt_methods._shrReceiverPositive$1(x, hShift3);
              x4 = C.JSInt_methods._shrReceiverPositive$1(x, hShift4);
              if (t1) {
                if (x1 >= component1Line.length)
                  return H.ioore(component1Line, x1);
                $C = component1Line[x1];
                if (x2 >= component2Line.length)
                  return H.ioore(component2Line, x2);
                $M = component2Line[x2];
                if (x3 >= component3Line.length)
                  return H.ioore(component3Line, x3);
                Ye = component3Line[x3];
                if (x4 >= component4Line.length)
                  return H.ioore(component4Line, x4);
                $K = component4Line[x4];
              } else {
                if (x1 >= component1Line.length)
                  return H.ioore(component1Line, x1);
                $Y = component1Line[x1];
                if (x2 >= component2Line.length)
                  return H.ioore(component2Line, x2);
                Cb = component2Line[x2];
                if (x3 >= component3Line.length)
                  return H.ioore(component3Line, x3);
                Cr = component3Line[x3];
                if (x4 >= component4Line.length)
                  return H.ioore(component4Line, x4);
                $K = component4Line[x4];
                t6 = Cr - 128;
                t7 = L._clamp8(C.JSNumber_methods.toInt$0($Y + 1.402 * t6));
                if (typeof t7 !== "number")
                  return H.iae(t7);
                $C = 255 - t7;
                t7 = Cb - 128;
                t6 = L._clamp8(C.JSNumber_methods.toInt$0($Y - 0.3441363 * t7 - 0.71413636 * t6));
                if (typeof t6 !== "number")
                  return H.iae(t6);
                $M = 255 - t6;
                t7 = L._clamp8(C.JSNumber_methods.toInt$0($Y + 1.772 * t7));
                if (typeof t7 !== "number")
                  return H.iae(t7);
                Ye = 255 - t7;
              }
              $R = Z.shiftR($C * $K, 8);
              $G = Z.shiftR($M * $K, 8);
              $B = Z.shiftR(Ye * $K, 8);
              offset0 = offset + 1;
              image.$indexSet(0, offset, K.getColor($R, $G, $B, 255));
              ++x;
              offset = offset0;
            }
            ++y;
          }
          break;
        default:
          throw H.wrapException(K.ImageException$("Unsupported color mode"));
      }
      return image;
    }
  },
  E = {
    BmpDecoder$: function() {
      return new E.BmpDecoder();
    },
    DibDecoder$: function(input, info) {
      var t1 = new E.DibDecoder();
      t1.DibDecoder$2(input, info);
      return t1;
    },
    BmpDecoder: function BmpDecoder() {
      this.info = this.__BmpDecoder__input = null;
    },
    BmpDecoder_decodeFrame_closure: function BmpDecoder_decodeFrame_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.image = t1;
      this.line = t2;
    },
    DibDecoder: function DibDecoder() {
      this.info = this.__BmpDecoder__input = null;
    },
    Encoder: function Encoder() {
    },
    WebPDecoder$: function() {
      var t1 = new E.WebPDecoder();
      t1.WebPDecoder$1(null);
      return t1;
    },
    WebPDecoder: function WebPDecoder() {
      this._webp_decoder$_input = this._info = null;
    },
    clamp255: function(x) {
      return J.toInt$0$n(C.JSInt_methods.clamp$2(x, 0, 255));
    }
  },
  A = {DecodeInfo: function DecodeInfo() {
    },
    InternalGifImageDesc$: function(input) {
      var t1 = new A.InternalGifImageDesc();
      t1.GifImageDesc$1(input);
      return t1;
    },
    GifImageDesc: function GifImageDesc() {
    },
    InternalGifImageDesc: function InternalGifImageDesc() {
      var _ = this;
      _.__GifImageDesc__inputPosition = _.colorMap = _.__GifImageDesc_interlaced = _.__GifImageDesc_height = _.__GifImageDesc_width = _.__GifImageDesc_y = _.__GifImageDesc_x = null;
    },
    TiffBitReader$: function(input) {
      return new A.TiffBitReader(input);
    },
    TiffBitReader: function TiffBitReader(t0) {
      this.input = t0;
      this._bitPos = this._tiff_bit_reader$_bitBuffer = 0;
    },
    TiffFaxDecoder$: function(fillOrder, width, height) {
      var t1 = new A.TiffFaxDecoder(width, fillOrder);
      t1.TiffFaxDecoder$3(fillOrder, width, height);
      return t1;
    },
    TiffFaxDecoder: function TiffFaxDecoder(t0, t1) {
      var _ = this;
      _.width = t0;
      _.fillOrder = t1;
      _.changingElemSize = 0;
      _.bytePointer = _.bitPointer = _.__TiffFaxDecoder_data = _.currChangingElems = _.prevChangingElems = null;
      _.lastChangingElement = 0;
      _.compression = 2;
      _.fillBits = 0;
      _.oneD = null;
    },
    TiffInfo$: function() {
      return new A.TiffInfo(H.setRuntimeTypeInfo([], type$.JSArray_TiffImage));
    },
    TiffInfo: function TiffInfo(t0) {
      var _ = this;
      _.signature = null;
      _.images = t0;
      _.height = _.width = 0;
    },
    VP8$: function(input, _webp) {
      return new A.VP8(input, _webp, L.VP8FrameHeader$(), L.VP8PictureHeader$(), L.VP8FilterHeader$(), L.VP8SegmentHeader$(), P.List_List$filled(8, null, false, type$.nullable_VP8BitReader), P.List_List$filled(4, null, false, type$.nullable_VP8QuantMatrix), H.NativeUint8List_NativeUint8List(4));
    },
    VP8__checkMode: function(mb_x, mb_y, mode) {
      if (mode === 0)
        if (mb_x === 0)
          return mb_y === 0 ? 6 : 5;
        else
          return mb_y === 0 ? 4 : 0;
      return mode;
    },
    VP8__clip: function(v, $M) {
      var t1;
      if (v < 0)
        t1 = 0;
      else
        t1 = v > $M ? $M : v;
      return t1;
    },
    VP8: function VP8(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.input = t0;
      _._webp = t1;
      _.__VP8__dsp = _.output = _.__VP8_br = null;
      _._frameHeader = t2;
      _._picHeader = t3;
      _._filterHeader = t4;
      _._segmentHeader = t5;
      _.__VP8__numPartitions = _._brMbY = _._brMbX = _.__VP8__tlMbY = _.__VP8__tlMbX = _._mbHeight = _._mbWidth = _._cropBottom = _._cropTop = _.__VP8__cropRight = _.__VP8__cropLeft = null;
      _._partitions = t6;
      _._dqm = t7;
      _._intraT = _.__VP8__skipP = _.__VP8__useSkipProba = _._proba = null;
      _._intraL = t8;
      _._a = _.__VP8__v = _.__VP8__u = _.__VP8__y = _.__VP8__tmpV = _.__VP8__tmpU = _.__VP8__tmpY = _._cacheUVStride = _._cacheYStride = _.__VP8__cacheV = _.__VP8__cacheU = _.__VP8__cacheY = _.__VP8__yuvBlock = _.__VP8__fInfo = _.__VP8__mbInfo = _.__VP8__yuvT = _.__VP8__segment = null;
      _._mbY = _._mbX = 0;
      _.__VP8__alphaPlane = _._alphaData = _.__VP8__alpha = _.__VP8__fStrengths = _._filterType = _.__VP8__mbData = null;
    },
    VP8__upsample_LOAD_UV: function VP8__upsample_LOAD_UV() {
    },
    VP8LBitReader$: function(_input) {
      var t1 = new A.VP8LBitReader(_input, H.NativeUint32List_NativeUint32List(2));
      t1.VP8LBitReader$1(_input);
      return t1;
    },
    VP8LBitReader: function VP8LBitReader(t0, t1) {
      var _ = this;
      _.bitPos = 0;
      _._vp8l_bit_reader$_input = t0;
      _._vp8l_bit_reader$_buffer = t1;
      _.__VP8LBitReader__buffer8 = null;
    },
    hdrToImage: function(hdr, exposure) {
      var t1, m, t2, t3, y, di, t4, x, r, g, b, ri, gi, bi, mi, di0, a,
        _gamma = new A.hdrToImage__gamma(new A.hdrToImage__knee()),
        image = U.Image$(hdr.get$width(hdr), hdr.get$height(hdr), C.Channels_1, null, null),
        pixels = image.getBytes$0();
      if (!H.boolConversionCheck(hdr.get$hasColor()))
        throw H.wrapException(K.ImageException$("Only RGB[A] images are currently supported."));
      t1 = exposure != null;
      m = t1 ? P.pow(2, C.JSNumber_methods.clamp$2(exposure + 2.47393, -20, 20)) : 1;
      t2 = pixels.length;
      t3 = type$.num;
      y = 0;
      di = 0;
      while (true) {
        t4 = hdr.get$height(hdr);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(y < t4))
          break;
        x = 0;
        while (true) {
          t4 = hdr.get$width(hdr);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(x < t4))
            break;
          r = hdr.getRed$2(x, y);
          g = H.boolConversionCheck(J.$eq$(hdr.get$numberOfChannels(), 1)) ? r : hdr.getGreen$2(x, y);
          b = H.boolConversionCheck(J.$eq$(hdr.get$numberOfChannels(), 1)) ? r : hdr.getBlue$2(x, y);
          if (H.boolConversionCheck(C.JSNumber_methods.get$isInfinite(r)) || H.boolConversionCheck(C.JSNumber_methods.get$isNaN(r)))
            r = 0;
          if (H.boolConversionCheck(C.JSNumber_methods.get$isInfinite(g)) || H.boolConversionCheck(C.JSNumber_methods.get$isNaN(g)))
            g = 0;
          if (H.boolConversionCheck(C.JSNumber_methods.get$isInfinite(b)) || H.boolConversionCheck(C.JSNumber_methods.get$isNaN(b)))
            b = 0;
          if (t1) {
            ri = _gamma.call$2(r, m);
            gi = _gamma.call$2(g, m);
            bi = _gamma.call$2(b, m);
          } else {
            ri = r * 255;
            gi = g * 255;
            bi = b * 255;
          }
          mi = P.max(ri, P.max(gi, bi, t3), t3);
          if (mi > 255) {
            ri = 255 * (ri / mi);
            gi = 255 * (gi / mi);
            bi = 255 * (bi / mi);
          }
          di0 = di + 1;
          C.NativeUint8List_methods.$indexSet(pixels, di, J.toInt$0$n(C.JSNumber_methods.clamp$2(ri, 0, 255)));
          di = di0 + 1;
          C.NativeUint8List_methods.$indexSet(pixels, di0, J.toInt$0$n(C.JSNumber_methods.clamp$2(gi, 0, 255)));
          di0 = di + 1;
          C.NativeUint8List_methods.$indexSet(pixels, di, J.toInt$0$n(C.JSNumber_methods.clamp$2(bi, 0, 255)));
          t4 = hdr.alpha;
          if (t4 != null) {
            a = t4.getFloat$2(x, y);
            if (H.boolConversionCheck(C.JSNumber_methods.get$isInfinite(a)) || H.boolConversionCheck(C.JSNumber_methods.get$isNaN(a)))
              a = 1;
            di = di0 + 1;
            C.NativeUint8List_methods.$indexSet(pixels, di0, J.toInt$0$n(C.JSNumber_methods.clamp$2(a * 255, 0, 255)));
          } else {
            di = di0 + 1;
            if (di0 < 0 || di0 >= t2)
              return H.ioore(pixels, di0);
            pixels[di0] = 255;
          }
          ++x;
        }
        ++y;
      }
      return image;
    },
    hdrToImage__knee: function hdrToImage__knee() {
    },
    hdrToImage__gamma: function hdrToImage__gamma(t0) {
      this._knee = t0;
    }
  },
  B = {Decoder: function Decoder() {
    },
    ExrCompressor_ExrCompressor: function(type, hdr, maxScanLineSize, numScanLines) {
      switch (type) {
        case 1:
          return Y.InternalExrRleCompressor$(hdr, maxScanLineSize);
        case 2:
          return R.InternalExrZipCompressor$(hdr, maxScanLineSize, numScanLines == null ? 1 : numScanLines);
        case 3:
          return R.InternalExrZipCompressor$(hdr, maxScanLineSize, numScanLines == null ? 16 : numScanLines);
        case 4:
          return G.InternalExrPizCompressor$(hdr, maxScanLineSize, numScanLines == null ? 32 : numScanLines);
        case 5:
          return O.InternalExrPxr24Compressor$(hdr, maxScanLineSize, numScanLines == null ? 16 : numScanLines);
        case 6:
          return D.InternalExrB44Compressor$(hdr, maxScanLineSize, numScanLines == null ? 32 : numScanLines, false);
        case 7:
          return D.InternalExrB44Compressor$(hdr, maxScanLineSize, numScanLines == null ? 32 : numScanLines, true);
        default:
          throw H.wrapException(K.ImageException$("Invalid compression type: " + H.S(type)));
      }
    },
    ExrCompressor: function ExrCompressor() {
    },
    InternalExrCompressor: function InternalExrCompressor() {
    },
    TgaDecoder$: function() {
      return new B.TgaDecoder();
    },
    TgaDecoder: function TgaDecoder() {
      this.__TgaDecoder_input = this.info = null;
    },
    VP8BitReader$: function(input) {
      var t1 = new B.VP8BitReader(input);
      t1.VP8BitReader$1(input);
      return t1;
    },
    VP8BitReader: function VP8BitReader(t0) {
      var _ = this;
      _.input = t0;
      _.__VP8BitReader__bits = _.__VP8BitReader__value = _.__VP8BitReader__range = null;
      _._eof = false;
    },
    HuffmanTree$: function() {
      var t1 = new B.HuffmanTree(H.NativeUint8List_NativeUint8List(128), H.NativeInt16List_NativeInt16List(128), H.NativeInt16List_NativeInt16List(128));
      t1.HuffmanTree$1(0);
      return t1;
    },
    HTreeGroup$: function() {
      var _i,
        _list = J.JSArray_JSArray$allocateFixed(5, type$.HuffmanTree);
      for (_i = 0; _i < 5; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, B.HuffmanTree$());
      return new B.HTreeGroup(_list);
    },
    HuffmanTree: function HuffmanTree(t0, t1, t2) {
      var _ = this;
      _.lutBits = t0;
      _.lutSymbol = t1;
      _.lutJump = t2;
      _.__HuffmanTree_tree = null;
      _.numNodes = _.maxNodes = 0;
    },
    HTreeGroup: function HTreeGroup(t0) {
      this.htrees = t0;
    }
  },
  U = {
    ExrAttribute$: function($name, type, size, data) {
      return new U.ExrAttribute();
    },
    ExrAttribute: function ExrAttribute() {
    },
    ExrDecoder$: function() {
      return new U.ExrDecoder();
    },
    ExrDecoder: function ExrDecoder() {
      this.exrImage = null;
    },
    ComponentData$: function(hSamples, maxHSamples, vSamples, maxVSamples, lines) {
      var t1 = hSamples === 1 && maxHSamples === 2 ? 1 : 0;
      return new U.ComponentData(lines, t1, vSamples === 1 && maxVSamples === 2 ? 1 : 0);
    },
    ComponentData: function ComponentData(t0, t1, t2) {
      this.lines = t0;
      this.hScaleShift = t1;
      this.vScaleShift = t2;
    },
    PsdBevelEffect$: function() {
      return new U.PsdBevelEffect();
    },
    PsdBevelEffect: function PsdBevelEffect() {
      this.version = null;
    },
    TiffImage$: function(p) {
      var t1 = new U.TiffImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.TiffEntry));
      t1.TiffImage$1(p);
      return t1;
    },
    TiffImage: function TiffImage(t0) {
      var _ = this;
      _.tags = t0;
      _.photometricType = _.height = _.width = null;
      _.sampleFormat = _.samplesPerPixel = _.bitsPerSample = _.compression = 1;
      _.imageType = -1;
      _.isWhiteZero = false;
      _.predictor = 1;
      _.__TiffImage_tilesY = _.__TiffImage_tilesX = _.tileByteCounts = _.tileOffsets = _.tileHeight = _.tileWidth = _.__TiffImage_chromaSubV = _.__TiffImage_chromaSubH = null;
      _.fillOrder = 1;
      _.t6Options = _.t4Options = 0;
      _.hdrImage = _.image = _.__TiffImage_colorMapBlue = _.__TiffImage_colorMapGreen = _.__TiffImage_colorMapRed = _.colorMap = null;
    },
    Image$: function(width, height, channels, exif, iccp) {
      return new U.Image(width, height, channels, H.NativeUint32List_NativeUint32List(width * height), G.ExifData$from(exif), iccp);
    },
    Format: function Format(t0) {
      this._image$_name = t0;
    },
    Channels: function Channels(t0) {
      this._image$_name = t0;
    },
    Image: function Image(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.width = t0;
      _.height = t1;
      _.channels = t2;
      _.data = t3;
      _.exif = t4;
      _.iccProfile = t5;
    }
  },
  D = {
    InternalExrB44Compressor$: function(header, maxScanLineSize, _numScanLines, optFlatFields) {
      return new D.InternalExrB44Compressor(_numScanLines, header);
    },
    InternalExrB44Compressor: function InternalExrB44Compressor(t0, t1) {
      var _ = this;
      _._numScanLines = t0;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t1;
    },
    ExrChannel$: function(input) {
      var t1 = new D.ExrChannel();
      t1.ExrChannel$1(input);
      return t1;
    },
    ExrChannel: function ExrChannel() {
      var _ = this;
      _.__ExrChannel_ySampling = _.__ExrChannel_xSampling = _.__ExrChannel_size = _.__ExrChannel_type = _.name = null;
    },
    JpegAdobe$: function() {
      return new D.JpegAdobe();
    },
    JpegAdobe: function JpegAdobe() {
      this.transformCode = null;
    },
    InternalPngFrame$: function() {
      return new D.InternalPngFrame(H.setRuntimeTypeInfo([], type$.JSArray_int));
    },
    PngFrame: function PngFrame() {
    },
    InternalPngFrame: function InternalPngFrame(t0) {
      this.height = this.width = null;
      this._fdat = t0;
    },
    PsdInnerGlowEffect$: function() {
      return new D.PsdInnerGlowEffect();
    },
    PsdInnerGlowEffect: function PsdInnerGlowEffect() {
      this.version = null;
    },
    WebPInfo$: function() {
      return new D.WebPInfo(H.setRuntimeTypeInfo([], type$.JSArray_WebPFrame));
    },
    InternalWebPInfo$: function() {
      return new D.InternalWebPInfo(H.setRuntimeTypeInfo([], type$.JSArray_WebPFrame));
    },
    WebPInfo: function WebPInfo(t0) {
      var _ = this;
      _.hasAnimation = _.hasAlpha = false;
      _.format = 0;
      _.frames = t0;
      _._numFrames = _._frame = 0;
      _._webp_info$_alphaData = null;
      _.height = _.width = _._vp8Size = _._vp8Position = 0;
    },
    InternalWebPInfo: function InternalWebPInfo(t0) {
      var _ = this;
      _.hasAnimation = _.hasAlpha = false;
      _.format = 0;
      _.frames = t0;
      _._numFrames = _._frame = 0;
      _._webp_info$_alphaData = null;
      _.height = _.width = _._vp8Size = _._vp8Position = 0;
    },
    ICCProfileData$: function($name, compression, data) {
      return new D.ICCProfileData();
    },
    ICCPCompression: function ICCPCompression() {
    },
    ICCProfileData: function ICCProfileData() {
    }
  },
  O = {
    InternalExrPxr24Compressor$: function(header, _maxScanLineSize, _numScanLines) {
      return new O.InternalExrPxr24Compressor(Z.ZLibDecoder$(), _maxScanLineSize, _numScanLines, header);
    },
    InternalExrPxr24Compressor: function InternalExrPxr24Compressor(t0, t1, t2, t3) {
      var _ = this;
      _._zlib = t0;
      _._maxScanLineSize = t1;
      _._exr_pxr24_compressor$_numScanLines = t2;
      _._output = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t3;
    },
    PsdBlendingRanges$: function(input) {
      var t1 = new O.PsdBlendingRanges();
      t1.PsdBlendingRanges$1(input);
      return t1;
    },
    PsdBlendingRanges: function PsdBlendingRanges() {
      var _ = this;
      _.__PsdBlendingRanges_whiteDst = _.__PsdBlendingRanges_blackDst = _.__PsdBlendingRanges_whiteSrc = _.__PsdBlendingRanges_blackSrc = null;
    }
  },
  M = {
    GifColorMap$: function(numColors) {
      var t1 = H.NativeUint8List_NativeUint8List(numColors * 3);
      M.GifColorMap__bitSize(numColors);
      return new M.GifColorMap(numColors, t1);
    },
    GifColorMap__bitSize: function(n) {
      var i;
      for (i = 1; i <= 8; ++i)
        if (C.JSInt_methods._shlPositive$1(1, i) >= n)
          return i;
      return 0;
    },
    GifColorMap: function GifColorMap(t0, t1) {
      this.numColors = t0;
      this.transparent = null;
      this.colors = t1;
    },
    PsdDropShadowEffect$: function() {
      return new M.PsdDropShadowEffect();
    },
    PsdDropShadowEffect: function PsdDropShadowEffect() {
      this.version = null;
    }
  },
  K = {
    GifInfo$: function() {
      return new K.GifInfo(H.setRuntimeTypeInfo([], type$.JSArray_GifImageDesc));
    },
    GifInfo: function GifInfo(t0) {
      var _ = this;
      _.globalColorMap = null;
      _.frames = t0;
      _.height = _.width = 0;
    },
    PsdLayerAdditionalData$: function(tag, data) {
      return new K.PsdLayerAdditionalData(data);
    },
    PsdLayerAdditionalData: function PsdLayerAdditionalData(t0) {
      this.data = t0;
    },
    HdrSlice_allocateDataForType: function(size, type, bitsPerSample) {
      switch (type) {
        case 1:
          if (bitsPerSample === 8)
            return H.NativeInt8List_NativeInt8List(size);
          else if (bitsPerSample === 16)
            return H.NativeInt16List_NativeInt16List(size);
          else if (bitsPerSample === 32)
            return H.NativeInt32List_NativeInt32List(size);
          break;
        case 0:
          if (bitsPerSample === 8)
            return H.NativeUint8List_NativeUint8List(size);
          else if (bitsPerSample === 16)
            return H.NativeUint16List_NativeUint16List(size);
          else if (bitsPerSample === 32)
            return H.NativeUint32List_NativeUint32List(size);
          break;
        case 3:
          if (bitsPerSample === 16)
            return H.NativeUint16List_NativeUint16List(size);
          else if (bitsPerSample === 32)
            return H.NativeFloat32List_NativeFloat32List(size);
          else if (bitsPerSample === 64)
            return H.NativeFloat64List_NativeFloat64List(size);
          break;
      }
      throw H.wrapException(P.UnimplementedError$(null));
    },
    HdrSlice$: function($name, width, height, type, bitsPerSample) {
      return new K.HdrSlice($name, width, height, type, bitsPerSample, K.HdrSlice_allocateDataForType(width * height, type, bitsPerSample));
    },
    HdrSlice: function HdrSlice(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.width = t1;
      _.height = t2;
      _.type = t3;
      _.bitsPerSample = t4;
      _.data = t5;
    },
    ImageException$: function(message) {
      return new K.ImageException(message);
    },
    ImageException: function ImageException(t0) {
      this.message = t0;
    },
    Color_fromRgb: function(red, green, blue) {
      return K.getColor(red, green, blue, 255);
    },
    getColor: function(r, g, b, a) {
      var t2, t3, t4,
        t1 = E.clamp255(a);
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = E.clamp255(b);
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = E.clamp255(g);
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = E.clamp255(r);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
    },
    getRed: function(color) {
      return color & 255;
    },
    getGreen: function(color) {
      return C.JSInt_methods._shrOtherPositive$1(color, 8) & 255;
    },
    getBlue: function(color) {
      return C.JSInt_methods._shrOtherPositive$1(color, 16) & 255;
    },
    getAlpha: function(color) {
      return C.JSInt_methods._shrOtherPositive$1(color, 24) & 255;
    },
    getLuminance: function(color) {
      return C.JSNumber_methods.round$0(0.299 * K.getRed(color) + 0.587 * K.getGreen(color) + 0.114 * K.getBlue(color));
    },
    cmykToRgb: function(c, m, y, k) {
      var t1 = 1 - k / 255;
      return H.setRuntimeTypeInfo([C.JSNumber_methods.round$0(255 * (1 - c / 255) * t1), C.JSNumber_methods.round$0(255 * (1 - m / 255) * t1), C.JSNumber_methods.round$0(255 * (1 - y / 255) * t1)], type$.JSArray_int);
    },
    labToRgb: function(l, a, b) {
      var x3, z3, $R, $G, $B, t1,
        y = (l + 16) / 116,
        x = a / 500 + y,
        z = y - b / 200,
        y3 = P.pow(y, 3);
      y = y3 > 0.008856 ? y3 : (y - 0.13793103448275862) / 7.787;
      x3 = P.pow(x, 3);
      x = x3 > 0.008856 ? x3 : (x - 0.13793103448275862) / 7.787;
      z3 = P.pow(z, 3);
      z = z3 > 0.008856 ? z3 : (z - 0.13793103448275862) / 7.787;
      x = x * 95.047 / 100;
      y = y * 100 / 100;
      z = z * 108.883 / 100;
      $R = x * 3.2406 + y * -1.5372 + z * -0.4986;
      $G = x * -0.9689 + y * 1.8758 + z * 0.0415;
      $B = x * 0.0557 + y * -0.204 + z * 1.057;
      if ($R > 0.0031308) {
        t1 = P.pow($R, 0.4166666666666667);
        if (typeof t1 !== "number")
          return H.iae(t1);
        $R = 1.055 * t1 - 0.055;
      } else
        $R = 12.92 * $R;
      if ($G > 0.0031308) {
        t1 = P.pow($G, 0.4166666666666667);
        if (typeof t1 !== "number")
          return H.iae(t1);
        $G = 1.055 * t1 - 0.055;
      } else
        $G = 12.92 * $G;
      if ($B > 0.0031308) {
        t1 = P.pow($B, 0.4166666666666667);
        if (typeof t1 !== "number")
          return H.iae(t1);
        $B = 1.055 * t1 - 0.055;
      } else
        $B = 12.92 * $B;
      return H.setRuntimeTypeInfo([J.toInt$0$n(C.JSNumber_methods.clamp$2($R * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2($G * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2($B * 255, 0, 255))], type$.JSArray_int);
    }
  },
  F = {
    GifDecoder$: function() {
      var t1 = new F.GifDecoder();
      t1.GifDecoder$1(null);
      return t1;
    },
    GifDecoder: function GifDecoder() {
      var _ = this;
      _._gif_decoder$_prefix = _.__GifDecoder__suffix = _.__GifDecoder__stack = _._gif_decoder$_buffer = _._gif_decoder$_input = _.info = null;
      _._bitsPerPixel = 0;
      _._pixelCount = null;
      _._stackPtr = _._currentShiftState = _._currentShiftDWord = 0;
      _._currentCode = null;
      _._clearCode = _._eofCode = _._runningCode = _._runningBits = _._maxCode1 = _._lastCode = 0;
    },
    PsdSolidFillEffect$: function() {
      return new F.PsdSolidFillEffect();
    },
    PsdSolidFillEffect: function PsdSolidFillEffect() {
      this.version = null;
    },
    HdrImage$: function() {
      return new F.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_String, type$.HdrSlice));
    },
    HdrImage$fromImage: function(other) {
      var t1 = new F.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_String, type$.HdrSlice));
      t1.HdrImage$fromImage$3$bitsPerSample$type(other, 16, 3);
      return t1;
    },
    HdrImage: function HdrImage(t0) {
      var _ = this;
      _.slices = t0;
      _.alpha = _.blue = _.green = _.red = null;
    }
  },
  X = {
    IcoDecoder$: function() {
      return new X.IcoDecoder();
    },
    IcoInfo$: function(images, numFrames, type) {
      return new X.IcoInfo(numFrames, images);
    },
    IcoInfo__read: function(input) {
      var type, imageCount;
      if (!H.boolConversionCheck(J.$eq$(input.readUint16$0(), 0)))
        return null;
      type = input.readUint16$0();
      if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2], type$.JSArray_int), type)))
        return null;
      if (type === 2)
        return null;
      imageCount = input.readUint16$0();
      return X.IcoInfo$(J.toList$0$ax(P.Iterable_Iterable$generate(imageCount, new X.IcoInfo__read_closure(input), type$.IcoInfoImage)), imageCount, type);
    },
    IcoInfoImage$: function(bitsPerPixel, bytesOffset, bytesSize, colorPalette, colorPlanes, height, width) {
      return new X.IcoInfoImage(bytesSize, bytesOffset);
    },
    IcoBmpInfo$: function(p, fileHeader) {
      var t1 = fileHeader == null ? L.BitmapFileHeader$(p) : fileHeader,
        t2 = p.readUint32$0(),
        t3 = p.readInt32$0();
      t2 = new X.IcoBmpInfo(t1, p.readInt32$0(), t3, t2, p.readUint16$0(), p.readUint16$0(), L.BmpInfo__intToCompressions(p.readUint32$0()), p.readUint32$0(), p.readInt32$0(), p.readInt32$0(), p.readUint32$0(), p.readUint32$0());
      t2.BmpInfo$2$fileHeader(p, fileHeader);
      return t2;
    },
    IcoDecoder: function IcoDecoder() {
      this._icoInfo = this._input = null;
    },
    IcoInfo: function IcoInfo(t0, t1) {
      var _ = this;
      _.numFrames = t0;
      _.images = t1;
      _.height = _.width = 0;
    },
    IcoInfo__read_closure: function IcoInfo__read_closure(t0) {
      this.input = t0;
    },
    IcoInfoImage: function IcoInfoImage(t0, t1) {
      this.bytesSize = t0;
      this.bytesOffset = t1;
    },
    IcoBmpInfo: function IcoBmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.file = t0;
      _._height = t1;
      _.BmpInfo_width = t2;
      _.headerSize = t3;
      _.planes = t4;
      _.bpp = t5;
      _.compression = t6;
      _.imageSize = t7;
      _.xppm = t8;
      _.yppm = t9;
      _.totalColors = t10;
      _.importantColors = t11;
      _.colorPalette = _.v5alphaMask = _.v5blueMask = _.v5greenMask = _.v5redMask = null;
      _.height = _.width = 0;
    },
    InternalWebPFrame$: function(input, size) {
      var t1 = input.readUint24$0();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = input.readUint24$0();
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = input.readUint24$0();
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = input.readUint24$0();
      if (typeof t1 !== "number")
        return t1.$add();
      input.readUint24$0();
      t1 = new X.InternalWebPFrame();
      t1.WebPFrame$2(input, size);
      return t1;
    },
    WebPFrame: function WebPFrame() {
    },
    InternalWebPFrame: function InternalWebPFrame() {
      this._reserved = 1;
      this.__WebPFrame__frameSize = this.__WebPFrame__framePosition = null;
    },
    getCrc32: function(array, crc) {
      var ip, ip0, t2,
        t1 = J.getInterceptor$asx(array),
        len = t1.get$length(array);
      crc ^= 4294967295;
      for (ip = 0; len >= 8;) {
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        len -= 8;
      }
      if (len > 0)
        do {
          ip0 = ip + 1;
          t2 = t1.$index(array, ip);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = C.List_B8J[(crc ^ t2) & 255];
          if (typeof t2 !== "number")
            return t2.$xor();
          crc = t2 ^ crc >>> 8;
          if (--len, len > 0) {
            ip = ip0;
            continue;
          } else
            break;
        } while (true);
      return (crc ^ 4294967295) >>> 0;
    }
  },
  V = {PsdEffect: function PsdEffect() {
    },
    PsdDecoder$: function() {
      return new V.PsdDecoder();
    },
    PsdDecoder: function PsdDecoder() {
      this.info = null;
    },
    VP8Filter$: function() {
      var t1 = new V.VP8Filter();
      t1.VP8Filter$0();
      return t1;
    },
    VP8Filter_AVG3: function(a, b, c) {
      return Z.shiftR(a + 2 * b + c + 2, 2);
    },
    VP8Filter_AVG2: function(a, b) {
      return Z.shiftR(a + b + 1, 1);
    },
    VP8Filter_VE4: function(dst) {
      var vals, i;
      type$.InputBuffer._as(dst);
      vals = H.setRuntimeTypeInfo([V.VP8Filter_AVG3(dst.$index(0, -33), dst.$index(0, -32), dst.$index(0, -31)), V.VP8Filter_AVG3(dst.$index(0, -32), dst.$index(0, -31), dst.$index(0, -30)), V.VP8Filter_AVG3(dst.$index(0, -31), dst.$index(0, -30), dst.$index(0, -29)), V.VP8Filter_AVG3(dst.$index(0, -30), dst.$index(0, -29), dst.$index(0, -28))], type$.JSArray_int);
      for (i = 0; i < 4; ++i)
        dst.memcpy$3(i * 32, 4, vals);
    },
    VP8Filter_HE4: function(dst) {
      var $A, $B, $C, $D, $E, d2, t1, t2;
      type$.InputBuffer._as(dst);
      $A = dst.$index(0, -33);
      $B = dst.$index(0, -1);
      $C = dst.$index(0, 31);
      $D = dst.$index(0, 63);
      $E = dst.$index(0, 95);
      d2 = Z.InputBuffer$from(dst, null, 0);
      t1 = d2.toUint32List$0();
      t2 = V.VP8Filter_AVG3($A, $B, $C);
      if (typeof t2 !== "number")
        return H.iae(t2);
      J.$indexSet$ax(t1, 0, 16843009 * t2);
      t2 = d2.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      d2.set$offset(0, t2 + 32);
      t2 = d2.toUint32List$0();
      t1 = V.VP8Filter_AVG3($B, $C, $D);
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(t2, 0, 16843009 * t1);
      t1 = d2.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      d2.set$offset(0, t1 + 32);
      t1 = d2.toUint32List$0();
      t2 = V.VP8Filter_AVG3($C, $D, $E);
      if (typeof t2 !== "number")
        return H.iae(t2);
      J.$indexSet$ax(t1, 0, 16843009 * t2);
      t2 = d2.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      d2.set$offset(0, t2 + 32);
      t2 = d2.toUint32List$0();
      t1 = V.VP8Filter_AVG3($D, $E, $E);
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(t2, 0, 16843009 * t1);
    },
    VP8Filter_DC4: function(dst) {
      var dc, i, t1, t2;
      type$.InputBuffer._as(dst);
      for (dc = 4, i = 0; i < 4; ++i) {
        t1 = dst.$index(0, i - 32);
        t2 = dst.$index(0, -1 + i * 32);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        dc += t1 + t2;
      }
      dc = C.JSInt_methods._shrOtherPositive$1(dc, 3);
      for (i = 0; i < 4; ++i)
        dst.memset$3(i * 32, 4, dc);
    },
    VP8Filter_trueMotion: function(dst, size) {
      var clip0, di, y, clip, x, t2,
        t1 = dst.$index(0, -33);
      if (typeof t1 !== "number")
        return H.iae(t1);
      clip0 = 255 - t1;
      for (di = 0, y = 0; y < size; ++y) {
        t1 = dst.$index(0, di - 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        clip = clip0 + t1;
        for (x = 0; x < size; ++x) {
          t1 = $.$get$VP8Filter_clip1();
          t2 = dst.$index(0, -32 + x);
          if (typeof t2 !== "number")
            return H.iae(t2);
          dst.$indexSet(0, di + x, J.$index$asx(t1, clip + t2));
        }
        di += 32;
      }
    },
    VP8Filter_TM4: function(dst) {
      V.VP8Filter_trueMotion(type$.InputBuffer._as(dst), 4);
    },
    VP8Filter_TM8uv: function(dst) {
      V.VP8Filter_trueMotion(type$.InputBuffer._as(dst), 8);
    },
    VP8Filter_TM16: function(dst) {
      V.VP8Filter_trueMotion(type$.InputBuffer._as(dst), 16);
    },
    VP8Filter_DST: function(x, y) {
      return x + y * 32;
    },
    VP8Filter_RD4: function(dst) {
      var I, $J, $K, $L, $X, $A, $B, $C, $D, t1, t2, t3, t4, t5;
      type$.InputBuffer._as(dst);
      I = dst.$index(0, -1);
      $J = dst.$index(0, 31);
      $K = dst.$index(0, 63);
      $L = dst.$index(0, 95);
      $X = dst.$index(0, -33);
      $A = dst.$index(0, -32);
      $B = dst.$index(0, -31);
      $C = dst.$index(0, -30);
      $D = dst.$index(0, -29);
      dst.$indexSet(0, V.VP8Filter_DST(0, 3), V.VP8Filter_AVG3($J, $K, $L));
      t1 = V.VP8Filter_DST(0, 2);
      t2 = V.VP8Filter_DST(1, 3);
      t3 = V.VP8Filter_AVG3(I, $J, $K);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(0, 1);
      t1 = V.VP8Filter_DST(1, 2);
      t2 = V.VP8Filter_DST(2, 3);
      t4 = V.VP8Filter_AVG3($X, I, $J);
      dst.$indexSet(0, t2, t4);
      dst.$indexSet(0, t1, t4);
      dst.$indexSet(0, t3, t4);
      t4 = V.VP8Filter_DST(0, 0);
      t3 = V.VP8Filter_DST(1, 1);
      t1 = V.VP8Filter_DST(2, 2);
      t2 = V.VP8Filter_DST(3, 3);
      t5 = V.VP8Filter_AVG3($A, $X, I);
      dst.$indexSet(0, t2, t5);
      dst.$indexSet(0, t1, t5);
      dst.$indexSet(0, t3, t5);
      dst.$indexSet(0, t4, t5);
      t5 = V.VP8Filter_DST(1, 0);
      t4 = V.VP8Filter_DST(2, 1);
      t3 = V.VP8Filter_DST(3, 2);
      t1 = V.VP8Filter_AVG3($B, $A, $X);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t4, t1);
      dst.$indexSet(0, t5, t1);
      t1 = V.VP8Filter_DST(2, 0);
      t5 = V.VP8Filter_DST(3, 1);
      t4 = V.VP8Filter_AVG3($C, $B, $A);
      dst.$indexSet(0, t5, t4);
      dst.$indexSet(0, t1, t4);
      dst.$indexSet(0, V.VP8Filter_DST(3, 0), V.VP8Filter_AVG3($D, $C, $B));
    },
    VP8Filter_LD4: function(dst) {
      var $A, $B, $C, $D, $E, $F, $G, $H, t1, t2, t3, t4, t5;
      type$.InputBuffer._as(dst);
      $A = dst.$index(0, -32);
      $B = dst.$index(0, -31);
      $C = dst.$index(0, -30);
      $D = dst.$index(0, -29);
      $E = dst.$index(0, -28);
      $F = dst.$index(0, -27);
      $G = dst.$index(0, -26);
      $H = dst.$index(0, -25);
      dst.$indexSet(0, V.VP8Filter_DST(0, 0), V.VP8Filter_AVG3($A, $B, $C));
      t1 = V.VP8Filter_DST(1, 0);
      t2 = V.VP8Filter_DST(0, 1);
      t3 = V.VP8Filter_AVG3($B, $C, $D);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(2, 0);
      t1 = V.VP8Filter_DST(1, 1);
      t2 = V.VP8Filter_DST(0, 2);
      t4 = V.VP8Filter_AVG3($C, $D, $E);
      dst.$indexSet(0, t2, t4);
      dst.$indexSet(0, t1, t4);
      dst.$indexSet(0, t3, t4);
      t4 = V.VP8Filter_DST(3, 0);
      t3 = V.VP8Filter_DST(2, 1);
      t1 = V.VP8Filter_DST(1, 2);
      t2 = V.VP8Filter_DST(0, 3);
      t5 = V.VP8Filter_AVG3($D, $E, $F);
      dst.$indexSet(0, t2, t5);
      dst.$indexSet(0, t1, t5);
      dst.$indexSet(0, t3, t5);
      dst.$indexSet(0, t4, t5);
      t5 = V.VP8Filter_DST(3, 1);
      t4 = V.VP8Filter_DST(2, 2);
      t3 = V.VP8Filter_DST(1, 3);
      t1 = V.VP8Filter_AVG3($E, $F, $G);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t4, t1);
      dst.$indexSet(0, t5, t1);
      t1 = V.VP8Filter_DST(3, 2);
      t5 = V.VP8Filter_DST(2, 3);
      t4 = V.VP8Filter_AVG3($F, $G, $H);
      dst.$indexSet(0, t5, t4);
      dst.$indexSet(0, t1, t4);
      dst.$indexSet(0, V.VP8Filter_DST(3, 3), V.VP8Filter_AVG3($G, $H, $H));
    },
    VP8Filter_VR4: function(dst) {
      var I, $J, $K, $X, $A, $B, $C, $D, t1, t2, t3;
      type$.InputBuffer._as(dst);
      I = dst.$index(0, -1);
      $J = dst.$index(0, 31);
      $K = dst.$index(0, 63);
      $X = dst.$index(0, -33);
      $A = dst.$index(0, -32);
      $B = dst.$index(0, -31);
      $C = dst.$index(0, -30);
      $D = dst.$index(0, -29);
      t1 = V.VP8Filter_DST(0, 0);
      t2 = V.VP8Filter_DST(1, 2);
      t3 = V.VP8Filter_AVG2($X, $A);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(1, 0);
      t1 = V.VP8Filter_DST(2, 2);
      t2 = V.VP8Filter_AVG2($A, $B);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(2, 0);
      t3 = V.VP8Filter_DST(3, 2);
      t1 = V.VP8Filter_AVG2($B, $C);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(3, 0), V.VP8Filter_AVG2($C, $D));
      dst.$indexSet(0, V.VP8Filter_DST(0, 3), V.VP8Filter_AVG3($K, $J, I));
      dst.$indexSet(0, V.VP8Filter_DST(0, 2), V.VP8Filter_AVG3($J, I, $X));
      t1 = V.VP8Filter_DST(0, 1);
      t2 = V.VP8Filter_DST(1, 3);
      t3 = V.VP8Filter_AVG3(I, $X, $A);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(1, 1);
      t1 = V.VP8Filter_DST(2, 3);
      t2 = V.VP8Filter_AVG3($X, $A, $B);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(2, 1);
      t3 = V.VP8Filter_DST(3, 3);
      t1 = V.VP8Filter_AVG3($A, $B, $C);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(3, 1), V.VP8Filter_AVG3($B, $C, $D));
    },
    VP8Filter_VL4: function(dst) {
      var $A, $B, $C, $D, $E, $F, $G, $H, t1, t2, t3;
      type$.InputBuffer._as(dst);
      $A = dst.$index(0, -32);
      $B = dst.$index(0, -31);
      $C = dst.$index(0, -30);
      $D = dst.$index(0, -29);
      $E = dst.$index(0, -28);
      $F = dst.$index(0, -27);
      $G = dst.$index(0, -26);
      $H = dst.$index(0, -25);
      dst.$indexSet(0, V.VP8Filter_DST(0, 0), V.VP8Filter_AVG2($A, $B));
      t1 = V.VP8Filter_DST(1, 0);
      t2 = V.VP8Filter_DST(0, 2);
      t3 = V.VP8Filter_AVG2($B, $C);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(2, 0);
      t1 = V.VP8Filter_DST(1, 2);
      t2 = V.VP8Filter_AVG2($C, $D);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(3, 0);
      t3 = V.VP8Filter_DST(2, 2);
      t1 = V.VP8Filter_AVG2($D, $E);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(0, 1), V.VP8Filter_AVG3($A, $B, $C));
      t1 = V.VP8Filter_DST(1, 1);
      t2 = V.VP8Filter_DST(0, 3);
      t3 = V.VP8Filter_AVG3($B, $C, $D);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(2, 1);
      t1 = V.VP8Filter_DST(1, 3);
      t2 = V.VP8Filter_AVG3($C, $D, $E);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(3, 1);
      t3 = V.VP8Filter_DST(2, 3);
      t1 = V.VP8Filter_AVG3($D, $E, $F);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(3, 2), V.VP8Filter_AVG3($E, $F, $G));
      dst.$indexSet(0, V.VP8Filter_DST(3, 3), V.VP8Filter_AVG3($F, $G, $H));
    },
    VP8Filter_HU4: function(dst) {
      var I, $J, $K, $L, t1, t2, t3, t4, t5;
      type$.InputBuffer._as(dst);
      I = dst.$index(0, -1);
      $J = dst.$index(0, 31);
      $K = dst.$index(0, 63);
      $L = dst.$index(0, 95);
      dst.$indexSet(0, V.VP8Filter_DST(0, 0), V.VP8Filter_AVG2(I, $J));
      t1 = V.VP8Filter_DST(2, 0);
      t2 = V.VP8Filter_DST(0, 1);
      t3 = V.VP8Filter_AVG2($J, $K);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(2, 1);
      t1 = V.VP8Filter_DST(0, 2);
      t2 = V.VP8Filter_AVG2($K, $L);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      dst.$indexSet(0, V.VP8Filter_DST(1, 0), V.VP8Filter_AVG3(I, $J, $K));
      t2 = V.VP8Filter_DST(3, 0);
      t3 = V.VP8Filter_DST(1, 1);
      t1 = V.VP8Filter_AVG3($J, $K, $L);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      t1 = V.VP8Filter_DST(3, 1);
      t2 = V.VP8Filter_DST(1, 2);
      t3 = V.VP8Filter_AVG3($K, $L, $L);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(3, 2);
      t1 = V.VP8Filter_DST(2, 2);
      t2 = V.VP8Filter_DST(0, 3);
      t4 = V.VP8Filter_DST(1, 3);
      t5 = V.VP8Filter_DST(2, 3);
      dst.$indexSet(0, V.VP8Filter_DST(3, 3), $L);
      dst.$indexSet(0, t5, $L);
      dst.$indexSet(0, t4, $L);
      dst.$indexSet(0, t2, $L);
      dst.$indexSet(0, t1, $L);
      dst.$indexSet(0, t3, $L);
    },
    VP8Filter_HD4: function(dst) {
      var I, $J, $K, $L, $X, $A, $B, $C, t1, t2, t3;
      type$.InputBuffer._as(dst);
      I = dst.$index(0, -1);
      $J = dst.$index(0, 31);
      $K = dst.$index(0, 63);
      $L = dst.$index(0, 95);
      $X = dst.$index(0, -33);
      $A = dst.$index(0, -32);
      $B = dst.$index(0, -31);
      $C = dst.$index(0, -30);
      t1 = V.VP8Filter_DST(0, 0);
      t2 = V.VP8Filter_DST(2, 1);
      t3 = V.VP8Filter_AVG2(I, $X);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(0, 1);
      t1 = V.VP8Filter_DST(2, 2);
      t2 = V.VP8Filter_AVG2($J, I);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(0, 2);
      t3 = V.VP8Filter_DST(2, 3);
      t1 = V.VP8Filter_AVG2($K, $J);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(0, 3), V.VP8Filter_AVG2($L, $K));
      dst.$indexSet(0, V.VP8Filter_DST(3, 0), V.VP8Filter_AVG3($A, $B, $C));
      dst.$indexSet(0, V.VP8Filter_DST(2, 0), V.VP8Filter_AVG3($X, $A, $B));
      t1 = V.VP8Filter_DST(1, 0);
      t2 = V.VP8Filter_DST(3, 1);
      t3 = V.VP8Filter_AVG3(I, $X, $A);
      dst.$indexSet(0, t2, t3);
      dst.$indexSet(0, t1, t3);
      t3 = V.VP8Filter_DST(1, 1);
      t1 = V.VP8Filter_DST(3, 2);
      t2 = V.VP8Filter_AVG3($J, I, $X);
      dst.$indexSet(0, t1, t2);
      dst.$indexSet(0, t3, t2);
      t2 = V.VP8Filter_DST(1, 2);
      t3 = V.VP8Filter_DST(3, 3);
      t1 = V.VP8Filter_AVG3($K, $J, I);
      dst.$indexSet(0, t3, t1);
      dst.$indexSet(0, t2, t1);
      dst.$indexSet(0, V.VP8Filter_DST(1, 3), V.VP8Filter_AVG3($L, $K, $J));
    },
    VP8Filter_VE16: function(dst) {
      var j;
      type$.InputBuffer._as(dst);
      for (j = 0; j < 16; ++j)
        dst.memcpy$4(j * 32, 16, dst, -32);
    },
    VP8Filter_HE16: function(dst) {
      var di, j;
      type$.InputBuffer._as(dst);
      for (di = 0, j = 16; j > 0; --j) {
        dst.memset$3(di, 16, dst.$index(0, di - 1));
        di += 32;
      }
    },
    VP8Filter_Put16: function(v, dst) {
      var j;
      for (j = 0; j < 16; ++j)
        dst.memset$3(j * 32, 16, v);
    },
    VP8Filter_DC16: function(dst) {
      var DC, j, t1, t2;
      type$.InputBuffer._as(dst);
      for (DC = 16, j = 0; j < 16; ++j) {
        t1 = dst.$index(0, -1 + j * 32);
        t2 = dst.$index(0, j - 32);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        DC += t1 + t2;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 5), dst);
    },
    VP8Filter_DC16NoTop: function(dst) {
      var DC, j, t1;
      type$.InputBuffer._as(dst);
      for (DC = 8, j = 0; j < 16; ++j) {
        t1 = dst.$index(0, -1 + j * 32);
        if (typeof t1 !== "number")
          return H.iae(t1);
        DC += t1;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 4), dst);
    },
    VP8Filter_DC16NoLeft: function(dst) {
      var DC, i, t1;
      type$.InputBuffer._as(dst);
      for (DC = 8, i = 0; i < 16; ++i) {
        t1 = dst.$index(0, i - 32);
        if (typeof t1 !== "number")
          return H.iae(t1);
        DC += t1;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 4), dst);
    },
    VP8Filter_DC16NoTopLeft: function(dst) {
      V.VP8Filter_Put16(128, type$.InputBuffer._as(dst));
    },
    VP8Filter_VE8uv: function(dst) {
      var j;
      type$.InputBuffer._as(dst);
      for (j = 0; j < 8; ++j)
        dst.memcpy$4(j * 32, 8, dst, -32);
    },
    VP8Filter_HE8uv: function(dst) {
      var di, j;
      type$.InputBuffer._as(dst);
      for (di = 0, j = 0; j < 8; ++j) {
        dst.memset$3(di, 8, dst.$index(0, di - 1));
        di += 32;
      }
    },
    VP8Filter_Put8x8uv: function(value, dst) {
      var j;
      for (j = 0; j < 8; ++j)
        dst.memset$3(j * 32, 8, value);
    },
    VP8Filter_DC8uv: function(dst) {
      var dc0, i, t1, t2;
      type$.InputBuffer._as(dst);
      for (dc0 = 8, i = 0; i < 8; ++i) {
        t1 = dst.$index(0, i - 32);
        t2 = dst.$index(0, -1 + i * 32);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        dc0 += t1 + t2;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 4), dst);
    },
    VP8Filter_DC8uvNoLeft: function(dst) {
      var dc0, i, t1;
      type$.InputBuffer._as(dst);
      for (dc0 = 4, i = 0; i < 8; ++i) {
        t1 = dst.$index(0, i - 32);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dc0 += t1;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_DC8uvNoTop: function(dst) {
      var dc0, i, t1;
      type$.InputBuffer._as(dst);
      for (dc0 = 4, i = 0; i < 8; ++i) {
        t1 = dst.$index(0, -1 + i * 32);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dc0 += t1;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_DC8uvNoTopLeft: function(dst) {
      V.VP8Filter_Put8x8uv(128, type$.InputBuffer._as(dst));
    },
    VP8Filter__mul: function(a, b) {
      return Z.shiftR(a * b, 16);
    },
    VP8Filter__store: function(dst, di, x, y, v) {
      var t1 = di + x + y * 32,
        t2 = dst.$index(0, t1),
        t3 = C.JSInt_methods._shrOtherPositive$1(v, 3);
      if (typeof t2 !== "number")
        return t2.$add();
      dst.$indexSet(0, t1, V.VP8Filter__clip8b(t2 + t3));
    },
    VP8Filter__store2: function(dst, y, dc, d, c) {
      V.VP8Filter__store(dst, 0, 0, y, dc + d);
      V.VP8Filter__store(dst, 0, 1, y, dc + c);
      V.VP8Filter__store(dst, 0, 2, y, dc - c);
      V.VP8Filter__store(dst, 0, 3, y, dc - d);
    },
    VP8Filter__initTables: function() {
      var i, t1, t2, t3;
      if (!H.boolConversionCheck($.VP8Filter__tablesInitialized)) {
        for (i = -255; i <= 255; ++i) {
          t1 = $.$get$VP8Filter_abs0();
          t2 = 255 + i;
          J.$indexSet$ax(t1, t2, i < 0 ? -i : i);
          t1 = $.$get$VP8Filter_abs1();
          t3 = J.$index$asx($.$get$VP8Filter_abs0(), t2);
          if (typeof t3 !== "number")
            return t3.$shr();
          J.$indexSet$ax(t1, t2, C.JSNumber_methods._shrOtherPositive$1(t3, 1));
        }
        for (i = -1020; i <= 1020; ++i) {
          t1 = $.$get$VP8Filter_sclip1();
          if (i < -128)
            t2 = -128;
          else
            t2 = i > 127 ? 127 : i;
          J.$indexSet$ax(t1, 1020 + i, t2);
        }
        for (i = -112; i <= 112; ++i) {
          t1 = $.$get$VP8Filter_sclip2();
          if (i < -16)
            t2 = -16;
          else
            t2 = i > 15 ? 15 : i;
          J.$indexSet$ax(t1, 112 + i, t2);
        }
        for (i = -255; i <= 510; ++i) {
          t1 = $.$get$VP8Filter_clip1();
          if (i < 0)
            t2 = 0;
          else
            t2 = i > 255 ? 255 : i;
          J.$indexSet$ax(t1, 255 + i, t2);
        }
        $.VP8Filter__tablesInitialized = true;
      }
    },
    VP8Filter__clip8b: function(v) {
      var t1;
      if ((v & -256) >>> 0 === 0)
        t1 = v;
      else
        t1 = v < 0 ? 0 : 255;
      return t1;
    },
    VP8Filter: function VP8Filter() {
    }
  },
  N = {
    PsdOuterGlowEffect$: function() {
      return new N.PsdOuterGlowEffect();
    },
    PsdOuterGlowEffect: function PsdOuterGlowEffect() {
      this.version = null;
    },
    PsdChannel$: function(id, dataLength) {
      return new N.PsdChannel(id);
    },
    PsdChannel$read: function(input, id, width, height, bitDepth, compression, lineLengths, planeNumber) {
      var t1 = new N.PsdChannel(id);
      t1.PsdChannel$read$8(input, id, width, height, bitDepth, compression, lineLengths, planeNumber);
      return t1;
    },
    PsdChannel: function PsdChannel(t0) {
      this.id = t0;
      this.__PsdChannel_data = null;
    },
    PsdMask$: function(input) {
      var t1 = new N.PsdMask();
      t1.PsdMask$1(input);
      return t1;
    },
    PsdMask: function PsdMask() {
    },
    TiffDecoder$: function() {
      return new N.TiffDecoder();
    },
    TiffDecoder: function TiffDecoder() {
      this.__TiffDecoder__input = this.info = null;
    },
    WebPFilters_horizontalUnfilter: function(width, height, stride, row, numRows, data) {
      H._asInt(width);
      H._asInt(height);
      H._asInt(stride);
      H._asInt(row);
      H._asInt(numRows);
      type$.Uint8List._as(data);
      N.WebPFilters__doHorizontalFilter(data, width, height, stride, row, numRows, true, data);
    },
    WebPFilters_verticalUnfilter: function(width, height, stride, row, num_rows, data) {
      H._asInt(width);
      H._asInt(height);
      H._asInt(stride);
      H._asInt(row);
      H._asInt(num_rows);
      type$.Uint8List._as(data);
      N.WebPFilters__doVerticalFilter(data, width, height, stride, row, num_rows, true, data);
    },
    WebPFilters_gradientUnfilter: function(width, height, stride, row, num_rows, data) {
      H._asInt(width);
      H._asInt(height);
      H._asInt(stride);
      H._asInt(row);
      H._asInt(num_rows);
      type$.Uint8List._as(data);
      N.WebPFilters__doGradientFilter(data, width, height, stride, row, num_rows, true, data);
    },
    WebPFilters__predictLine: function(src, pred, dst, $length, inverse) {
      var i, t1, t2;
      if (inverse)
        for (i = 0; i < $length; ++i) {
          t1 = src.$index(0, i);
          t2 = pred.$index(0, i);
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          dst.$indexSet(0, i, t1 + t2);
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = src.$index(0, i);
          t2 = pred.$index(0, i);
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          dst.$indexSet(0, i, t1 - t2);
        }
    },
    WebPFilters__doHorizontalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, t2, t3, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(src, false, _null, startOffset),
        preds = Z.InputBuffer$from(inverse ? o : s, _null, 0);
      if (row === 0) {
        o.$indexSet(0, 0, s.$index(0, 0));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, inverse);
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        preds.set$offset(0, t1 + stride);
        t1 = s.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        s.set$offset(0, t1 + stride);
        t1 = o.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        o.set$offset(0, t1 + stride);
        row = 1;
      }
      for (t1 = -stride, t2 = width - 1; row < lastRow;) {
        N.WebPFilters__predictLine(s, Z.InputBuffer$from(preds, _null, t1), o, 1, inverse);
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), t2, inverse);
        ++row;
        t3 = preds.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        preds.set$offset(0, t3 + stride);
        t3 = s.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        s.set$offset(0, t3 + stride);
        t3 = o.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        o.set$offset(0, t3 + stride);
      }
    },
    WebPFilters__doVerticalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, _null = null,
        startOffset = row * stride,
        last_row = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(out, false, _null, startOffset),
        preds = Z.InputBuffer$from(inverse ? o : s, _null, 0);
      if (row === 0) {
        o.$indexSet(0, 0, s.$index(0, 0));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, inverse);
        t1 = s.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        s.set$offset(0, t1 + stride);
        t1 = o.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        o.set$offset(0, t1 + stride);
        row = 1;
      } else {
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$sub();
        preds.set$offset(0, t1 - stride);
      }
      for (; row < last_row;) {
        N.WebPFilters__predictLine(s, preds, o, width, inverse);
        ++row;
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        preds.set$offset(0, t1 + stride);
        t1 = s.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        s.set$offset(0, t1 + stride);
        t1 = o.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        o.set$offset(0, t1 + stride);
      }
    },
    WebPFilters__gradientPredictor: function(a, b, c) {
      var t1,
        g = a + b - c;
      if ((g & 4294967040) >>> 0 === 0)
        t1 = g;
      else
        t1 = g < 0 ? 0 : 255;
      return t1;
    },
    WebPFilters__doGradientFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, w, t2, pred, t3, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(out, false, _null, startOffset),
        preds = Z.InputBuffer$from(inverse ? o : s, _null, 0);
      if (row === 0) {
        o.$indexSet(0, 0, s.$index(0, 0));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, inverse);
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        preds.set$offset(0, t1 + stride);
        t1 = s.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        s.set$offset(0, t1 + stride);
        t1 = o.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        o.set$offset(0, t1 + stride);
        row = 1;
      }
      for (t1 = -stride; row < lastRow;) {
        N.WebPFilters__predictLine(s, Z.InputBuffer$from(preds, _null, t1), o, 1, inverse);
        for (w = 1; w < width; ++w) {
          t2 = w - stride;
          pred = N.WebPFilters__gradientPredictor(preds.$index(0, w - 1), preds.$index(0, t2), preds.$index(0, t2 - 1));
          t2 = s.$index(0, w);
          t3 = inverse ? pred : -pred;
          if (typeof t2 !== "number")
            return t2.$add();
          o.$indexSet(0, w, t2 + t3);
        }
        ++row;
        t2 = preds.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        preds.set$offset(0, t2 + stride);
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        s.set$offset(0, t2 + stride);
        t2 = o.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.set$offset(0, t2 + stride);
      }
    },
    findDecoderForData: function(data) {
      var png, gif, webp, tiff, psd, exr, bmp, tga, ico,
        bytes = type$.Uint8List._is(data) ? data : H.NativeUint8List_NativeUint8List$fromList(data),
        jpg = Z.JpegDecoder$();
      if (H.boolConversionCheck(jpg.isValidFile$1(bytes)))
        return jpg;
      png = G.PngDecoder$();
      if (H.boolConversionCheck(png.isValidFile$1(bytes)))
        return png;
      gif = F.GifDecoder$();
      if (H.boolConversionCheck(gif.isValidFile$1(bytes)))
        return gif;
      webp = E.WebPDecoder$();
      if (H.boolConversionCheck(webp.isValidFile$1(bytes)))
        return webp;
      tiff = N.TiffDecoder$();
      if (H.boolConversionCheck(tiff.isValidFile$1(bytes)))
        return tiff;
      psd = V.PsdDecoder$();
      if (H.boolConversionCheck(psd.isValidFile$1(bytes)))
        return psd;
      exr = U.ExrDecoder$();
      if (H.boolConversionCheck(exr.isValidFile$1(bytes)))
        return exr;
      bmp = E.BmpDecoder$();
      if (H.boolConversionCheck(bmp.isValidFile$1(bytes)))
        return bmp;
      tga = B.TgaDecoder$();
      if (H.boolConversionCheck(tga.isValidFile$1(bytes)))
        return tga;
      ico = X.IcoDecoder$();
      if (H.boolConversionCheck(ico.isValidFile$1(bytes)))
        return ico;
      return null;
    },
    decodeImage: function(data) {
      var decoder = N.findDecoderForData(data);
      if (decoder == null)
        return null;
      return decoder.decodeImage$1(data);
    },
    encodeJpg: function(image) {
      return Z.JpegEncoder$(100).encodeImage$1(image);
    }
  };
  var holders = [C, H, J, P, W, R, T, Q, G, Y, S, Z, L, E, A, B, U, D, O, M, K, F, X, V, N];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToHumanReadableString(receiver);
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isCropData: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    checkMutable$1: function(receiver, reason) {
      H._asString(reason);
      if (!H.boolConversionCheck(J.JSArray_isMutable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      H._asString(reason);
      if (!H.boolConversionCheck(J.JSArray_isGrowable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkGrowable$1(receiver, "add");
      receiver.push(value);
    },
    removeLast$0: function(receiver) {
      this.checkGrowable$1(receiver, "removeLast");
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      this.checkGrowable$1(receiver, "addAll");
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); H.boolConversionCheck(t1.moveNext$0());)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1: function(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, H._asInt(n), null, H._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1: function(receiver, index) {
      H._asInt(index);
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      H._asIntQ(end);
      H.checkNull(start);
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], H._arrayInstanceType(receiver));
      return J.JSArray_JSArray$markGrowable(receiver.slice(start, end), H._arrayInstanceType(receiver)._precomputed1);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, t2, i;
      H._asInt(start);
      H._asInt(end);
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      H._asInt(skipCount);
      this.checkMutable$1(receiver, "setRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      var t1, i;
      H._asInt(start);
      H._asInt(end);
      t1 = H._arrayInstanceType(receiver);
      t1._eval$1("1?")._as(fillValue);
      this.checkMutable$1(receiver, "fill range");
      P.RangeError_checkValidRange(start, end, receiver.length);
      t1._precomputed1._as(fillValue);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (H.boolConversionCheck(J.$eq$(receiver[i], other)))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    toString$0: function(receiver) {
      return P.ListBase_listToString(receiver);
    },
    toList$1$growable: function(receiver, growable) {
      return H._asBool(growable) ? this._toListGrowable$0(receiver) : this._toListFixed$0(receiver);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    _toListGrowable$0: function(receiver) {
      return J.JSArray_JSArray$markGrowable(receiver.slice(0), H._arrayInstanceType(receiver)._precomputed1);
    },
    _toListFixed$0: function(receiver) {
      return J.JSArray_JSArray$markFixed(receiver.slice(0), H._arrayInstanceType(receiver)._precomputed1);
    },
    get$iterator: function(receiver) {
      return J.ArrayIterator$(receiver, H._arrayInstanceType(receiver)._precomputed1);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      H._asInt(newLength);
      this.checkGrowable$1(receiver, "set length");
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      this.checkMutable$1(receiver, "indexed set");
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!H.boolConversionCheck(J.$eq$(_this._length, $length)))
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t3 = _this._index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, t3));
      t1 = _this._index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_index(t1 + 1);
      return true;
    },
    set$_index: function(_index) {
      this._index = H._asInt(_index);
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative, _this = this;
      H._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = _this.get$isNegative(b);
          if (H.boolConversionCheck(J.$eq$(_this.get$isNegative(receiver), bIsNegative)))
            return 0;
          if (H.boolConversionCheck(_this.get$isNegative(receiver)))
            return -1;
          return 1;
        }
        return 0;
      } else if (H.boolConversionCheck(_this.get$isNaN(receiver))) {
        if (H.boolConversionCheck(_this.get$isNaN(b)))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == 1 / 0 || receiver == -1 / 0;
    },
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    remainder$1: function(receiver, b) {
      H._asNum(b);
      return receiver % b;
    },
    toInt$0: function(receiver) {
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver))
        return this.truncateToDouble$0(receiver) + 0;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    ceilToDouble$0: function(receiver) {
      return Math.ceil(receiver);
    },
    floorToDouble$0: function(receiver) {
      return Math.floor(receiver);
    },
    truncateToDouble$0: function(receiver) {
      return receiver < 0 ? this.ceilToDouble$0(receiver) : this.floorToDouble$0(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      var t1;
      H._asNum(lowerLimit);
      H._asNum(upperLimit);
      t1 = this.compareTo$1(lowerLimit, upperLimit);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      t1 = this.compareTo$1(receiver, lowerLimit);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        return lowerLimit;
      t1 = this.compareTo$1(receiver, upperLimit);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return upperLimit;
      return receiver;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      var result;
      H._asInt(radix);
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (!H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(result, result.length - 1), 41)))
        return result;
      return J.JSNumber__handleIEtoString(result);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod: function(receiver, other) {
      var result;
      H._asNum(other);
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _isInt32$1: function(receiver, value) {
      return (value | 0) === value;
    },
    $tdiv: function(receiver, other) {
      H._asNum(other);
      if (H.boolConversionCheck(this._isInt32$1(receiver, receiver)))
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      H._asNum(other);
      return H.boolConversionCheck(this._isInt32$1(receiver, receiver)) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient;
      H._asNum(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    $shl: function(receiver, other) {
      H._asNum(other);
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shlPositive$1(receiver, other);
    },
    _shlPositive$1: function(receiver, other) {
      H._asNum(other);
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      H._asNum(other);
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrOtherPositive$1(receiver, other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      H._asNum(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      H._asNum(other);
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      H._asNum(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    $negate: function(receiver) {
      return -receiver;
    },
    toSigned$1: function(receiver, width) {
      var signMask = this.$shl(1, H._asInt(width) - 1);
      return ((receiver & signMask - 1) >>> 0) - ((receiver & signMask) >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      H._asInt(index);
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return this._codeUnitAt$1(receiver, index);
    },
    _codeUnitAt$1: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      H._asString(other);
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H._asInt(startIndex);
      H._asIntQ(endIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    $mul: function(receiver, times) {
      var s, result;
      H._asInt(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return H.CodeUnits$(receiver);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  H.LateError.prototype = {
    toString$0: function(_) {
      var message = this._message;
      return message != null ? "LateInitializationError: " + message : "LateInitializationError";
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._string);
    },
    $index: function(_, i) {
      return J.codeUnitAt$1$s(this._string, H._asInt(i));
    }
  };
  H.NotNullableError.prototype = {
    toString$0: function(_) {
      return "Null is not a valid value for the parameter '" + H.S(this.__internal$_name) + "' of type '" + H.S(H.createRuntimeType(this.$ti._precomputed1)) + "'";
    },
    $isTypeError: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return H.ListIterator$(this, H._instanceType(this)._precomputed1);
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (H.boolConversionCheck(J.$eq$(this.get$length(this), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (H.boolConversionCheck(J.$eq$(_this.elementAt$1(0, i), element)))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, H._asInt(count), null, H._instanceType(this)._precomputed1);
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$of(this, H._asBool(growable), H._instanceType(this)._precomputed1);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this.__internal$_start;
      P.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        P.RangeError_checkNotNegative(endOrLength, "end");
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > endOrLength)
          throw H.wrapException(P.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1: function(_, index) {
      var t1, realIndex, _this = this;
      H._asInt(index);
      t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var t1, newStart, endOrLength, _this = this;
      H._asInt(count);
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$add();
      newStart = t1 + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return H.EmptyIterable$(_this.$ti._precomputed1);
      return H.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, endOrLength, $length, result, t3, i, t4, _this = this;
      H._asBool(growable);
      start = _this.__internal$_start;
      t1 = _this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0)
        return P.List_List$empty(growable, _this.$ti._precomputed1);
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (t3 = J.getInterceptor$ax(result), i = 1; i < $length; ++i) {
        t3.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t4 = t2.get$length(t1);
        if (typeof t4 !== "number")
          return t4.$lt();
        if (t4 < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!H.boolConversionCheck(J.$eq$(_this.__internal$_length, $length)))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      t1 = _this.__internal$_index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__internal$_index(t1 + 1);
      return true;
    },
    set$__internal$_index: function(_index) {
      this.__internal$_index = H._asInt(_index);
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return H.MappedIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._precomputed1, t1._rest[1]);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, H._asInt(index)));
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (H.boolConversionCheck(t1.moveNext$0())) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      var t1 = this._skipCount,
        t2 = H._checkCount(H._asInt(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return H.SkipIterable$_(this.__internal$_iterable, t1 + t2, H._instanceType(this)._precomputed1);
    },
    get$iterator: function(_) {
      return H.SkipIterator$(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, H._instanceType(this)._precomputed1);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length,
        t1 = J.get$length$asx(this.__internal$_iterable),
        t2 = this._skipCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      $length = t1 - t2;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      var t1 = this._skipCount,
        t2 = H._checkCount(H._asInt(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return H.EfficientLengthSkipIterable$_(this.__internal$_iterable, t1 + t2, this.$ti._precomputed1);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    SkipIterator$2: function(_iterator, _skipCount, $E) {
    },
    moveNext$0: function() {
      var t2,
        t1 = this._iterator,
        i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(H._asInt(index), 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(H._asInt(count), "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$empty(H._asBool(growable), this.$ti._precomputed1);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      H._asInt(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._asInt(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      H._asInt(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    removeLast$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H._asInt(start);
      H._asInt(end);
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      H._asInt(skipCount);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      H._asInt(start);
      H._asInt(end);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E?")._as(fillValue);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.UnmodifiableListBase.prototype = {$isUnmodifiableListMixin: 1};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(val);
      H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var t1, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = H.JsLinkedHashMap$(t1._precomputed1, t1._rest[1]);
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return J.$index$asx(this._getMap$0(), key);
    },
    forEach$1: function(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      J.forEach$1$z(this._getMap$0(), f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$values: function() {
      return this._getMap$0().get$values();
    },
    get$length: function(_) {
      return J.get$length$asx(this._getMap$0());
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
      return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
    },
    $isNoSuchMethodError: 1
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + H.S(t1) + "' (" + H.S(_this.__js_helper$_message) + ")";
      return _s38_ + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(_this.__js_helper$_message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return H.boolConversionCheck(J.get$isEmpty$asx(t1)) ? "Error" : "Error: " + H.S(t1);
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.S(H.unminifyOrTag($name == null ? "unknown" : $name)) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(type$.Object._as(receiver)));
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return C.JSString_methods.$add("Assertion failed: ", P.Error_safeToString(this.message));
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.__js_helper$_length, 0);
    },
    get$keys: function() {
      return H.LinkedHashMapKeyIterable$(this, H._instanceType(this)._precomputed1);
    },
    get$values: function() {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var t1,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      t1 = this.internalFindBucketIndex$2(this._getBucket$2(rest, key), key);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      var t1 = this._modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this._modifications = t1 + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = H.LinkedHashMapCell$(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        _this._last = t1._next = cell;
      }
      t1 = _this.__js_helper$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$__js_helper$_length(t1 + 1);
      _this._modified$0();
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _getBucket$2: function(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(J.$eq$(bucket[i].hashMapCellKey, key)))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    set$__js_helper$_length: function(_length) {
      this.__js_helper$_length = H._asInt(_length);
    },
    $isInternalMap: 1,
    $isLinkedHashMap: 1,
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    },
    get$_first: function() {
      return this._first;
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this,
        t2 = H.instanceType(t1);
      return t2._rest[1]._as(J.$index$asx(t1, t2._precomputed1._as(each)));
    },
    $signature: function() {
      return H.instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H._asInt(this._map.get$__js_helper$_length());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._map.get$__js_helper$_length(), 0);
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return H.LinkedHashMapKeyIterator$(t1, H._asInt(t1.get$_modifications()), this.$ti._precomputed1);
    },
    contains$1: function(_, element) {
      return H._asBool(this._map.containsKey$1(element));
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2: function(_map, _modifications, $E) {
      this._cell = type$.nullable_LinkedHashMapCell._as(this._map.get$_first());
    },
    get$current: function() {
      return this.$ti._precomputed1._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (!H.boolConversionCheck(J.$eq$(_this._modifications, t1.get$_modifications())))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this.set$_cell(cell._next);
        return true;
      }
    },
    set$_cell: function(_cell) {
      this._cell = type$.nullable_LinkedHashMapCell._as(_cell);
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1,
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 17
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, H._asString(tag));
    },
    $signature: 32
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asString(tag));
    },
    $signature: 31
  };
  H.NativeByteBuffer.prototype = {
    get$lengthInBytes: function(receiver) {
      return receiver.byteLength;
    },
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    asUint8List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeUint8List_NativeUint8List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asInt8List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeInt8List_NativeInt8List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asInt16List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeInt16List_NativeInt16List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asUint32List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeUint32List_NativeUint32List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asInt32List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeInt32List_NativeInt32List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asFloat32List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeFloat32List_NativeFloat32List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    asFloat64List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeFloat64List_NativeFloat64List$view(receiver, H._asInt(offsetInBytes), H._asIntQ($length));
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeTypedData.prototype = {
    get$buffer: function(receiver) {
      return receiver.buffer;
    },
    get$lengthInBytes: function(receiver) {
      return receiver.byteLength;
    },
    get$offsetInBytes: function(receiver) {
      return receiver.byteOffset;
    },
    _invalidPosition$3: function(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(H._asInt(position), 0, H._asInt($length), H._asString($name), null);
      throw H.wrapException(t1);
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      H._asInt(position);
      H._asInt($length);
      H._asString($name);
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    },
    $isNativeByteData: 1,
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var targetLength, count, sourceLength;
      H._asInt(start);
      H._asInt(end);
      type$.NativeTypedArray_dynamic._as(source);
      H._asInt(skipCount);
      targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJSMutableIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asDouble(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H._asInt(start);
      H._asInt(end);
      type$.Iterable_double._as(iterable);
      H._asInt(skipCount);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isFixedLengthListMixin: 1,
    $isListMixin: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asInt(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H._asInt(start);
      H._asInt(end);
      type$.Iterable_int._as(iterable);
      H._asInt(skipCount);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isFixedLengthListMixin: 1,
    $isListMixin: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeFloat32List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeFloat32List: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeFloat64List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeFloat64List: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeInt16List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeInt16List: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeInt32List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeInt32List: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeInt8List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeInt8List: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeUint16List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeUint16List: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeUint32List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeUint32List: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeUint8ClampedList__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    $isNativeUint8ClampedList: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H._asInt(start);
      return H.NativeUint8List__create1(receiver.subarray(start, H._checkValidRange(start, H._asIntQ(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1, $isFixedLengthListMixin: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1, $isFixedLengthListMixin: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._rtiEval(this, H._Utils_asString(recipe));
    },
    _bind$1: function(typeOrTuple) {
      return H._rtiBind(this, H._Utils_asRti(typeOrTuple));
    }
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    _Type$1: function(_rti) {
      H.Rti__setCachedRuntimeType(this._rti, this);
    },
    toString$0: function(_) {
      return H._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  H._Error.prototype = {
    toString$0: function(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {$isTypeError: 1, $isCastError: 1};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 13
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 29
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 11
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 11
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (H.boolConversionCheck(P._hasTimer()))
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 2
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._Completer.prototype = {
    completeError$1: function(error) {
      var replacement, stackTrace,
        t1 = type$.Object;
      t1._as(error);
      H.checkNotNullable(error, "error", t1);
      if (!H.boolConversionCheck(this.future.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = P.Zone_current().errorCallback$2(error, null);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else {
        stackTrace = P.AsyncError_defaultStackTrace(error);
        stackTrace = stackTrace;
      }
      if (stackTrace == null)
        throw H.wrapException("unreachable");
      this._completeError$2(error, stackTrace);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (!H.boolConversionCheck(t2.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    }
  };
  P._FutureListener.prototype = {
    get$_zone: function() {
      return this.result._zone;
    },
    get$handlesValue: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$handlesError: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasErrorTest: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 6;
    },
    get$handlesComplete: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 8;
    },
    get$_onValue: function() {
      return this.$ti._eval$1("2/(1)")._as(this.callback);
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return type$.bool_Function_Object._as(this.callback);
    },
    get$_whenCompleteAction: function() {
      return type$.dynamic_Function._as(this.callback);
    },
    get$hasErrorCallback: function() {
      return this.get$_onError() != null;
    },
    handleValue$1: function(sourceResult) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      t2._as(sourceResult);
      return this.get$_zone().runUnary$2$2(this.get$_onValue(), sourceResult, t1._eval$1("2/"), t2);
    },
    matchesErrorTest$1: function(asyncError) {
      type$.AsyncError._as(asyncError);
      if (!H.boolConversionCheck(this.get$hasErrorTest()))
        return true;
      return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, t3, t4, _this = this;
      type$.AsyncError._as(asyncError);
      errorCallback = _this.errorCallback;
      t1 = type$.dynamic;
      t2 = type$.Object;
      t3 = asyncError.error;
      t4 = _this.$ti._eval$1("2/");
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t4._as(_this.get$_zone().runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t4._as(_this.get$_zone().runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2));
    },
    handleWhenComplete$0: function() {
      return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), type$.dynamic);
    },
    shouldChain$1: function(value) {
      var t1;
      type$.Future_dynamic._as(value);
      t1 = this.$ti;
      return t1._eval$1("Future<2>")._is(value) || !t1._rest[1]._is(value);
    }
  };
  P._Future.prototype = {
    get$_mayComplete: function() {
      return J.$eq$(this._state, 0);
    },
    get$_mayAddListener: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$le();
      return t1 <= 1;
    },
    get$_isChained: function() {
      return J.$eq$(this._state, 2);
    },
    get$_isComplete: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 4;
    },
    get$_hasError: function() {
      return J.$eq$(this._state, 8);
    },
    _setChained$1: function(source) {
      type$._Future_dynamic._as(source);
      this._state = 2;
      this._resultOrListeners = source;
    },
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      type$.nullable_Function._as(onError);
      currentZone = P.Zone_current();
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = P._Future$($R);
      this._addListener$1(P._FutureListener$then(result, f, onError, t1._precomputed1, $R));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _setPendingComplete$0: function() {
      this._state = 1;
    },
    _clearPendingComplete$0: function() {
      this._state = 0;
    },
    get$_error: function() {
      return type$.AsyncError._as(this._resultOrListeners);
    },
    get$_chainSource: function() {
      return type$._Future_dynamic._as(this._resultOrListeners);
    },
    _setValue$1: function(value) {
      this.$ti._precomputed1._as(value);
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      type$.AsyncError._as(error);
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(P.AsyncError$(type$.Object._as(error), type$.StackTrace._as(stackTrace)));
    },
    _cloneResult$1: function(source) {
      type$._Future_dynamic._as(source);
      this.set$_state(source._state);
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1: function(listener) {
      var source, _this = this;
      type$._FutureListener_dynamic_dynamic._as(listener);
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      t1 = type$.nullable__FutureListener_dynamic_dynamic;
      t1._as(listeners);
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        existingListeners = t1._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      type$.nullable__FutureListener_dynamic_dynamic._as(listeners);
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1: function(source) {
      var e, s, exception, _this = this;
      type$.Future_dynamic._as(source);
      _this._setPendingComplete$0();
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(_this), new P._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        _this._setValue$1(t1._precomputed1._as(value));
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._setValue$1(value);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._setPendingComplete$0();
      _this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (H.boolConversionCheck(value.get$_hasError())) {
          _this._setPendingComplete$0();
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this._setPendingComplete$0();
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    set$_state: function(_state) {
      this._state = H._asInt(_state);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._clearPendingComplete$0();
      try {
        t1._completeWithValue$1(H.instanceType(t1)._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 13
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 25
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 2
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 2
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 2
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, t2, originalSource, _this = this, completeResult = null;
      try {
        completeResult = _this._box_0.listener.handleWhenComplete$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (H.boolConversionCheck(_this.hasError)) {
          t1 = _this._box_1.source.get$_error().error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source.get$_error();
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && H.boolConversionCheck(completeResult.get$_isComplete())) {
        if (H.boolConversionCheck(completeResult.get$_hasError())) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult.get$_error();
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 24
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this._box_0;
        t1.listenerValueOrError = t1.listener.handleValue$1(this.sourceResult);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = _this._box_1.source.get$_error();
        t1 = _this._box_0;
        if (H.boolConversionCheck(t1.listener.matchesErrorTest$1(asyncError)) && H.boolConversionCheck(t1.listener.get$hasErrorCallback())) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = t1.source.get$_error().error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1.source.get$_error();
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 2
  };
  P._AsyncCallbackEntry.prototype = {
    set$next: function(next) {
      this.next = type$.nullable__AsyncCallbackEntry._as(next);
    }
  };
  P.Stream.prototype = {
    get$length: function(_) {
      var t1 = {},
        future = P._Future$(type$.int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.instanceType(this.$this)._precomputed1._as(_);
      t1 = this._box_0;
      t2 = t1.count;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.count = t2 + 1;
    },
    $signature: function() {
      return H.instanceType(this.$this)._eval$1("~(1)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 2
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P._ZoneFunction.prototype = {};
  P._Zone.prototype = {
    inSameErrorZone$1: function(otherZone) {
      var t1, t2;
      type$.Zone._as(otherZone);
      if (this !== otherZone) {
        t1 = this.get$errorZone();
        t2 = otherZone.get$errorZone();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $isZone: 1
  };
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      P._rethrow(this.error, this.stackTrace);
    },
    $signature: 2
  };
  P._RootZone.prototype = {
    get$_scheduleMicrotask: function() {
      return C.C__ZoneFunction;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index: function(_, key) {
      return null;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2: function(error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 2
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      J.$indexSet$ax(this.result, this.K._as(k), this.V._as(v));
    },
    $signature: 15
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return H.ListIterator$(receiver, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H._asInt(index));
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    get$first: function(receiver) {
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      var t1;
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      return this.$index(receiver, t1 - 1);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (H.boolConversionCheck(J.$eq$(this.$index(receiver, i), element)))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, H._asInt(count), null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable: function(receiver, growable) {
      var first, result, t1, i, t2, _this = this;
      H._asBool(growable);
      if (H.boolConversionCheck(_this.get$isEmpty(receiver)))
        return P.List_List$empty(growable, H.instanceType(receiver)._eval$1("ListMixin.E"));
      first = _this.$index(receiver, 0);
      result = P.List_List$filled(_this.get$length(receiver), first, growable, H.instanceType(receiver)._eval$1("ListMixin.E"));
      t1 = J.getInterceptor$ax(result);
      i = 1;
      while (true) {
        t2 = _this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    removeLast$0: function(receiver) {
      var t1, result, _this = this;
      if (H.boolConversionCheck(J.$eq$(_this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      result = _this.$index(receiver, t1 - 1);
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$length(receiver, t1 - 1);
      return result;
    },
    sublist$2: function(receiver, start, end) {
      var listLength;
      H._asInt(start);
      H._asIntQ(end);
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength);
      return P.List_List$from(this.getRange$2(receiver, start, end), H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    getRange$2: function(receiver, start, end) {
      H._asInt(start);
      H._asInt(end);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return H.SubListIterable$(receiver, start, end, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    fillRange$3: function(receiver, start, end, fill) {
      var t1, i;
      H._asInt(start);
      H._asInt(end);
      t1 = H.instanceType(receiver);
      fill = t1._eval$1("ListMixin.E")._as(t1._eval$1("ListMixin.E?")._as(fill));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i;
      H._asInt(start);
      H._asInt(end);
      t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      H._asInt(skipCount);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1 = this._box_0;
      if (!H.boolConversionCheck(t1.first))
        this.result.write$1(", ");
      t1.first = false;
      t1 = this.result;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $signature: 7
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t2, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys()), t1 = t1._rest[1]; H.boolConversionCheck(t2.moveNext$0());) {
        key = t2.get$current();
        action.call$2(key, t1._as(this.$index(0, key)));
      }
    },
    containsKey$1: function(key) {
      return J.contains$1$ax(this.get$keys(), key);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$keys());
    },
    get$values: function() {
      var t1 = H._instanceType(this);
      return P._MapBaseValueIterable$(this, t1._precomputed1, t1._rest[1]);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$first: function(_) {
      var t1 = this._collection$_map;
      return this.$ti._rest[1]._as(J.$index$asx(t1, J.get$first$ax(t1.get$keys())));
    },
    get$iterator: function(_) {
      var t1 = this.$ti;
      return P._MapBaseValueIterator$(this._collection$_map, t1._precomputed1, t1._rest[1]);
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (H.boolConversionCheck(t1.moveNext$0())) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function() {
      return this.$ti._rest[1]._as(this._collection$_current);
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  P._ListBase_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.Converter.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      return P._JsonStringStringifier_stringify(object, null, " ");
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var $length, offset, i, charCode, t1, t2, _this = this;
      H._asString(s);
      $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              if (t2 < $length) {
                t2 = C.JSString_methods._codeUnitAt$1(s, t2);
                if (typeof t2 !== "number")
                  return t2.$and();
                t2 = (t2 & 64512) === 56320;
              } else
                t2 = false;
              t2 = !t2;
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                if (t1 >= 0) {
                  t1 = C.JSString_methods.codeUnitAt$1(s, t1);
                  if (typeof t1 !== "number")
                    return t1.$and();
                  t1 = (t1 & 64512) === 55296;
                } else
                  t1 = false;
                t1 = !t1;
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(C.JSInt_methods._shrOtherPositive$1(charCode, 8) & 15));
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(C.JSInt_methods._shrOtherPositive$1(charCode, 4) & 15));
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(charCode & 15));
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(C.JSInt_methods._shrOtherPositive$1(charCode, 4) & 15));
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(charCode & 15));
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t3,
        t1 = this._seen,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = t2.$index(t1, i);
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
        ++i;
      }
      t2.add$1(t1, object);
    },
    _removeSeen$1: function(object) {
      J.removeLast$0$ax(this._seen);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (H.boolConversionCheck(_this.writeJsonValue$1(object)))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!H.boolConversionCheck(_this.writeJsonValue$1(customJson))) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        _this._removeSeen$1(object);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var success, _this = this;
      if (typeof object == "number") {
        if (!H.boolConversionCheck(C.JSNumber_methods.get$isFinite(object)))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        _this._removeSeen$1(object);
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        _this._removeSeen$1(object);
        return success;
      } else
        return false;
    },
    writeList$1: function(list) {
      var t1, i, t2, _this = this;
      type$.List_nullable_Object._as(list);
      _this.writeString$1("[");
      t1 = J.getInterceptor$ax(list);
      if (H.boolConversionCheck(t1.get$isNotEmpty(list))) {
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      type$.Map_of_nullable_Object_and_nullable_Object._as(map);
      if (H.boolConversionCheck(map.get$isEmpty(map))) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map);
      if (typeof t1 !== "number")
        return t1.$mul();
      keyValueList = P.List_List$filled(t1 * 2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!H.boolConversionCheck(_box_0.allStringKeys))
        return false;
      _this.writeString$1("{");
      t1 = J.getInterceptor$asx(keyValueList);
      separator = '"';
      while (true) {
        t2 = t1.get$length(keyValueList);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        _this.writeString$1(separator);
        _this.writeStringContent$1(H._asString(t1.$index(keyValueList, i)));
        _this.writeString$1('":');
        _this.writeObject$1(t1.$index(keyValueList, i + 1));
        i += 2;
        separator = ',"';
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      if (typeof t3 !== "number")
        return t3.$add();
      t2.i = t3 + 1;
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      if (typeof t3 !== "number")
        return t3.$add();
      t2.i = t3 + 1;
      t4.$indexSet(t1, t3, value);
    },
    $signature: 7
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var t1, t2, i, _this = this;
      type$.List_nullable_Object._as(list);
      t1 = J.getInterceptor$asx(list);
      if (H.boolConversionCheck(t1.get$isEmpty(list)))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        t2 = _this._JsonPrettyPrintMixin__indentLevel;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_indentLevel(t2 + 1);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
        _this.writeString$1("\n");
        t1 = _this._JsonPrettyPrintMixin__indentLevel;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_indentLevel(t1 - 1);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      type$.Map_of_nullable_Object_and_nullable_Object._as(map);
      if (H.boolConversionCheck(map.get$isEmpty(map))) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map);
      if (typeof t1 !== "number")
        return t1.$mul();
      keyValueList = P.List_List$filled(t1 * 2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!H.boolConversionCheck(_box_0.allStringKeys))
        return false;
      _this.writeString$1("{\n");
      t1 = _this._JsonPrettyPrintMixin__indentLevel;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_indentLevel(t1 + 1);
      t1 = J.getInterceptor$asx(keyValueList);
      separator = "";
      while (true) {
        t2 = t1.get$length(keyValueList);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(H._asString(t1.$index(keyValueList, i)));
        _this.writeString$1('": ');
        _this.writeObject$1(t1.$index(keyValueList, i + 1));
        i += 2;
        separator = ",\n";
      }
      _this.writeString$1("\n");
      t1 = _this._JsonPrettyPrintMixin__indentLevel;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_indentLevel(t1 - 1);
      _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    },
    set$_indentLevel: function(_indentLevel) {
      this._JsonPrettyPrintMixin__indentLevel = H._asInt(_indentLevel);
    },
    $is_JsonStringifier: 1
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      if (typeof t3 !== "number")
        return t3.$add();
      t2.i = t3 + 1;
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      if (typeof t3 !== "number")
        return t3.$add();
      t2.i = t3 + 1;
      t4.$indexSet(t1, t3, value);
    },
    $signature: 7
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._sink.write$1(C.JSNumber_methods.toString$0(H._asNum(number)));
    },
    writeString$1: function(string) {
      this._sink.write$1(H._asString(string));
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(C.JSString_methods.substring$2(H._asString(string), H._asInt(start), H._asInt(end)));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(H._asInt(charCode));
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, i;
      H._asInt(count);
      for (t1 = this._indent, i = 0; i < count; ++i)
        this.writeString$1(t1);
    },
    $is_JsonPrettyPrintMixin: 1
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {
    set$_indentLevel: function(_indentLevel) {
      this._JsonPrettyPrintMixin__indentLevel = H._asInt(_indentLevel);
    },
    $is_JsonPrettyPrintMixin: 1
  };
  P.DateTime.prototype = {
    get$millisecondsSinceEpoch: function() {
      return this._value;
    },
    get$year: function() {
      return H._asInt(H.Primitives_getYear(this));
    },
    get$month: function() {
      return H._asInt(H.Primitives_getMonth(this));
    },
    get$day: function() {
      return H._asInt(H.Primitives_getDay(this));
    },
    get$hour: function() {
      return H._asInt(H.Primitives_getHours(this));
    },
    get$minute: function() {
      return H._asInt(H.Primitives_getMinutes(this));
    },
    get$second: function() {
      return H._asInt(H.Primitives_getSeconds(this));
    },
    get$millisecond: function() {
      return H._asInt(H.Primitives_getMilliseconds(this));
    },
    get$microsecond: function() {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && H.boolConversionCheck(J.$eq$(this._value, other.get$millisecondsSinceEpoch())) && H.boolConversionCheck(J.$eq$(this.isUtc, other.isUtc));
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var _this = this,
        t1 = J.abs$0$in(_this.get$millisecondsSinceEpoch());
      if (typeof t1 !== "number")
        return t1.$gt();
      if (!(t1 > 864e13))
        t1 = H.boolConversionCheck(J.$eq$(J.abs$0$in(_this.get$millisecondsSinceEpoch()), 864e13)) && !H.boolConversionCheck(J.$eq$(_this.get$microsecond(), 0));
      else
        t1 = true;
      if (t1)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + H.S(_this.get$millisecondsSinceEpoch())));
      H.checkNotNullable(_this.isUtc, "isUtc", type$.bool);
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      if (typeof t1 !== "number")
        return t1.$shr();
      return (t1 ^ C.JSNumber_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(_this.get$year()),
        m = P.DateTime__twoDigits(_this.get$month()),
        d = P.DateTime__twoDigits(_this.get$day()),
        h = P.DateTime__twoDigits(_this.get$hour()),
        min = P.DateTime__twoDigits(_this.get$minute()),
        sec = P.DateTime__twoDigits(_this.get$second()),
        ms = P.DateTime__threeDigits(_this.get$millisecond()),
        us = H.boolConversionCheck(J.$eq$(_this.get$microsecond(), 0)) ? "" : P.DateTime__threeDigits(_this.get$microsecond());
      if (H.boolConversionCheck(_this.isUtc))
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  P.Duration.prototype = {
    get$inHours: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 3600000000);
    },
    get$inMinutes: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 60000000);
    },
    get$inSeconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000000);
    },
    get$inMilliseconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000);
    },
    get$inMicroseconds: function() {
      return this._duration;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && H.boolConversionCheck(J.$eq$(this._duration, other.get$inMicroseconds()));
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs, _this = this,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = _this.get$inMicroseconds();
      if (typeof t2 !== "number")
        return t2.$lt();
      if (t2 < 0)
        return "-" + H.S(_this.$negate(0));
      twoDigitMinutes = t1.call$1(J.remainder$1$n(_this.get$inMinutes(), 60));
      twoDigitSeconds = t1.call$1(J.remainder$1$n(_this.get$inSeconds(), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(J.remainder$1$n(_this.get$inMicroseconds(), 1000000));
      return H.S(_this.get$inHours()) + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
    },
    $negate: function(_) {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$_microseconds(0 - t1);
    },
    $isComparable: 1
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      H._asInt(n);
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 12
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      H._asInt(n);
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 12
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.Primitives_extractStackTrace(this);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + H.S(P.Error_safeToString(t1));
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!H.boolConversionCheck(this._hasValue) ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = H.S(_this.get$_errorName()) + nameString + messageString;
      if (!H.boolConversionCheck(_this._hasValue))
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (H.boolConversionCheck(J.$eq$(t1, 0)))
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    $isRangeError: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + H.S(this.message);
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    },
    $isUnsupportedError: 1
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + H.S(this.message);
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      var message = this.message;
      if (message == null)
        return "Exception";
      return "Exception: " + H.S(message);
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, postfix, start, prefix, slice, _s3_ = "...",
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = J.$add$ns(C.JSString_methods.substring$2(source, 0, 75), _s3_);
          return report + "\n" + H.S(source);
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            postfix = _s3_;
            start = lineStart;
            prefix = "";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = _s3_;
            }
            prefix = _s3_;
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + H.S(C.JSString_methods.$mul(" ", offset - start + prefix.length)) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1
  };
  P.Iterable.prototype = {
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); H.boolConversionCheck(t1.moveNext$0());)
        if (H.boolConversionCheck(J.$eq$(t1.get$current(), element)))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$of(this, H._asBool(growable), H._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; H.boolConversionCheck(it.moveNext$0());)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !H.boolConversionCheck(this.get$iterator(this).moveNext$0());
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, H._asInt(count), H._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      H._asInt(index);
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; H.boolConversionCheck(t1.moveNext$0());) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {
    elementAt$1: function(_, index) {
      H._asInt(index);
      P.RangeError_checkValidIndex(index, this);
      return this._generator.call$1(index);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.Iterator.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToHumanReadableString(this);
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._contents);
    },
    write$1: function(obj) {
      this._writeString$1(H.S(obj));
    },
    writeCharCode$1: function(charCode) {
      this._writeString$1(P.String_String$fromCharCode(H._asInt(charCode)));
    },
    writeAll$2: function(objects, separator) {
      type$.Iterable_dynamic._as(objects);
      H._asString(separator);
      this.set$_contents(P.StringBuffer__writeAll(this._contents, objects, separator));
    },
    toString$0: function(_) {
      return H.Primitives_flattenString(this._contents);
    },
    _writeString$1: function(str) {
      H._asString(str);
      this.set$_contents(H.Primitives_stringConcatUnchecked(this._contents, str));
    },
    set$_contents: function(_contents) {
      this._contents = H._asString(_contents);
    },
    $isStringSink: 1
  };
  W.AbortPaymentEvent.prototype = {$isAbortPaymentEvent: 1};
  W.AnimationEvent.prototype = {$isAnimationEvent: 1};
  W.AnimationPlaybackEvent.prototype = {$isAnimationPlaybackEvent: 1};
  W.ApplicationCacheErrorEvent.prototype = {$isApplicationCacheErrorEvent: 1};
  W.BackgroundFetchClickEvent.prototype = {$isBackgroundFetchClickEvent: 1};
  W.BackgroundFetchEvent.prototype = {$isBackgroundFetchEvent: 1};
  W.BackgroundFetchFailEvent.prototype = {$isBackgroundFetchFailEvent: 1};
  W.BackgroundFetchedEvent.prototype = {$isBackgroundFetchedEvent: 1};
  W.BeforeInstallPromptEvent.prototype = {$isBeforeInstallPromptEvent: 1};
  W.BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BlobEvent.prototype = {$isBlobEvent: 1};
  W.CanMakePaymentEvent.prototype = {$isCanMakePaymentEvent: 1};
  W.ClipboardEvent.prototype = {$isClipboardEvent: 1};
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.CompositionEvent.prototype = {$isCompositionEvent: 1};
  W.CustomEvent.prototype = {$isCustomEvent: 1};
  W.DedicatedWorkerGlobalScope.prototype = {
    postMessage$1: function(receiver, message) {
      this._postMessage_2$1(receiver, P.convertDartToNative_SerializedScriptValue(message));
      return;
    },
    _postMessage_2$1: function(receiver, message) {
      return receiver.postMessage(message);
    },
    get$onMessage: function(receiver) {
      return C.C_EventStreamProvider.forTarget$1(receiver);
    },
    $isDedicatedWorkerGlobalScope: 1
  };
  W.DeviceMotionEvent.prototype = {$isDeviceMotionEvent: 1};
  W.DeviceOrientationEvent.prototype = {$isDeviceOrientationEvent: 1};
  W.DomError.prototype = {$isDomError: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.ErrorEvent.prototype = {$isErrorEvent: 1};
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H._asString(type);
      type$.nullable_dynamic_Function_Event._as(listener);
      H._asBoolQ(useCapture);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      H._asString(type);
      type$.nullable_dynamic_Function_Event._as(listener);
      H._asBoolQ(options);
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), options);
    },
    $isEventTarget: 1
  };
  W.ExtendableEvent.prototype = {$isExtendableEvent: 1};
  W.ExtendableMessageEvent.prototype = {$isExtendableMessageEvent: 1};
  W.FetchEvent.prototype = {$isFetchEvent: 1};
  W.File.prototype = {$isFile: 1};
  W.FocusEvent.prototype = {$isFocusEvent: 1};
  W.FontFaceSetLoadEvent.prototype = {$isFontFaceSetLoadEvent: 1};
  W.ForeignFetchEvent.prototype = {$isForeignFetchEvent: 1};
  W.GamepadEvent.prototype = {$isGamepadEvent: 1};
  W.HashChangeEvent.prototype = {$isHashChangeEvent: 1};
  W.InstallEvent.prototype = {$isInstallEvent: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.MediaEncryptedEvent.prototype = {$isMediaEncryptedEvent: 1};
  W.MediaError.prototype = {$isMediaError: 1};
  W.MediaKeyMessageEvent.prototype = {$isMediaKeyMessageEvent: 1};
  W.MediaQueryListEvent.prototype = {$isMediaQueryListEvent: 1};
  W.MediaStreamEvent.prototype = {$isMediaStreamEvent: 1};
  W.MediaStreamTrackEvent.prototype = {$isMediaStreamTrackEvent: 1};
  W.MessageEvent.prototype = {
    get$data: function(receiver) {
      return P.convertNativeToDart_SerializedScriptValue(this.get$_get_data(receiver));
    },
    get$_get_data: function(receiver) {
      return receiver.data;
    },
    $isMessageEvent: 1
  };
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H._asString(type);
      type$.nullable_dynamic_Function_Event._as(listener);
      H._asBoolQ(useCapture);
      if (type === "message")
        this._start$0(receiver);
      this.super$EventTarget$addEventListener(receiver, type, listener, useCapture);
    },
    _start$0: function(receiver) {
      return receiver.start();
    },
    $isMessagePort: 1
  };
  W.MidiConnectionEvent.prototype = {$isMidiConnectionEvent: 1};
  W.MidiMessageEvent.prototype = {$isMidiMessageEvent: 1};
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.MutationEvent.prototype = {$isMutationEvent: 1};
  W.NavigatorUserMediaError.prototype = {$isNavigatorUserMediaError: 1};
  W.NotificationEvent.prototype = {$isNotificationEvent: 1};
  W.OverconstrainedError.prototype = {$isOverconstrainedError: 1};
  W.PageTransitionEvent.prototype = {$isPageTransitionEvent: 1};
  W.PaymentRequestEvent.prototype = {$isPaymentRequestEvent: 1};
  W.PaymentRequestUpdateEvent.prototype = {$isPaymentRequestUpdateEvent: 1};
  W.PointerEvent.prototype = {$isPointerEvent: 1};
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.PositionError.prototype = {$isPositionError: 1};
  W.PresentationConnectionAvailableEvent.prototype = {$isPresentationConnectionAvailableEvent: 1};
  W.PresentationConnectionCloseEvent.prototype = {$isPresentationConnectionCloseEvent: 1};
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.PromiseRejectionEvent.prototype = {$isPromiseRejectionEvent: 1};
  W.PushEvent.prototype = {$isPushEvent: 1};
  W.RtcDataChannelEvent.prototype = {$isRtcDataChannelEvent: 1};
  W.RtcDtmfToneChangeEvent.prototype = {$isRtcDtmfToneChangeEvent: 1};
  W.RtcPeerConnectionIceEvent.prototype = {$isRtcPeerConnectionIceEvent: 1};
  W.RtcTrackEvent.prototype = {$isRtcTrackEvent: 1};
  W.SecurityPolicyViolationEvent.prototype = {$isSecurityPolicyViolationEvent: 1};
  W.SensorErrorEvent.prototype = {$isSensorErrorEvent: 1};
  W.SpeechRecognitionError.prototype = {$isSpeechRecognitionError: 1};
  W.SpeechRecognitionEvent.prototype = {$isSpeechRecognitionEvent: 1};
  W.SpeechSynthesisEvent.prototype = {$isSpeechSynthesisEvent: 1};
  W.StorageEvent.prototype = {$isStorageEvent: 1};
  W.SyncEvent.prototype = {$isSyncEvent: 1};
  W.TextEvent.prototype = {$isTextEvent: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TrackEvent.prototype = {$isTrackEvent: 1};
  W.TransitionEvent.prototype = {$isTransitionEvent: 1};
  W.UIEvent.prototype = {$isUIEvent: 1};
  W.VRDeviceEvent.prototype = {$isVRDeviceEvent: 1};
  W.VRDisplayEvent.prototype = {$isVRDisplayEvent: 1};
  W.VRSessionEvent.prototype = {$isVRSessionEvent: 1};
  W.WheelEvent.prototype = {$isWheelEvent: 1};
  W.WorkerGlobalScope.prototype = {$isWindowBase64: 1, $isWorkerGlobalScope: 1, $is_WindowTimers: 1};
  W._MojoInterfaceRequestEvent.prototype = {$is_MojoInterfaceRequestEvent: 1};
  W._ResourceProgressEvent.prototype = {$is_ResourceProgressEvent: 1};
  W._USBConnectionEvent.prototype = {$is_USBConnectionEvent: 1};
  W.EventStreamProvider.prototype = {
    forTarget$1: function(e) {
      return W._EventStream$(type$.nullable_EventTarget._as(e), "message", false, this.$ti._precomputed1);
    }
  };
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_Function._as(onError);
      type$.nullable_void_Function._as(onDone);
      H._asBoolQ(cancelOnError);
      return W._EventStreamSubscription$(_this._html$_target, _this._eventType, onData, _this._useCapture, t1._precomputed1);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  W._EventStreamSubscription.prototype = {
    _EventStreamSubscription$4: function(_target, _eventType, onData, _useCapture, $T) {
      this._tryResume$0();
    },
    get$isPaused: function() {
      return false;
    },
    _tryResume$0: function() {
      var t1, _this = this;
      if (_this._onData != null && !H.boolConversionCheck(_this.get$isPaused())) {
        t1 = _this._html$_target;
        t1.toString;
        J.addEventListener$3$x(t1, _this._eventType, _this._onData, _this._useCapture);
      }
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 23
  };
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i, t3,
        t1 = this.values,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        t3 = t2.$index(t1, i);
        if (t3 == null ? value == null : t3 === value)
          return i;
      }
      t2.add$1(t1, value);
      J.add$1$ax(this.copies, null);
      return $length;
    },
    readSlot$1: function(i) {
      return J.$index$asx(this.copies, H._asInt(i));
    },
    writeSlot$2: function(i, x) {
      J.$indexSet$ax(this.copies, H._asInt(i), x);
    },
    cleanupSlots$0: function() {
    },
    walk$1: function(e) {
      var slot, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof P.DateTime)
        return P.convertDartToNative_DateTime(e);
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (H.boolConversionCheck(_this.cloneNotRequired$1(e)))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        copy = t1.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = _this.newJsMap$0();
        t1.copy = copy;
        _this.writeSlot$2(slot, copy);
        e.forEach$1(0, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        copy = t1.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = _this.newJsObject$0();
        t1.copy = copy;
        _this.writeSlot$2(slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var t1, $length, copy, t2, i;
      type$.List_dynamic._as(e);
      H._asInt(slot);
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.newJsList$1($length);
      this.writeSlot$2(slot, copy);
      for (t2 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
        t2.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    },
    convertDartToNative_PrepareForStructuredClone$1: function(value) {
      var copy = this.walk$1(value);
      this.cleanupSlots$0();
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.putIntoMap$3(this._box_0.copy, key, t1.walk$1(value));
    },
    $signature: 15
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.putIntoObject$3(this._box_0.copy, key, t1.walk$1(value));
    },
    $signature: 21
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(this.identicalInJs$2(t2.$index(t1, i), value)))
          return i;
      t2.add$1(t1, value);
      J.add$1$ax(this.copies, null);
      return $length;
    },
    readSlot$1: function(i) {
      return J.$index$asx(this.copies, H._asInt(i));
    },
    writeSlot$2: function(i, x) {
      J.$indexSet$ax(this.copies, H._asInt(i), x);
    },
    walk$1: function(e) {
      var slot, copy, t1, l, $length, t2, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (H.boolConversionCheck(P.isJavaScriptDate(e)))
        return P.convertNativeToDart_DateTime(e);
      if (H.boolConversionCheck(P.isJavaScriptRegExp(e)))
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (H.boolConversionCheck(P.isJavaScriptPromise(e)))
        return P.promiseToFuture(e, type$.dynamic);
      if (H.boolConversionCheck(P.isJavaScriptSimpleObject(e))) {
        slot = _this.findSlot$1(e);
        copy = _box_0.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        t1 = type$.dynamic;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        _box_0.copy = copy;
        _this.writeSlot$2(slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (H.boolConversionCheck(P.isJavaScriptArray(e))) {
        l = e;
        slot = _this.findSlot$1(l);
        copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(l);
        $length = t1.get$length(l);
        copy = H.boolConversionCheck(_this.mustCopy) ? _this.newDartList$1($length) : l;
        _this.writeSlot$2(slot, copy);
        for (t2 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t2.$indexSet(copy, i, _this.walk$1(t1.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = H._asBool(mustCopy);
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 19
  };
  P._StructuredCloneDart2Js.prototype = {
    newJsObject$0: function() {
      return {};
    },
    forEachObjectKey$2: function(object, action) {
      var t1, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = C.JSArray_methods.get$iterator(Object.keys(object)); H.boolConversionCheck(t1.moveNext$0());) {
        key = t1.get$current();
        action.call$2(key, object[key]);
      }
    },
    putIntoObject$3: function(object, key, value) {
      return object[key] = value;
    },
    newJsMap$0: function() {
      return {};
    },
    putIntoMap$3: function(map, key, value) {
      return map[key] = value;
    },
    newJsList$1: function($length) {
      return new Array($length);
    },
    cloneNotRequired$1: function(e) {
      return type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e);
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    newJsList$1: function($length) {
      return new Array($length);
    },
    newDartList$1: function($length) {
      return this.newJsList$1($length);
    },
    identicalInJs$2: function(a, b) {
      return a == null ? b == null : a === b;
    },
    forEachJsField$2: function(object, action) {
      var t1, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = C.JSArray_methods.get$iterator(Object.keys(object)); H.boolConversionCheck(t1.moveNext$0());) {
        key = t1.get$current();
        action.call$2(key, object[key]);
      }
    }
  };
  P.VersionChangeEvent.prototype = {$isVersionChangeEvent: 1};
  P.NullRejectionException.prototype = {
    toString$0: function(_) {
      return "Promise was rejected with a value of `" + (H.boolConversionCheck(this.isUndefined) ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 16
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      if (e == null)
        return this.completer.completeError$1(P.NullRejectionException$_(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 16
  };
  P.AudioProcessingEvent.prototype = {$isAudioProcessingEvent: 1};
  P.OfflineAudioCompletionEvent.prototype = {$isOfflineAudioCompletionEvent: 1};
  P.ContextEvent.prototype = {$isContextEvent: 1};
  P.SqlError.prototype = {$isSqlError: 1};
  R.ArchiveException.prototype = {};
  T.InputStreamBase.prototype = {};
  T.InputStream.prototype = {
    InputStream$4$byteOrder$length$start: function(data, byteOrder, $length, start) {
      this.set$_input_stream$_length($length == null ? J.get$length$asx(this.buffer) : $length);
    },
    get$length: function(_) {
      var t1 = this.get$_input_stream$_length(),
        t2 = this.offset,
        t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - (t2 - t3);
    },
    get$isEOS: function() {
      var t1 = this.offset,
        t2 = this.start,
        t3 = this.get$_input_stream$_length();
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= t2 + t3;
    },
    rewind$1: function($length) {
      var t1, _this = this;
      H._asInt($length);
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$offset(0, t1 - $length);
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        _this.offset = 0;
    },
    $index: function(_, index) {
      var t1;
      H._asInt(index);
      t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return J.$index$asx(this.buffer, t1 + index);
    },
    subset$2: function(position, $length) {
      var t1, t2, _this = this;
      H._asIntQ(position);
      H._asIntQ($length);
      if (position == null)
        position = _this.offset;
      else {
        t1 = _this.start;
        if (typeof t1 !== "number")
          return H.iae(t1);
        position += t1;
      }
      if ($length == null || $length < 0) {
        t1 = _this.get$_input_stream$_length();
        t2 = _this.start;
        if (typeof position !== "number")
          return position.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = t1 - (position - t2);
      }
      return T.InputStream$(_this.buffer, _this.byteOrder, $length, position);
    },
    subset$1: function(position) {
      return this.subset$2(position, null);
    },
    readByte$0: function() {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$offset(0, t1 + 1);
      return J.$index$asx(this.buffer, t1);
    },
    readBytes$1: function(count) {
      var t1, t2, bytes, _this = this;
      H._asInt(count);
      t1 = _this.offset;
      t2 = _this.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      bytes = _this.subset$2(t1 - t2, count);
      t2 = _this.offset;
      t1 = bytes.get$length(bytes);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$offset(0, t2 + t1);
      return bytes;
    },
    readUint32$0: function() {
      var t3, b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t3 = J.getInterceptor$asx(t1);
      t2 = t3.$index(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = t3.$index(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b2 = t2 & 255;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = t3.$index(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = t3.$index(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b4 = t2 & 255;
      if (H.boolConversionCheck(J.$eq$(_this.byteOrder, 1)))
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    get$_input_stream$_length: function() {
      var t1 = this.__InputStream__length;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t1;
    },
    set$_input_stream$_length: function(t1) {
      this.__InputStream__length = H._asInt(t1);
    },
    set$offset: function(_, offset) {
      this.offset = H._asInt(offset);
    }
  };
  Q.OutputStreamBase.prototype = {};
  Q.OutputStream.prototype = {
    get$length: function(_) {
      return this._output_stream$_length;
    },
    set$length: function(_, l) {
      this._output_stream$_length = H._asInt(l);
    },
    getBytes$0: function() {
      return P.Uint8List_Uint8List$view(J.get$buffer$x(this._output_stream$_buffer), 0, this.get$length(this));
    },
    writeByte$1: function(value) {
      var t1, t2, _this = this;
      H._asInt(value);
      if (H.boolConversionCheck(J.$eq$(_this.get$length(_this), J.get$length$asx(_this._output_stream$_buffer))))
        _this._output_stream$_expandBuffer$0();
      t1 = _this._output_stream$_buffer;
      t2 = _this.get$length(_this);
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$length(0, t2 + 1);
      J.$indexSet$ax(t1, t2, value & 255);
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, t3, _this = this;
      type$.List_int._as(bytes);
      len = J.get$length$asx(bytes);
      len = len;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof len !== "number")
          return H.iae(len);
        t2 = J.get$length$asx(_this._output_stream$_buffer);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 + len > t2))
          break;
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = J.get$length$asx(_this._output_stream$_buffer);
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this._output_stream$_expandBuffer$1(t1 + len - t2);
      }
      t1 = _this._output_stream$_buffer;
      t2 = _this.get$length(_this);
      t3 = _this.get$length(_this);
      if (typeof t3 !== "number")
        return t3.$add();
      J.setRange$3$ax(t1, t2, t3 + len, bytes);
      t3 = _this.get$length(_this);
      if (typeof t3 !== "number")
        return t3.$add();
      _this.set$length(0, t3 + len);
    },
    writeInputStream$1: function(stream) {
      var t1, t2, t3, t4, _this = this;
      type$.InputStreamBase._as(stream);
      while (true) {
        t1 = _this.get$length(_this);
        t2 = stream.get$length(stream);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = J.get$length$asx(_this._output_stream$_buffer);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(t1 + t2 > t3))
          break;
        t1 = _this.get$length(_this);
        t2 = stream.get$length(stream);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = J.get$length$asx(_this._output_stream$_buffer);
        if (typeof t3 !== "number")
          return H.iae(t3);
        _this._output_stream$_expandBuffer$1(t1 + t2 - t3);
      }
      t1 = _this._output_stream$_buffer;
      t2 = _this.get$length(_this);
      t3 = _this.get$length(_this);
      t4 = stream.get$length(stream);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      J.setRange$4$ax(t1, t2, t3 + t4, stream.buffer, stream.offset);
      t1 = _this.get$length(_this);
      t2 = stream.get$length(stream);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.set$length(0, t1 + t2);
    },
    subset$2: function(start, end) {
      var t1, _this = this;
      H._asInt(start);
      H._asIntQ(end);
      if (start < 0) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return t1.$add();
        start = t1 + start;
      }
      if (end == null)
        end = _this.get$length(_this);
      else if (end < 0) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return t1.$add();
        end = t1 + end;
      }
      t1 = J.get$buffer$x(_this._output_stream$_buffer);
      if (typeof end !== "number")
        return end.$sub();
      return P.Uint8List_Uint8List$view(t1, start, end - start);
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _output_stream$_expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer, _this = this;
      H._asIntQ(required);
      blockSize = required != null ? required > 32768 ? required : 32768 : 32768;
      t1 = J.get$length$asx(_this._output_stream$_buffer);
      if (typeof t1 !== "number")
        return t1.$add();
      newBuffer = H.NativeUint8List_NativeUint8List((t1 + blockSize) * 2);
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, J.get$length$asx(_this._output_stream$_buffer), _this._output_stream$_buffer);
      _this._output_stream$_buffer = newBuffer;
    },
    _output_stream$_expandBuffer$0: function() {
      return this._output_stream$_expandBuffer$1(null);
    }
  };
  G._ZLibDecoder.prototype = {
    decodeBytes$2$verify: function(data, verify) {
      type$.List_int._as(data);
      H._asBool(verify);
      return this.decodeBuffer$2$verify(T.InputStream$(data, 1, null, 0), verify);
    },
    decodeBuffer$2$verify: function(input, verify) {
      var cmf, flg, method, buffer, adler32;
      type$.InputStream._as(input);
      H._asBool(verify);
      cmf = input.readByte$0();
      flg = input.readByte$0();
      method = cmf & 8;
      C.JSInt_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        throw H.wrapException(R.ArchiveException$("Only DEFLATE compression supported: " + method));
      if (C.JSInt_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw H.wrapException(R.ArchiveException$("Invalid FCHECK"));
      if ((flg >>> 5 & 1) !== 0) {
        input.readUint32$0();
        throw H.wrapException(R.ArchiveException$("FDICT Encoding not currently supported"));
      }
      buffer = S.Inflate$buffer(input).getBytes$0();
      adler32 = input.readUint32$0();
      if (verify)
        if (adler32 !== T.getAdler32(buffer))
          throw H.wrapException(R.ArchiveException$("Invalid adler-32 checksum"));
      return buffer;
    }
  };
  Y.HuffmanTable.prototype = {
    get$table: function() {
      var t1 = this.__HuffmanTable_table;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("table")) : t1;
    },
    set$table: function(t1) {
      this.__HuffmanTable_table = type$.Uint32List._as(t1);
    },
    HuffmanTable$1: function(lengths) {
      var i, t2, t3, size, bitLength, code, skip, rtemp, reversed, j, _this = this,
        t1 = J.getInterceptor$asx(lengths),
        listSize = t1.get$length(lengths);
      for (i = 0; i < listSize; ++i) {
        t2 = t1.$index(lengths, i);
        t3 = _this.maxCodeLength;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 > t3)
          _this.set$maxCodeLength(t1.$index(lengths, i));
        t2 = t1.$index(lengths, i);
        t3 = _this.minCodeLength;
        if (typeof t2 !== "number")
          return t2.$lt();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 < t3)
          _this.set$minCodeLength(t1.$index(lengths, i));
      }
      t2 = _this.maxCodeLength;
      if (typeof t2 !== "number")
        return H.iae(t2);
      size = C.JSInt_methods.$shl(1, t2);
      _this.set$table(H.NativeUint32List_NativeUint32List(size));
      bitLength = 1;
      code = 0;
      skip = 2;
      while (true) {
        t2 = _this.maxCodeLength;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(bitLength <= t2))
          break;
        for (t2 = bitLength << 16, i = 0; i < listSize; ++i)
          if (H.boolConversionCheck(J.$eq$(t1.$index(lengths, i), bitLength))) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t3 = (t2 | i) >>> 0, j = reversed; j < size; j += skip)
              J.$indexSet$ax(_this.get$table(), j, t3);
            ++code;
          }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    set$maxCodeLength: function(maxCodeLength) {
      this.maxCodeLength = H._asInt(maxCodeLength);
    },
    set$minCodeLength: function(minCodeLength) {
      this.minCodeLength = H._asInt(minCodeLength);
    }
  };
  S.Inflate.prototype = {
    get$input: function() {
      var t1 = this.__Inflate_input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("input")) : t1;
    },
    Inflate$2: function(bytes, uncompressedSize) {
      this.inputSet = true;
      this._inflate$0();
    },
    Inflate$buffer$2: function(input, uncompressedSize) {
      this.inputSet = true;
      this._inflate$0();
    },
    getBytes$0: function() {
      return type$.List_int._as(this.output.getBytes$0());
    },
    _inflate$0: function() {
      var _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      if (!H.boolConversionCheck(_this.inputSet))
        return;
      for (; !H.boolConversionCheck(_this.get$input().get$isEOS());)
        if (!_this._parseBlock$0())
          break;
    },
    _parseBlock$0: function() {
      var hdr, btype, _this = this;
      if (H.boolConversionCheck(_this.get$input().get$isEOS()))
        return false;
      hdr = _this._readBits$1(3);
      btype = C.JSInt_methods._shrOtherPositive$1(hdr, 1);
      switch (btype) {
        case 0:
          _this._parseUncompressedBlock$0();
          break;
        case 1:
          _this._parseFixedHuffmanBlock$0();
          break;
        case 2:
          _this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(R.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, octet, t2, t3, _this = this;
      H._asInt($length);
      if ($length === 0)
        return 0;
      while (true) {
        t1 = _this._bitBufferLen;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (!(t1 < $length))
          break;
        if (H.boolConversionCheck(_this.get$input().get$isEOS()))
          throw H.wrapException(R.ArchiveException$("input buffer is broken"));
        octet = _this.get$input().readByte$0();
        t1 = _this._bitBuffer;
        t2 = _this._bitBufferLen;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = C.JSInt_methods.$shl(octet, t2);
        if (typeof t1 !== "number")
          return t1.$or();
        _this._bitBuffer = (t1 | t3) >>> 0;
        _this.set$_bitBufferLen(t2 + 8);
      }
      t1 = _this._bitBuffer;
      t2 = C.JSInt_methods.$shl(1, $length);
      if (typeof t1 !== "number")
        return t1.$and();
      _this._bitBuffer = C.JSNumber_methods.$shr(t1, $length);
      t3 = _this._bitBufferLen;
      if (typeof t3 !== "number")
        return t3.$sub();
      _this.set$_bitBufferLen(t3 - $length);
      return (t1 & t2 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var codeTable, maxCodeLength, t1, octet, t2, t3, codeWithLength, codeLength, _this = this;
      type$.HuffmanTable._as(table);
      codeTable = table.get$table();
      maxCodeLength = table.maxCodeLength;
      while (true) {
        t1 = _this._bitBufferLen;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (!(t1 < maxCodeLength))
          break;
        if (H.boolConversionCheck(_this.get$input().get$isEOS()))
          break;
        octet = _this.get$input().readByte$0();
        t1 = _this._bitBuffer;
        t2 = _this._bitBufferLen;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = C.JSInt_methods.$shl(octet, t2);
        if (typeof t1 !== "number")
          return t1.$or();
        _this._bitBuffer = (t1 | t3) >>> 0;
        _this.set$_bitBufferLen(t2 + 8);
      }
      t1 = _this._bitBuffer;
      t2 = C.JSInt_methods.$shl(1, maxCodeLength);
      if (typeof t1 !== "number")
        return t1.$and();
      t2 = (t1 & t2 - 1) >>> 0;
      if (t2 < 0 || t2 >= codeTable.length)
        return H.ioore(codeTable, t2);
      codeWithLength = codeTable[t2];
      codeLength = C.JSInt_methods._shrOtherPositive$1(codeWithLength, 16);
      _this._bitBuffer = C.JSNumber_methods._shrOtherPositive$1(t1, codeLength);
      t1 = _this._bitBufferLen;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_bitBufferLen(t1 - codeLength);
      return codeWithLength & 65535;
    },
    _parseUncompressedBlock$0: function() {
      var len, t1, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      len = _this._readBits$1(16);
      t1 = _this._readBits$1(16);
      if (typeof t1 !== "number")
        return t1.$xor();
      if (len !== 0 && len !== (t1 ^ 65535) >>> 0)
        throw H.wrapException(R.ArchiveException$("Invalid uncompressed block header"));
      t1 = J.get$length$asx(_this.get$input());
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (len > t1)
        throw H.wrapException(R.ArchiveException$("Input buffer is broken"));
      _this.output.writeInputStream$1(_this.get$input().readBytes$1(len));
    },
    _parseFixedHuffmanBlock$0: function() {
      this._decodeHuffman$2(this._fixedLiteralLengthTable, this._fixedDistanceTable);
    },
    _parseDynamicHuffmanBlock$0: function() {
      var numLitLengthCodes, numDistanceCodes, numCodeLengths, codeLengths, i, codeLengthsTable, litlenLengths, distLengths, litlen, dist, _this = this,
        t1 = _this._readBits$1(5);
      if (typeof t1 !== "number")
        return t1.$add();
      numLitLengthCodes = t1 + 257;
      t1 = _this._readBits$1(5);
      if (typeof t1 !== "number")
        return t1.$add();
      numDistanceCodes = t1 + 1;
      t1 = _this._readBits$1(4);
      if (typeof t1 !== "number")
        return t1.$add();
      numCodeLengths = t1 + 4;
      codeLengths = H.NativeUint8List_NativeUint8List(19);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        C.NativeUint8List_methods.$indexSet(codeLengths, C.List_uSC[i], _this._readBits$1(3));
      }
      codeLengthsTable = Y.HuffmanTable$(codeLengths);
      litlenLengths = H.NativeUint8List_NativeUint8List(numLitLengthCodes);
      distLengths = H.NativeUint8List_NativeUint8List(numDistanceCodes);
      litlen = _this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = _this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      _this._decodeHuffman$2(Y.HuffmanTable$(litlen), Y.HuffmanTable$(dist));
    },
    _decodeHuffman$2: function(litlen, dist) {
      var code, ti, t2, t3, codeLength, distCode, distance, _this = this,
        t1 = type$.HuffmanTable;
      t1._as(litlen);
      t1._as(dist);
      for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code < 0 || code > 285)
          throw H.wrapException(R.ArchiveException$("Invalid Huffman Code " + H.S(code)));
        if (code === 256)
          break;
        if (code < 256) {
          t1.writeByte$1(code & 255);
          continue;
        }
        ti = code - 257;
        if (ti < 0 || ti >= 29)
          return H.ioore(C.List_qQn, ti);
        t2 = C.List_qQn[ti];
        t3 = _this._readBits$1(C.List_eea[ti]);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        codeLength = t2 + t3;
        distCode = _this._readCodeByTable$1(dist);
        if (distCode >= 0 && distCode <= 29) {
          if (distCode >>> 0 !== distCode || distCode >= 30)
            return H.ioore(C.List_i3t, distCode);
          t2 = C.List_i3t[distCode];
          t3 = _this._readBits$1(C.List_X3d0[distCode]);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          distance = t2 + t3;
          for (t2 = -distance; codeLength > distance;) {
            t1.writeBytes$1(t1.subset$1(t2));
            codeLength -= distance;
          }
          if (codeLength === distance)
            t1.writeBytes$1(t1.subset$1(t2));
          else
            t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
        } else
          throw H.wrapException(R.ArchiveException$("Illegal unused distance symbol"));
      }
      while (true) {
        t1 = _this._bitBufferLen;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (!(t1 >= 8))
          break;
        _this.set$_bitBufferLen(t1 - 8);
        _this.get$input().rewind$1(1);
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, t2, repeat, repeat0, i0, _this = this;
      H._asInt(num);
      type$.HuffmanTable._as(table);
      type$.List_int._as(lengths);
      for (t1 = J.getInterceptor$ax(lengths), prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            t2 = _this._readBits$1(2);
            if (typeof t2 !== "number")
              return H.iae(t2);
            repeat = 3 + t2;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1.$indexSet(lengths, i, prev);
            }
            break;
          case 17:
            t2 = _this._readBits$1(3);
            if (typeof t2 !== "number")
              return H.iae(t2);
            repeat = 3 + t2;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1.$indexSet(lengths, i, 0);
            }
            prev = 0;
            break;
          case 18:
            t2 = _this._readBits$1(7);
            if (typeof t2 !== "number")
              return H.iae(t2);
            repeat = 11 + t2;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              t1.$indexSet(lengths, i, 0);
            }
            prev = 0;
            break;
          default:
            if (code < 0 || code > 15)
              throw H.wrapException(R.ArchiveException$("Invalid Huffman Code: " + H.S(code)));
            i0 = i + 1;
            t1.$indexSet(lengths, i, code);
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    },
    set$_bitBufferLen: function(_bitBufferLen) {
      this._bitBufferLen = H._asInt(_bitBufferLen);
    }
  };
  Z.ZLibDecoderBase.prototype = {};
  Z.ZLibDecoder.prototype = {
    decodeBytes$1: function(data) {
      return C.C__ZLibDecoder.decodeBytes$2$verify(type$.List_int._as(data), false);
    }
  };
  Y.CropData.prototype = {};
  Y.main_closure.prototype = {
    call$1: function($event) {
      var bytes, rect, img, t1, response;
      type$.MessageEvent._as($event);
      P.print(H.S(J.get$runtimeType$(C.MessageEvent_methods.get$data($event))));
      bytes = J.$index$asx(C.MessageEvent_methods.get$data($event), 0);
      rect = J.$index$asx(C.MessageEvent_methods.get$data($event), 1);
      P.print("Message received from main script");
      P.print("start decoding");
      img = N.decodeImage(P.List_List$from(type$.Iterable_dynamic._as(bytes), type$.int));
      P.print("stop decoding");
      if (img != null) {
        t1 = J.getInterceptor$asx(rect);
        response = N.encodeJpg(R.copyCrop(img, H._asInt(t1.$index(rect, 0)), H._asInt(t1.$index(rect, 1)), H._asInt(t1.$index(rect, 2)), H._asInt(t1.$index(rect, 3))));
        P.print("Posting message back to main script");
        J.postMessage$1$x(self.self, response);
      }
    },
    $signature: 33
  };
  G.ExifData.prototype = {
    ExifData$from$1: function(other) {
      var t1, _length, _list, i;
      if (other != null && other.rawData != null) {
        t1 = other.rawData;
        t1.toString;
        _length = J.get$length$asx(t1);
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.Uint8List);
        for (i = 0; i < _length; ++i) {
          t1 = other.rawData;
          t1.toString;
          C.JSArray_methods.$indexSet(_list, i, J.sublist$1$ax(J.$index$asx(t1, i), 0));
        }
        this.set$rawData(_list);
      }
    },
    set$rawData: function(rawData) {
      this.rawData = type$.nullable_List_Uint8List._as(rawData);
    }
  };
  L.BitmapCompression.prototype = {
    toString$0: function(_) {
      return this._bmp_info$_name;
    }
  };
  L.BitmapFileHeader.prototype = {
    get$fileLength: function() {
      var t1 = this.__BitmapFileHeader_fileLength;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("fileLength")) : t1;
    },
    set$fileLength: function(t1) {
      this.__BitmapFileHeader_fileLength = H._asInt(t1);
    },
    get$offset: function(_) {
      var t1 = this.__BitmapFileHeader_offset;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("offset")) : t1;
    },
    set$offset: function(_, t1) {
      this.__BitmapFileHeader_offset = H._asInt(t1);
    },
    BitmapFileHeader$1: function(b) {
      if (!H.boolConversionCheck(L.BitmapFileHeader_isValidFile(b)))
        throw H.wrapException(K.ImageException$("Not a bitmap file."));
      b.skip$1(0, 2);
      this.set$fileLength(b.readInt32$0());
      b.skip$1(0, 4);
      this.set$offset(0, b.readInt32$0());
    },
    toJson$0: function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["offset", this.get$offset(this), "fileLength", this.get$fileLength(), "fileType", 19778], type$.String, type$.int);
    }
  };
  L.BmpInfo.prototype = {
    get$ignoreAlphaChannel: function() {
      var t1 = this.headerSize,
        t2 = J.getInterceptor$(t1);
      if (!H.boolConversionCheck(t2.$eq(t1, 40)))
        t1 = H.boolConversionCheck(t2.$eq(t1, 124)) && H.boolConversionCheck(J.$eq$(this.v5alphaMask, 0));
      else
        t1 = true;
      return t1;
    },
    get$readBottomUp: function() {
      return !H.boolConversionCheck(J.get$isNegative$n(this._height));
    },
    get$height: function(_) {
      return J.abs$0$in(this._height);
    },
    BmpInfo$2$fileHeader: function(p, fileHeader) {
      var _this = this;
      if (H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 4, 8], type$.JSArray_int), _this.bpp)))
        _this.readPalette$1(p);
      if (H.boolConversionCheck(J.$eq$(_this.headerSize, 124))) {
        _this.set$v5redMask(p.readUint32$0());
        _this.set$v5greenMask(p.readUint32$0());
        _this.set$v5blueMask(p.readUint32$0());
        _this.set$v5alphaMask(p.readUint32$0());
      }
    },
    readPalette$1: function(p) {
      var colors, t1, _this = this;
      type$.InputBuffer._as(p);
      colors = _this.totalColors;
      if (H.boolConversionCheck(J.$eq$(colors, 0))) {
        t1 = _this.bpp;
        if (typeof t1 !== "number")
          return H.iae(t1);
        colors = C.JSInt_methods.$shl(1, t1);
      }
      _this.set$colorPalette(J.toList$0$ax(P.Iterable_Iterable$generate(colors, new L.BmpInfo_readPalette_closure(_this, p, H.boolConversionCheck(J.$eq$(_this.headerSize, 12)) ? 3 : 4), type$.int)));
    },
    _readRgba$2$aDefault: function(input, aDefault) {
      var b, g, r, a;
      type$.InputBuffer._as(input);
      H._asIntQ(aDefault);
      if (H.boolConversionCheck(this.get$readBottomUp())) {
        b = input.readByte$0();
        g = input.readByte$0();
        r = input.readByte$0();
        a = aDefault == null ? input.readByte$0() : aDefault;
        return K.getColor(r, g, b, H.boolConversionCheck(this.get$ignoreAlphaChannel()) ? 255 : a);
      } else {
        r = input.readByte$0();
        b = input.readByte$0();
        g = input.readByte$0();
        a = aDefault == null ? input.readByte$0() : aDefault;
        return K.getColor(r, b, g, H.boolConversionCheck(this.get$ignoreAlphaChannel()) ? 255 : a);
      }
    },
    _readRgba$1: function(input) {
      return this._readRgba$2$aDefault(input, null);
    },
    decodeRgba$2: function(input, pixel) {
      var b, left, t1, t2, t3, t4, _this = this;
      type$.InputBuffer._as(input);
      type$.void_Function_int._as(pixel);
      if (_this.colorPalette != null)
        if (H.boolConversionCheck(J.$eq$(_this.bpp, 4))) {
          b = input.readByte$0();
          left = C.JSInt_methods._shrOtherPositive$1(b, 4);
          t1 = _this.colorPalette;
          t1.toString;
          pixel.call$1(J.$index$asx(t1, left));
          t1 = _this.colorPalette;
          t1.toString;
          pixel.call$1(J.$index$asx(t1, b & 15));
          return;
        }
      t1 = _this.compression;
      t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, C.BitmapCompression_0)) && H.boolConversionCheck(J.$eq$(_this.bpp, 32)))
        return pixel.call$1(_this._readRgba$1(input));
      else {
        t3 = _this.bpp;
        t4 = J.getInterceptor$(t3);
        if (H.boolConversionCheck(t4.$eq(t3, 32)) && H.boolConversionCheck(t2.$eq(t1, C.BitmapCompression_1)))
          return pixel.call$1(_this._readRgba$1(input));
        else if (H.boolConversionCheck(t4.$eq(t3, 24)))
          return pixel.call$1(_this._readRgba$2$aDefault(input, 255));
        else
          throw H.wrapException(K.ImageException$("Unsupported bpp (" + H.S(t3) + ") or compression unsupported."));
      }
    },
    _compToString$0: function() {
      switch (this.compression) {
        case C.BitmapCompression_0:
          return "BI_BITFIELDS";
        case C.BitmapCompression_1:
          return "none";
      }
    },
    toString$0: function(_) {
      var _this = this;
      return C.C_JsonEncoder.convert$1(P.LinkedHashMap_LinkedHashMap$_literal(["headerSize", _this.headerSize, "width", _this.BmpInfo_width, "height", _this.get$height(_this), "planes", _this.planes, "bpp", _this.bpp, "file", _this.file.toJson$0(), "compression", _this._compToString$0(), "imageSize", _this.imageSize, "xppm", _this.xppm, "yppm", _this.yppm, "totalColors", _this.totalColors, "importantColors", _this.importantColors, "readBottomUp", _this.get$readBottomUp(), "v5redMask", Z.debugBits32(_this.v5redMask), "v5greenMask", Z.debugBits32(_this.v5greenMask), "v5blueMask", Z.debugBits32(_this.v5blueMask), "v5alphaMask", Z.debugBits32(_this.v5alphaMask)], type$.String, type$.Object));
    },
    set$v5redMask: function(v5redMask) {
      this.v5redMask = H._asIntQ(v5redMask);
    },
    set$v5greenMask: function(v5greenMask) {
      this.v5greenMask = H._asIntQ(v5greenMask);
    },
    set$v5blueMask: function(v5blueMask) {
      this.v5blueMask = H._asIntQ(v5blueMask);
    },
    set$v5alphaMask: function(v5alphaMask) {
      this.v5alphaMask = H._asIntQ(v5alphaMask);
    },
    set$colorPalette: function(colorPalette) {
      this.colorPalette = type$.nullable_List_int._as(colorPalette);
    }
  };
  L.BmpInfo_readPalette_closure.prototype = {
    call$1: function(i) {
      var t1;
      H._asInt(i);
      t1 = H.boolConversionCheck(J.$eq$(this.colorBytes, 3)) ? 100 : null;
      return this.$this._readRgba$2$aDefault(this.p, t1);
    },
    $signature: 5
  };
  E.BmpDecoder.prototype = {
    get$_bmp_decoder$_input: function() {
      var t1 = this.__BmpDecoder__input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_input")) : t1;
    },
    set$_bmp_decoder$_input: function(t1) {
      this.__BmpDecoder__input = type$.InputBuffer._as(t1);
    },
    isValidFile$1: function(data) {
      return L.BitmapFileHeader_isValidFile(Z.InputBuffer$(type$.List_int._as(data), false, null, 0));
    },
    startDecode$1: function(bytes) {
      var _this = this;
      type$.List_int._as(bytes);
      if (!H.boolConversionCheck(_this.isValidFile$1(bytes)))
        return null;
      _this.set$_bmp_decoder$_input(Z.InputBuffer$(bytes, false, null, 0));
      return _this.info = L.BmpInfo$(_this.get$_bmp_decoder$_input(), null);
    },
    _pixelDataOffset$0: function() {
      return J.get$offset$z(this.info.file);
    },
    decodeFrame$1: function(frame) {
      var t1, t2, t3, rowStride, image, y, y0, line, row, _box_0, _box_00, _this = this;
      H._asInt(frame);
      J.set$offset$z(_this.get$_bmp_decoder$_input(), _this._pixelDataOffset$0());
      t1 = _this.info;
      t2 = t1.BmpInfo_width;
      t3 = t1.bpp;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      rowStride = C.JSNumber_methods._shrOtherPositive$1(t2 * t3, 3);
      t3 = C.JSInt_methods.$mod(rowStride, 4);
      if (t3 !== 0)
        rowStride += 4 - t3;
      image = U.Image$(t2, J.get$height$z(t1), C.Channels_1, null, null);
      t1 = image.height;
      if (typeof t1 !== "number")
        return t1.$sub();
      y = t1 - 1;
      t1 = image.width;
      y0 = y;
      for (; y0 >= 0; --y0) {
        line = H.boolConversionCheck(_this.info.get$readBottomUp()) ? y0 : y - y0;
        row = _this.get$_bmp_decoder$_input().readBytes$1(rowStride);
        _box_0 = {};
        _box_0.x = 0;
        while (true) {
          t2 = _box_0.x;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(t2 < t1))
            break;
          _this.info.decodeRgba$2(row, new E.BmpDecoder_decodeFrame_closure(_box_0, image, line));
          _box_00 = {};
          _box_00.x = _box_0.x;
          _box_0 = _box_00;
        }
      }
      return image;
    },
    decodeImage$1: function(data) {
      type$.List_int._as(data);
      if (!H.boolConversionCheck(this.isValidFile$1(data)))
        return null;
      this.startDecode$1(data);
      return this.decodeFrame$1(0);
    }
  };
  E.BmpDecoder_decodeFrame_closure.prototype = {
    call$1: function(color) {
      var t1, t2;
      H._asInt(color);
      t1 = this._box_0;
      t2 = t1.x;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.x = t2 + 1;
      return this.image.setPixel$3(t2, this.line, color);
    },
    $signature: 10
  };
  E.DibDecoder.prototype = {
    DibDecoder$2: function(input, info) {
      this.set$_bmp_decoder$_input(input);
      this.info = info;
    }
  };
  A.DecodeInfo.prototype = {
    set$width: function(_, width) {
      this.width = H._asInt(width);
    },
    set$height: function(_, height) {
      this.height = H._asInt(height);
    },
    set$backgroundColor: function(backgroundColor) {
      H._asInt(backgroundColor);
    }
  };
  B.Decoder.prototype = {};
  E.Encoder.prototype = {};
  U.ExrAttribute.prototype = {};
  D.InternalExrB44Compressor.prototype = {
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      throw H.wrapException(K.ImageException$("B44 compression not yet supported."));
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    },
    $isExrB44Compressor: 1
  };
  D.ExrChannel.prototype = {
    get$type: function(_) {
      var t1 = this.__ExrChannel_type;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("type")) : t1;
    },
    set$type: function(_, t1) {
      this.__ExrChannel_type = H._asInt(t1);
    },
    get$size: function(_) {
      var t1 = this.__ExrChannel_size;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("size")) : t1;
    },
    set$size: function(_, t1) {
      this.__ExrChannel_size = H._asInt(t1);
    },
    set$pLinear: function(t1) {
      H._asBool(t1);
    },
    get$xSampling: function() {
      var t1 = this.__ExrChannel_xSampling;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("xSampling")) : t1;
    },
    set$xSampling: function(t1) {
      this.__ExrChannel_xSampling = H._asInt(t1);
    },
    get$ySampling: function() {
      var t1 = this.__ExrChannel_ySampling;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("ySampling")) : t1;
    },
    set$ySampling: function(t1) {
      this.__ExrChannel_ySampling = H._asInt(t1);
    },
    ExrChannel$1: function(input) {
      var t1, _this = this;
      _this.set$name(0, input.readString$0());
      t1 = _this.name;
      if (t1 == null || H.boolConversionCheck(J.get$isEmpty$asx(t1))) {
        _this.name = null;
        return;
      }
      _this.set$type(0, input.readUint32$0());
      _this.set$pLinear(input.readByte$0() === 1);
      input.skip$1(0, 3);
      _this.set$xSampling(input.readUint32$0());
      _this.set$ySampling(input.readUint32$0());
      switch (_this.get$type(_this)) {
        case 0:
          _this.set$size(0, 4);
          break;
        case 1:
          _this.set$size(0, 2);
          break;
        case 2:
          _this.set$size(0, 4);
          break;
        default:
          throw H.wrapException(K.ImageException$("EXR Invalid pixel type: " + H.S(_this.get$type(_this))));
      }
    },
    get$isValid: function() {
      return this.name != null;
    },
    set$name: function(_, $name) {
      this.name = H._asStringQ($name);
    }
  };
  B.ExrCompressor.prototype = {
    uncompress$5: function(input, x, y, width, height) {
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      throw H.wrapException(K.ImageException$("Unsupported compression type"));
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    }
  };
  B.InternalExrCompressor.prototype = {
    get$header: function() {
      return type$.InternalExrPart._as(this._header);
    },
    numSamples$3: function(s, a, b) {
      var a1, b1, t1;
      H._asInt(s);
      H._asInt(a);
      H._asInt(b);
      a1 = C.JSInt_methods.$tdiv(a, s);
      b1 = C.JSInt_methods.$tdiv(b, s);
      t1 = a1 * s < a ? 0 : 1;
      return b1 - a1 + t1;
    }
  };
  Y.ExrHufDec.prototype = {
    set$lit: function(lit) {
      this.lit = H._asInt(lit);
    },
    set$p: function(p) {
      this.p = type$.nullable_List_int._as(p);
    }
  };
  Y.ExrImage.prototype = {
    ExrImage$1: function(bytes) {
      var part, t1, t2, _this = this,
        input = Z.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        throw H.wrapException(K.ImageException$("File is not an OpenEXR image file."));
      _this.set$version(input.readByte$0());
      if (!H.boolConversionCheck(J.$eq$(_this.version, 2)))
        throw H.wrapException(K.ImageException$("Cannot read version " + H.S(_this.version) + " image files."));
      _this.set$flags(input.readUint24$0());
      if (!H.boolConversionCheck(Y.ExrImage__supportsFlags(_this.get$flags())))
        throw H.wrapException(K.ImageException$("The file format version number's flag field contains unrecognized flags."));
      if (!H.boolConversionCheck(_this._isMultiPart$0())) {
        part = S.InternalExrPart$(_this._isTiled$0(), input);
        if (H.boolConversionCheck(part.get$isValid()))
          J.add$1$ax(_this._parts, part);
      } else
        for (t1 = _this._parts, t2 = J.getInterceptor$ax(t1); true;) {
          part = S.InternalExrPart$(_this._isTiled$0(), input);
          if (!H.boolConversionCheck(part.get$isValid()))
            break;
          t2.add$1(t1, part);
        }
      t1 = _this._parts;
      t2 = J.getInterceptor$asx(t1);
      if (H.boolConversionCheck(t2.get$isEmpty(t1)))
        throw H.wrapException(K.ImageException$("Error reading image header"));
      for (t1 = t2.get$iterator(t1); H.boolConversionCheck(t1.moveNext$0());)
        t1.get$current().readOffsets$1(input);
      _this._readImage$1(input);
    },
    getPart$1: function(i) {
      return J.$index$asx(this._parts, H._asInt(i));
    },
    _isTiled$0: function() {
      var t1 = this.get$flags();
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _isMultiPart$0: function() {
      var t1 = this.get$flags();
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 16) !== 0;
    },
    _readImage$1: function(input) {
      var t1, t2, pi, t3, part, framebuffer, t4, ci, t5, ch, t6, t7, t8, t9, _this = this;
      type$.InputBuffer._as(input);
      t1 = _this._parts;
      t2 = J.getInterceptor$asx(t1);
      pi = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(pi < t3))
          break;
        part = t2.$index(t1, pi);
        framebuffer = part.framebuffer;
        t3 = part.channels;
        t4 = J.getInterceptor$asx(t3);
        ci = 0;
        while (true) {
          t5 = t4.get$length(t3);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(ci < t5))
            break;
          ch = t4.$index(t3, ci);
          if (!H.boolConversionCheck(framebuffer.hasChannel$1(ch.name))) {
            t5 = part.width;
            t5.toString;
            _this.set$width(0, t5);
            t5 = part.height;
            t5.toString;
            _this.set$height(0, t5);
            t5 = ch.name;
            t6 = part.width;
            t6.toString;
            t7 = part.height;
            t7.toString;
            t8 = H.boolConversionCheck(J.$eq$(ch.get$type(ch), 0)) ? 0 : 3;
            t9 = ch.get$size(ch);
            if (typeof t9 !== "number")
              return H.iae(t9);
            framebuffer.addSlice$1(K.HdrSlice$(t5, t6, t7, t8, 8 * t9));
          }
          ++ci;
        }
        if (H.boolConversionCheck(part.get$tiled()))
          _this._readTiledPart$2(pi, input);
        else
          _this._readScanlinePart$2(pi, input);
        ++pi;
      }
    },
    _readTiledPart$2: function(pi, input) {
      var part, multiPart, framebuffer, compressor, offsets, imgData, t1, t2, ly, l, t3, lx, ty, oi, t4, tx, tileX, tileY, data, ty0, t5, uncompressedData, tileWidth, tileHeight, len, numChannels, si, yi, ci, ch, slice, tx0, xx, bi, si0, _this = this;
      H._asInt(pi);
      type$.InputBuffer._as(input);
      part = J.$index$asx(_this._parts, pi);
      multiPart = _this._isMultiPart$0();
      framebuffer = part.framebuffer;
      compressor = part.get$compressor();
      offsets = part.get$offsets();
      imgData = Z.InputBuffer$from(input, null, 0);
      t1 = part.channels;
      t2 = J.getInterceptor$asx(t1);
      ly = 0;
      l = 0;
      while (true) {
        t3 = part.get$numYLevels();
        t3.toString;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(ly < t3))
          break;
        lx = 0;
        while (true) {
          t3 = part.get$numXLevels();
          t3.toString;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(lx < t3))
            break;
          t3 = l !== 0;
          ty = 0;
          oi = 0;
          while (true) {
            t4 = part.get$numYTiles();
            t4.toString;
            t4 = J.$index$asx(t4, ly);
            t4.toString;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(ty < t4))
              break;
            tx = 0;
            while (true) {
              t4 = part.get$numXTiles();
              t4.toString;
              t4 = J.$index$asx(t4, lx);
              t4.toString;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(tx < t4))
                break;
              if (t3)
                break;
              offsets.toString;
              t4 = J.$index$asx(offsets, l);
              t4.toString;
              imgData.offset = J.$index$asx(t4, oi);
              if (multiPart)
                if (imgData.readUint32$0() !== pi)
                  throw H.wrapException(K.ImageException$("Invalid Image Data"));
              tileX = imgData.readUint32$0();
              tileY = imgData.readUint32$0();
              imgData.readUint32$0();
              imgData.readUint32$0();
              data = imgData.readBytes$1(imgData.readUint32$0());
              t4 = part.get$tileHeight();
              t4.toString;
              if (typeof t4 !== "number")
                return H.iae(t4);
              ty0 = tileY * t4;
              t4 = part.get$tileWidth();
              t4.toString;
              if (typeof t4 !== "number")
                return H.iae(t4);
              compressor.toString;
              t5 = _this.width;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = _this.height;
              if (typeof t5 !== "number")
                return H.iae(t5);
              uncompressedData = compressor.uncompress$5(data, tileX * t4, ty0, part.get$tileWidth(), part.get$tileHeight());
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              len = uncompressedData.length;
              numChannels = t2.get$length(t1);
              si = 0;
              yi = 0;
              while (true) {
                if (yi < tileHeight) {
                  t4 = _this.height;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  t4 = ty0 < t4;
                } else
                  t4 = false;
                if (!t4)
                  break;
                for (ci = 0; ci < numChannels; ++ci) {
                  ch = t2.$index(t1, ci);
                  slice = framebuffer.$index(0, ch.name).getBytes$0();
                  if (si >= len)
                    break;
                  t4 = part.get$tileWidth();
                  t4.toString;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  tx0 = tileX * t4;
                  for (xx = 0; xx < tileWidth; ++xx, ++tx0) {
                    bi = 0;
                    while (true) {
                      t4 = ch.get$size(ch);
                      if (typeof t4 !== "number")
                        return H.iae(t4);
                      if (!(bi < t4))
                        break;
                      t4 = part.width;
                      t4.toString;
                      if (typeof t4 !== "number")
                        return H.iae(t4);
                      if (tx0 < t4) {
                        t5 = part.height;
                        t5.toString;
                        if (typeof t5 !== "number")
                          return H.iae(t5);
                        t5 = ty0 < t5;
                      } else
                        t5 = false;
                      si0 = si + 1;
                      if (t5) {
                        t5 = ch.get$size(ch);
                        if (typeof t5 !== "number")
                          return H.iae(t5);
                        if (si < 0 || si >= len)
                          return H.ioore(uncompressedData, si);
                        C.NativeUint8List_methods.$indexSet(slice, (ty0 * t4 + tx0) * t5 + bi, uncompressedData[si]);
                      }
                      ++bi;
                      si = si0;
                    }
                  }
                }
                ++yi;
                ++ty0;
              }
              ++tx;
              ++oi;
            }
            ++ty;
          }
          ++lx;
          ++l;
        }
        ++ly;
      }
    },
    _readScanlinePart$2: function(pi, input) {
      var part, multiPart, framebuffer, compressor, t1, linesInBuffer, t2, t3, fbi, imgData, t4, t5, yy, data, uncompressedData, len, numChannels, yi, t6, si, ci, ch, slice, xx, bi, si0;
      H._asInt(pi);
      type$.InputBuffer._as(input);
      part = J.$index$asx(this._parts, pi);
      multiPart = this._isMultiPart$0();
      framebuffer = part.framebuffer;
      compressor = part.get$compressor();
      t1 = part.get$offsets();
      t1.toString;
      t1 = J.$index$asx(t1, 0);
      t1.toString;
      linesInBuffer = part.get$linesInBuffer();
      t2 = part.channels;
      t3 = J.getInterceptor$asx(t2);
      fbi = H.NativeUint32List_NativeUint32List(t3.get$length(t2));
      imgData = Z.InputBuffer$from(input, null, 0);
      for (t1 = C.NativeUint32List_methods.get$iterator(t1), t4 = fbi.length, t5 = compressor != null, yy = 0; H.boolConversionCheck(t1.moveNext$0());) {
        imgData.offset = t1.get$current();
        if (multiPart)
          if (imgData.readUint32$0() !== pi)
            throw H.wrapException(K.ImageException$("Invalid Image Data"));
        imgData.readInt32$0();
        data = imgData.readBytes$1(imgData.readInt32$0());
        uncompressedData = t5 ? compressor.uncompress$3(data, 0, yy) : data.toUint8List$0();
        len = uncompressedData.length;
        numChannels = t3.get$length(t2);
        linesInBuffer.toString;
        yi = 0;
        while (true) {
          if (yi < linesInBuffer) {
            t6 = this.height;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = yy < t6;
          } else
            t6 = false;
          if (!t6)
            break;
          t6 = part.get$offsetInLineBuffer();
          t6.toString;
          si = J.$index$asx(t6, yy);
          if (si >= len)
            break;
          for (ci = 0; ci < numChannels; ++ci) {
            ch = t3.$index(t2, ci);
            slice = framebuffer.$index(0, ch.name).getBytes$0();
            if (si >= len)
              break;
            xx = 0;
            while (true) {
              t6 = part.width;
              t6.toString;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (!(xx < t6))
                break;
              bi = 0;
              while (true) {
                t6 = ch.get$size(ch);
                if (typeof t6 !== "number")
                  return H.iae(t6);
                if (!(bi < t6))
                  break;
                if (ci >= t4)
                  return H.ioore(fbi, ci);
                t6 = fbi[ci];
                if (typeof t6 !== "number")
                  return t6.$add();
                C.NativeUint32List_methods.$indexSet(fbi, ci, t6 + 1);
                si0 = si + 1;
                if (si < 0 || si >= len)
                  return H.ioore(uncompressedData, si);
                C.NativeUint8List_methods.$indexSet(slice, t6, uncompressedData[si]);
                ++bi;
                si = si0;
              }
              ++xx;
            }
          }
          ++yi;
          ++yy;
        }
      }
    },
    get$flags: function() {
      var t1 = this.__ExrImage_flags;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("flags")) : t1;
    },
    set$flags: function(t1) {
      this.__ExrImage_flags = H._asInt(t1);
    },
    set$version: function(version) {
      this.version = H._asIntQ(version);
    }
  };
  S.ExrPart.prototype = {
    get$dataWindow: function() {
      var t1 = this.__ExrPart_dataWindow;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("dataWindow")) : t1;
    },
    set$dataWindow: function(t1) {
      this.set$__ExrPart_dataWindow(type$.List_int._as(t1));
    },
    get$chromaticities: function() {
      var t1 = this.__ExrPart_chromaticities;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("chromaticities")) : t1;
    },
    set$chromaticities: function(t1) {
      this.__ExrPart_chromaticities = type$.Float32List._as(t1);
    },
    ExrPart$2: function(_tiled, input, _box_0) {
      var t1, t2, t3, t4, t5, $name, type, size, value, channel, t6, t7, mode, s, nBytes, y, maxBytesPerLine, offset, i, _this = this;
      for (t1 = _this.attributes, t2 = J.getInterceptor$ax(t1), t3 = type$.JSArray_int, t4 = _this.channels, t5 = J.getInterceptor$ax(t4); true;) {
        $name = input.readString$0();
        if (H.boolConversionCheck(C.JSString_methods.get$isEmpty($name)))
          break;
        type = input.readString$0();
        size = input.readUint32$0();
        value = input.readBytes$1(size);
        t2.$indexSet(t1, $name, U.ExrAttribute$($name, type, size, value));
        switch ($name) {
          case "channels":
            for (; true;) {
              channel = D.ExrChannel$(value);
              if (!H.boolConversionCheck(channel.get$isValid()))
                break;
              t5.add$1(t4, channel);
            }
            break;
          case "chromaticities":
            _this.set$chromaticities(H.NativeFloat32List_NativeFloat32List(8));
            J.$indexSet$ax(_this.get$chromaticities(), 0, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 1, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 2, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 3, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 4, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 5, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 6, value.readFloat32$0());
            J.$indexSet$ax(_this.get$chromaticities(), 7, value.readFloat32$0());
            break;
          case "compression":
            _this.set$_compressionType(value.readByte$0());
            t6 = _this._compressionType;
            if (typeof t6 !== "number")
              return t6.$gt();
            if (t6 > 7)
              throw H.wrapException(K.ImageException$("EXR Invalid compression type"));
            break;
          case "dataWindow":
            _this.set$dataWindow(H.setRuntimeTypeInfo([value.readInt32$0(), value.readInt32$0(), value.readInt32$0(), value.readInt32$0()], t3));
            t6 = J.$index$asx(_this.get$dataWindow(), 2);
            t7 = J.$index$asx(_this.get$dataWindow(), 0);
            if (typeof t6 !== "number")
              return t6.$sub();
            if (typeof t7 !== "number")
              return H.iae(t7);
            _this.set$width(0, t6 - t7 + 1);
            t7 = J.$index$asx(_this.get$dataWindow(), 3);
            t6 = J.$index$asx(_this.get$dataWindow(), 1);
            if (typeof t7 !== "number")
              return t7.$sub();
            if (typeof t6 !== "number")
              return H.iae(t6);
            _this.set$height(0, t7 - t6 + 1);
            break;
          case "displayWindow":
            _this.set$displayWindow(H.setRuntimeTypeInfo([value.readInt32$0(), value.readInt32$0(), value.readInt32$0(), value.readInt32$0()], t3));
            break;
          case "lineOrder":
            break;
          case "pixelAspectRatio":
            _this.set$pixelAspectRatio(value.readFloat32$0());
            break;
          case "screenWindowCenter":
            _this.set$screenWindowCenterX(value.readFloat32$0());
            _this.set$screenWindowCenterY(value.readFloat32$0());
            break;
          case "screenWindowWidth":
            _this.set$screenWindowWidth(value.readFloat32$0());
            break;
          case "tiles":
            _this.set$_tileWidth(value.readUint32$0());
            _this.set$_tileHeight(value.readUint32$0());
            mode = value.readByte$0();
            _this._tileLevelMode = mode & 15;
            _this._tileRoundingMode = C.JSInt_methods._shrOtherPositive$1(mode, 4) & 15;
            break;
          case "type":
            s = value.readString$0();
            if (s !== "deepscanline")
              if (s !== "deeptile")
                throw H.wrapException(K.ImageException$("EXR Invalid type: " + s));
            break;
          default:
            break;
        }
      }
      if (H.boolConversionCheck(_this._tiled)) {
        _this.set$_numXLevels(_this._calculateNumXLevels$4(_this.get$left(), _this.get$right(), _this.get$top(), _this.get$bottom()));
        _this.set$_numYLevels(_this._calculateNumYLevels$4(_this.get$left(), _this.get$right(), _this.get$top(), _this.get$bottom()));
        if (!H.boolConversionCheck(J.$eq$(_this._tileLevelMode, 2)))
          _this._numYLevels = 1;
        t1 = _this._numXLevels;
        t1.toString;
        _this.set$_numXTiles(_this._calculateNumTiles$5(t1, _this.get$left(), _this.get$right(), _this._tileWidth, _this._tileRoundingMode));
        t1 = _this._numYLevels;
        t1.toString;
        _this.set$_numYTiles(_this._calculateNumTiles$5(t1, _this.get$top(), _this.get$bottom(), _this._tileHeight, _this._tileRoundingMode));
        _this.set$_bytesPerPixel(_this._calculateBytesPerPixel$0());
        t1 = _this.get$_bytesPerPixel();
        t2 = _this._tileWidth;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this.set$_maxBytesPerTileLine(t1 * t2);
        _this.set$_compressor(B.ExrCompressor_ExrCompressor(_this._compressionType, _this, _this._maxBytesPerTileLine, _this._tileHeight));
        _box_0.ly = _box_0.lx = 0;
        t2 = _this._numXLevels;
        t2.toString;
        t1 = _this._numYLevels;
        t1.toString;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t1 !== "number")
          return H.iae(t1);
        _this.set$_offsets(P.List_List$generate(t2 * t1, new S.ExrPart_closure(_box_0, _this), true, type$.Uint32List));
      } else {
        t1 = _this.height;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_bytesPerLine(H.NativeUint32List_NativeUint32List(t1 + 1));
        for (t1 = t5.get$iterator(t4); H.boolConversionCheck(t1.moveNext$0());) {
          t2 = t1.get$current();
          t3 = t2.get$size(t2);
          t4 = _this.width;
          t4.toString;
          if (typeof t3 !== "number")
            return t3.$mul();
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = t2.get$xSampling();
          if (typeof t5 !== "number")
            return H.iae(t5);
          nBytes = C.JSNumber_methods.$tdiv(t3 * t4, t5);
          y = 0;
          while (true) {
            t3 = _this.height;
            t3.toString;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(y < t3))
              break;
            t3 = _this.get$top();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t4 = t2.get$ySampling();
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (C.JSNumber_methods.$mod(y + t3, t4) === 0) {
              t3 = _this.get$_bytesPerLine();
              t4 = J.getInterceptor$asx(t3);
              t5 = t4.$index(t3, y);
              if (typeof t5 !== "number")
                return t5.$add();
              t4.$indexSet(t3, y, t5 + nBytes);
            }
            ++y;
          }
        }
        t1 = type$.int;
        maxBytesPerLine = 0;
        y = 0;
        while (true) {
          t2 = _this.height;
          t2.toString;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(y < t2))
            break;
          maxBytesPerLine = P.max(maxBytesPerLine, J.$index$asx(_this.get$_bytesPerLine(), y), t1);
          ++y;
        }
        _this.set$_compressor(B.ExrCompressor_ExrCompressor(_this._compressionType, _this, maxBytesPerLine, null));
        _this.set$_linesInBuffer(_this._compressor.numScanLines$0());
        _this.set$_offsetInLineBuffer(H.NativeUint32List_NativeUint32List(J.get$length$asx(_this.get$_bytesPerLine())));
        offset = 0;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(_this.get$_bytesPerLine());
          if (typeof t1 !== "number")
            return t1.$sub();
          if (!(i <= t1 - 1))
            break;
          t1 = _this._linesInBuffer;
          t1.toString;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (C.JSInt_methods.$mod(i, t1) === 0)
            offset = 0;
          t1 = _this._offsetInLineBuffer;
          t1.toString;
          J.$indexSet$ax(t1, i, offset);
          t1 = J.$index$asx(_this.get$_bytesPerLine(), i);
          if (typeof t1 !== "number")
            return H.iae(t1);
          offset += t1;
          ++i;
        }
        t1 = _this.height;
        t1.toString;
        t2 = _this._linesInBuffer;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this.set$_offsets(H.setRuntimeTypeInfo([H.NativeUint32List_NativeUint32List(C.JSNumber_methods.$tdiv(t1 + t2, t2) - 1)], type$.JSArray_nullable_Uint32List));
      }
    },
    get$left: function() {
      return J.$index$asx(this.get$dataWindow(), 0);
    },
    get$top: function() {
      return J.$index$asx(this.get$dataWindow(), 1);
    },
    get$right: function() {
      return J.$index$asx(this.get$dataWindow(), 2);
    },
    get$bottom: function() {
      return J.$index$asx(this.get$dataWindow(), 3);
    },
    get$isValid: function() {
      return this.width != null;
    },
    _calculateNumXLevels$4: function(minX, maxX, minY, maxY) {
      var num, t1, _this = this;
      H._asInt(minX);
      H._asInt(maxX);
      H._asInt(minY);
      H._asInt(maxY);
      switch (_this._tileLevelMode) {
        case 0:
          num = 1;
          break;
        case 1:
          t1 = _this._roundLog2$2(P.max(maxX - minX + 1, maxY - minY + 1, type$.int), _this._tileRoundingMode);
          if (typeof t1 !== "number")
            return t1.$add();
          num = t1 + 1;
          break;
        case 2:
          t1 = _this._roundLog2$2(maxX - minX + 1, _this._tileRoundingMode);
          if (typeof t1 !== "number")
            return t1.$add();
          num = t1 + 1;
          break;
        default:
          throw H.wrapException(K.ImageException$("Unknown LevelMode format."));
      }
      return num;
    },
    _calculateNumYLevels$4: function(minX, maxX, minY, maxY) {
      var num, t1, _this = this;
      H._asInt(minX);
      H._asInt(maxX);
      H._asInt(minY);
      H._asInt(maxY);
      switch (_this._tileLevelMode) {
        case 0:
          num = 1;
          break;
        case 1:
          t1 = _this._roundLog2$2(P.max(maxX - minX + 1, maxY - minY + 1, type$.int), _this._tileRoundingMode);
          if (typeof t1 !== "number")
            return t1.$add();
          num = t1 + 1;
          break;
        case 2:
          t1 = _this._roundLog2$2(maxY - minY + 1, _this._tileRoundingMode);
          if (typeof t1 !== "number")
            return t1.$add();
          num = t1 + 1;
          break;
        default:
          throw H.wrapException(K.ImageException$("Unknown LevelMode format."));
      }
      return num;
    },
    _roundLog2$2: function(x, rmode) {
      H._asInt(x);
      return H._asIntQ(rmode) === 0 ? this._floorLog2$1(x) : this._ceilLog2$1(x);
    },
    _floorLog2$1: function(x) {
      var y;
      H._asInt(x);
      for (y = 0; x > 1;) {
        ++y;
        x = C.JSInt_methods._shrOtherPositive$1(x, 1);
      }
      return y;
    },
    _ceilLog2$1: function(x) {
      var y, r;
      H._asInt(x);
      for (y = 0, r = 0; x > 1;) {
        if ((x & 1) !== 0)
          r = 1;
        ++y;
        x = C.JSInt_methods._shrOtherPositive$1(x, 1);
      }
      return y + r;
    },
    _calculateBytesPerPixel$0: function() {
      var t1, bytesPerPixel, t2;
      for (t1 = J.get$iterator$ax(this.channels), bytesPerPixel = 0; H.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t2 = t2.get$size(t2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        bytesPerPixel += t2;
      }
      return bytesPerPixel;
    },
    _calculateNumTiles$5: function(numLevels, min, max, size, rmode) {
      var _list, i, t1;
      H._asInt(numLevels);
      H._asInt(min);
      H._asInt(max);
      H._asIntQ(size);
      H._asIntQ(rmode);
      _list = J.JSArray_JSArray$allocateFixed(numLevels, type$.int);
      for (i = 0; i < numLevels; ++i) {
        t1 = this._levelSize$4(min, max, i, rmode);
        size.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        C.JSArray_methods.$indexSet(_list, i, C.JSNumber_methods.$tdiv(t1 + size - 1, size));
      }
      return _list;
    },
    _levelSize$4: function(_min, _max, l, rmode) {
      var a, b, size;
      H._asInt(_min);
      H._asInt(_max);
      H._asInt(l);
      H._asIntQ(rmode);
      if (l < 0)
        throw H.wrapException(K.ImageException$("Argument not in valid range."));
      a = _max - _min + 1;
      b = C.JSInt_methods.$shl(1, l);
      size = C.JSInt_methods.$tdiv(a, b);
      if (rmode === 1 && size * b < a)
        ++size;
      return P.max(size, 1, type$.int);
    },
    get$_bytesPerLine: function() {
      var t1 = this.__ExrPart__bytesPerLine;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_bytesPerLine")) : t1;
    },
    set$_bytesPerLine: function(t1) {
      this.__ExrPart__bytesPerLine = type$.Uint32List._as(t1);
    },
    get$_bytesPerPixel: function() {
      var t1 = this.__ExrPart__bytesPerPixel;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_bytesPerPixel")) : t1;
    },
    set$_bytesPerPixel: function(t1) {
      this.__ExrPart__bytesPerPixel = H._asInt(t1);
    },
    set$displayWindow: function(displayWindow) {
      type$.nullable_List_int._as(displayWindow);
    },
    set$__ExrPart_dataWindow: function(__ExrPart_dataWindow) {
      this.__ExrPart_dataWindow = type$.nullable_List_int._as(__ExrPart_dataWindow);
    },
    set$width: function(_, width) {
      this.width = H._asIntQ(width);
    },
    set$height: function(_, height) {
      this.height = H._asIntQ(height);
    },
    set$pixelAspectRatio: function(pixelAspectRatio) {
      H._asDouble(pixelAspectRatio);
    },
    set$screenWindowCenterX: function(screenWindowCenterX) {
      H._asDouble(screenWindowCenterX);
    },
    set$screenWindowCenterY: function(screenWindowCenterY) {
      H._asDouble(screenWindowCenterY);
    },
    set$screenWindowWidth: function(screenWindowWidth) {
      H._asDouble(screenWindowWidth);
    },
    set$_compressionType: function(_compressionType) {
      this._compressionType = H._asInt(_compressionType);
    },
    set$_offsets: function(_offsets) {
      this._offsets = type$.nullable_List_nullable_Uint32List._as(_offsets);
    },
    set$_compressor: function(_compressor) {
      this._compressor = type$.nullable_ExrCompressor._as(_compressor);
    },
    set$_linesInBuffer: function(_linesInBuffer) {
      this._linesInBuffer = H._asIntQ(_linesInBuffer);
    },
    set$_offsetInLineBuffer: function(_offsetInLineBuffer) {
      this._offsetInLineBuffer = type$.nullable_Uint32List._as(_offsetInLineBuffer);
    },
    set$_tileWidth: function(_tileWidth) {
      this._tileWidth = H._asIntQ(_tileWidth);
    },
    set$_tileHeight: function(_tileHeight) {
      this._tileHeight = H._asIntQ(_tileHeight);
    },
    set$_numXTiles: function(_numXTiles) {
      this._numXTiles = type$.nullable_List_nullable_int._as(_numXTiles);
    },
    set$_numYTiles: function(_numYTiles) {
      this._numYTiles = type$.nullable_List_nullable_int._as(_numYTiles);
    },
    set$_numXLevels: function(_numXLevels) {
      this._numXLevels = H._asIntQ(_numXLevels);
    },
    set$_numYLevels: function(_numYLevels) {
      this._numYLevels = H._asIntQ(_numYLevels);
    },
    set$_maxBytesPerTileLine: function(_maxBytesPerTileLine) {
      this._maxBytesPerTileLine = H._asIntQ(_maxBytesPerTileLine);
    }
  };
  S.ExrPart_closure.prototype = {
    call$1: function(l) {
      var t1, t2, t3, t4, result, lx;
      H._asInt(l);
      t1 = this.$this;
      t2 = t1._numXTiles;
      t2.toString;
      t3 = this._box_0;
      t2 = J.$index$asx(t2, t3.lx);
      t2.toString;
      t4 = t1._numYTiles;
      t4.toString;
      t4 = J.$index$asx(t4, t3.ly);
      t4.toString;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      result = H.NativeUint32List_NativeUint32List(t2 * t4);
      t4 = t3.lx;
      if (typeof t4 !== "number")
        return t4.$add();
      lx = t4 + 1;
      t3.lx = lx;
      if (lx === t1._numXLevels) {
        t3.lx = 0;
        t1 = t3.ly;
        if (typeof t1 !== "number")
          return t1.$add();
        t3.ly = t1 + 1;
      }
      return result;
    },
    $signature: 20
  };
  S.InternalExrPart.prototype = {
    get$offsets: function() {
      return this._offsets;
    },
    get$compressor: function() {
      return this._compressor;
    },
    get$linesInBuffer: function() {
      return this._linesInBuffer;
    },
    get$offsetInLineBuffer: function() {
      return this._offsetInLineBuffer;
    },
    get$tiled: function() {
      return this._tiled;
    },
    get$tileWidth: function() {
      return this._tileWidth;
    },
    get$tileHeight: function() {
      return this._tileHeight;
    },
    get$numXTiles: function() {
      return this._numXTiles;
    },
    get$numYTiles: function() {
      return this._numYTiles;
    },
    get$numXLevels: function() {
      return this._numXLevels;
    },
    get$numYLevels: function() {
      return this._numYLevels;
    },
    readOffsets$1: function(input) {
      var i, t1, j, numOffsets, _this = this;
      type$.InputBuffer._as(input);
      if (H.boolConversionCheck(_this._tiled)) {
        i = 0;
        while (true) {
          t1 = _this._offsets;
          t1.toString;
          t1 = J.get$length$asx(t1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          j = 0;
          while (true) {
            t1 = _this._offsets;
            t1.toString;
            t1 = J.$index$asx(t1, i);
            t1.toString;
            t1 = J.get$length$asx(t1);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = _this._offsets;
            t1.toString;
            t1 = J.$index$asx(t1, i);
            t1.toString;
            J.$indexSet$ax(t1, j, input.readUint64$0());
            ++j;
          }
          ++i;
        }
      } else {
        t1 = _this._offsets;
        t1.toString;
        t1 = J.$index$asx(t1, 0);
        t1.toString;
        numOffsets = J.get$length$asx(t1);
        for (i = 0; i < numOffsets; ++i) {
          t1 = _this._offsets;
          t1.toString;
          t1 = J.$index$asx(t1, 0);
          t1.toString;
          J.$indexSet$ax(t1, i, input.readUint64$0());
        }
      }
    }
  };
  G.InternalExrPizCompressor.prototype = {
    InternalExrPizCompressor$3: function(header, _maxScanLineSize, _numScanLines) {
      var _i, t1, t2, _this = this,
        _length = J.get$length$asx(header.channels),
        _list = J.JSArray_JSArray$allocateFixed(_length, type$._PizChannelData);
      for (_i = 0; _i < _length; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, G._PizChannelData$());
      _this.set$_channelData(_list);
      t1 = _this._exr_piz_compressor$_maxScanLineSize;
      t1.toString;
      t2 = _this._exr_piz_compressor$_numScanLines;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.set$_tmpBuffer(H.NativeUint16List_NativeUint16List(C.JSNumber_methods._tdivFast$1(t1 * t2, 2)));
    },
    numScanLines$0: function() {
      return this._exr_piz_compressor$_numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      var maxX, maxY, t1, channels, numChannels, tmpBufferEnd, i, ch, t2, t3, t4, minNonZero, maxNonZero, bitmap, b, len, j, j0, lut, maxValue, t5, t6, t7, t8, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      if (width == null)
        width = _this.get$header().width;
      if (height == null)
        height = _this.get$header().get$linesInBuffer();
      width.toString;
      maxX = x + width - 1;
      height.toString;
      maxY = y + height - 1;
      t1 = _this.get$header().width;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxX > t1) {
        t1 = _this.get$header().width;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxX = t1 - 1;
      }
      t1 = _this.get$header().height;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1) {
        t1 = _this.get$header().height;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxY = t1 - 1;
      }
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      channels = _this.get$header().channels;
      t1 = J.getInterceptor$asx(channels);
      numChannels = t1.get$length(channels);
      for (tmpBufferEnd = 0, i = 0; i < numChannels; ++i) {
        ch = t1.$index(channels, i);
        t2 = J.$index$asx(_this.get$_channelData(), i);
        t2.toString;
        t2.set$start(tmpBufferEnd);
        t2.set$end(t2.get$start());
        t2.set$nx(_this.numSamples$3(ch.get$xSampling(), x, maxX));
        t2.set$ny(_this.numSamples$3(ch.get$ySampling(), y, maxY));
        t2.set$ys(ch.get$ySampling());
        t3 = ch.get$size(ch);
        if (typeof t3 !== "number")
          return t3.$tdiv();
        t2.set$size(0, C.JSNumber_methods._tdivFast$1(t3, 2));
        t3 = t2.get$nx();
        t4 = t2.get$ny();
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2 = t2.get$size(t2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        tmpBufferEnd += t3 * t4 * t2;
      }
      minNonZero = input.readUint16$0();
      maxNonZero = input.readUint16$0();
      if (maxNonZero >= 8192)
        throw H.wrapException(K.ImageException$("Error in header for PIZ-compressed data (invalid bitmap size)."));
      bitmap = H.NativeUint8List_NativeUint8List(8192);
      if (minNonZero <= maxNonZero) {
        b = input.readBytes$1(maxNonZero - minNonZero + 1);
        for (len = b.get$length(b), j = minNonZero, i = 0; i < len; ++i, j = j0) {
          j0 = j + 1;
          C.NativeUint8List_methods.$indexSet(bitmap, j, b.$index(0, i));
        }
      }
      lut = H.NativeUint16List_NativeUint16List(65536);
      maxValue = _this._reverseLutFromBitmap$2(bitmap, lut);
      Y.ExrHuffman_uncompress(input, input.readUint32$0(), _this._tmpBuffer, tmpBufferEnd);
      for (i = 0; i < numChannels; ++i) {
        t1 = J.$index$asx(_this.get$_channelData(), i);
        t1.toString;
        j = 0;
        while (true) {
          t2 = t1.get$size(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(j < t2))
            break;
          t2 = _this._tmpBuffer;
          t2.toString;
          t3 = t1.get$start();
          if (typeof t3 !== "number")
            return t3.$add();
          t4 = t1.get$nx();
          t5 = t1.get$size(t1);
          t6 = t1.get$ny();
          t7 = t1.get$nx();
          t8 = t1.get$size(t1);
          if (typeof t7 !== "number")
            return t7.$mul();
          if (typeof t8 !== "number")
            return H.iae(t8);
          Q.ExrWavelet_decode(t2, t3 + j, t4, t5, t6, t7 * t8, maxValue);
          ++j;
        }
      }
      t1 = _this._tmpBuffer;
      t1.toString;
      _this._applyLut$3(lut, t1, tmpBufferEnd);
      t1 = _this._exr_piz_compressor$_output;
      if (t1 == null) {
        t1 = _this._exr_piz_compressor$_maxScanLineSize;
        t1.toString;
        t2 = _this._exr_piz_compressor$_numScanLines;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = _this._exr_piz_compressor$_output = G.OutputBuffer$(false, t1 * t2 + 73728);
        t1 = t2;
      }
      t1.rewind$0();
      for (; y <= maxY; ++y)
        for (i = 0; i < numChannels; ++i) {
          t1 = J.$index$asx(_this.get$_channelData(), i);
          t1.toString;
          t2 = t1.get$ys();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (C.JSInt_methods.$mod(y, t2) !== 0)
            continue;
          t2 = t1.get$nx();
          t3 = t1.get$size(t1);
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t3 !== "number")
            return H.iae(t3);
          x = t2 * t3;
          for (; x > 0; --x) {
            t2 = _this._exr_piz_compressor$_output;
            t2.toString;
            t3 = _this._tmpBuffer;
            t3.toString;
            t4 = t1.get$end();
            if (typeof t4 !== "number")
              return t4.$add();
            t1.set$end(t4 + 1);
            t2.writeUint16$1(J.$index$asx(t3, t4));
          }
        }
      return type$.Uint8List._as(_this._exr_piz_compressor$_output.getBytes$0());
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    },
    _applyLut$3: function(lut, data, nData) {
      var t2, i,
        t1 = type$.List_int;
      t1._as(lut);
      t1._as(data);
      H._asInt(nData);
      for (t1 = J.getInterceptor$asx(data), t2 = J.getInterceptor$asx(lut), i = 0; i < nData; ++i)
        t1.$indexSet(data, i, t2.$index(lut, t1.$index(data, i)));
    },
    _reverseLutFromBitmap$2: function(bitmap, lut) {
      var t1, t2, k, i, t3, k0, k1;
      type$.Uint8List._as(bitmap);
      type$.Uint16List._as(lut);
      for (t1 = bitmap.length, t2 = lut.length, k = 0, i = 0; i < 65536; ++i) {
        if (i !== 0) {
          t3 = i >>> 3;
          if (t3 >= t1)
            return H.ioore(bitmap, t3);
          t3 = bitmap[t3];
          if (typeof t3 !== "number")
            return t3.$and();
          t3 = (t3 & 1 << (i & 7)) >>> 0 !== 0;
        } else
          t3 = true;
        if (t3) {
          k0 = k + 1;
          if (k >= t2)
            return H.ioore(lut, k);
          lut[k] = i;
          k = k0;
        }
      }
      for (k0 = k; k0 < 65536; k0 = k1) {
        k1 = k0 + 1;
        if (k0 >= t2)
          return H.ioore(lut, k0);
        lut[k0] = 0;
      }
      return k - 1;
    },
    get$_channelData: function() {
      var t1 = this.__InternalExrPizCompressor__channelData;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_channelData")) : t1;
    },
    set$_channelData: function(t1) {
      this.set$__InternalExrPizCompressor__channelData(type$.List_nullable__PizChannelData._as(t1));
    },
    set$__InternalExrPizCompressor__channelData: function(__InternalExrPizCompressor__channelData) {
      this.__InternalExrPizCompressor__channelData = type$.nullable_List_nullable__PizChannelData._as(__InternalExrPizCompressor__channelData);
    },
    set$_tmpBuffer: function(_tmpBuffer) {
      this._tmpBuffer = type$.nullable_Uint16List._as(_tmpBuffer);
    },
    $isExrPizCompressor: 1
  };
  G._PizChannelData.prototype = {
    get$start: function() {
      var t1 = this.___PizChannelData_start;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("start")) : t1;
    },
    set$start: function(t1) {
      this.___PizChannelData_start = H._asInt(t1);
    },
    get$end: function() {
      var t1 = this.___PizChannelData_end;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("end")) : t1;
    },
    set$end: function(t1) {
      this.___PizChannelData_end = H._asInt(t1);
    },
    get$nx: function() {
      var t1 = this.___PizChannelData_nx;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("nx")) : t1;
    },
    set$nx: function(t1) {
      this.___PizChannelData_nx = H._asInt(t1);
    },
    get$ny: function() {
      var t1 = this.___PizChannelData_ny;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("ny")) : t1;
    },
    set$ny: function(t1) {
      this.___PizChannelData_ny = H._asInt(t1);
    },
    get$ys: function() {
      var t1 = this.___PizChannelData_ys;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("ys")) : t1;
    },
    set$ys: function(t1) {
      this.___PizChannelData_ys = H._asInt(t1);
    },
    get$size: function(_) {
      var t1 = this.___PizChannelData_size;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("size")) : t1;
    },
    set$size: function(_, t1) {
      this.___PizChannelData_size = H._asInt(t1);
    }
  };
  O.InternalExrPxr24Compressor.prototype = {
    numScanLines$0: function() {
      return this._exr_pxr24_compressor$_numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      var data, t1, t2, ptr, pixel, pixelBytes, maxX, maxY, numChannels, t3, yi, tmpEnd, ci, ch, t4, n, j, t5, t6, t7, k, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      data = _this._zlib.decodeBytes$1(input.toUint8List$0());
      t1 = _this._output;
      if (t1 == null) {
        t1 = _this._exr_pxr24_compressor$_numScanLines;
        t2 = _this._maxScanLineSize;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = _this._output = G.OutputBuffer$(false, t1 * t2);
        t1 = t2;
      }
      t1.rewind$0();
      ptr = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_int);
      pixel = H.NativeUint32List_NativeUint32List(1);
      pixelBytes = P.Uint8List_Uint8List$view(C.NativeUint32List_methods.get$buffer(pixel), 0, null);
      if (width == null)
        width = _this.get$header().width;
      if (height == null)
        height = _this.get$header().get$linesInBuffer();
      width.toString;
      maxX = x + width - 1;
      height.toString;
      maxY = y + height - 1;
      t1 = _this.get$header().width;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxX > t1) {
        t1 = _this.get$header().width;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxX = t1 - 1;
      }
      t1 = _this.get$header().height;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1) {
        t1 = _this.get$header().height;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxY = t1 - 1;
      }
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      numChannels = J.get$length$asx(_this.get$header().channels);
      for (t1 = pixel.length, t2 = pixelBytes.length, t3 = J.getInterceptor$asx(data), yi = y, tmpEnd = 0; yi <= maxY; ++yi)
        for (ci = 0; ci < numChannels; ++ci) {
          ch = J.$index$asx(_this.get$header().channels, ci);
          t4 = ch.get$ySampling();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (C.JSInt_methods.$mod(y, t4) !== 0)
            continue;
          n = _this.numSamples$3(ch.get$xSampling(), x, maxX);
          if (0 >= t1)
            return H.ioore(pixel, 0);
          pixel[0] = 0;
          switch (ch.get$type(ch)) {
            case 0:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              if (0 >= ptr.length)
                return H.ioore(ptr, 0);
              t4 = ptr[0];
              if (typeof t4 !== "number")
                return t4.$add();
              C.JSArray_methods.$indexSet(ptr, 1, t4 + n);
              if (1 >= ptr.length)
                return H.ioore(ptr, 1);
              t4 = ptr[1];
              if (typeof t4 !== "number")
                return t4.$add();
              C.JSArray_methods.$indexSet(ptr, 2, t4 + n);
              if (2 >= ptr.length)
                return H.ioore(ptr, 2);
              t4 = ptr[2];
              if (typeof t4 !== "number")
                return t4.$add();
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                if (0 >= ptr.length)
                  return H.ioore(ptr, 0);
                t4 = ptr[0];
                if (typeof t4 !== "number")
                  return t4.$add();
                C.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                t4 = t3.$index(data, t4);
                if (typeof t4 !== "number")
                  return t4.$shl();
                if (1 >= ptr.length)
                  return H.ioore(ptr, 1);
                t5 = ptr[1];
                if (typeof t5 !== "number")
                  return t5.$add();
                C.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                t5 = t3.$index(data, t5);
                if (typeof t5 !== "number")
                  return t5.$shl();
                if (2 >= ptr.length)
                  return H.ioore(ptr, 2);
                t6 = ptr[2];
                if (typeof t6 !== "number")
                  return t6.$add();
                C.JSArray_methods.$indexSet(ptr, 2, t6 + 1);
                t6 = t3.$index(data, t6);
                if (typeof t6 !== "number")
                  return t6.$shl();
                t7 = pixel[0];
                if (typeof t7 !== "number")
                  return t7.$add();
                C.NativeUint32List_methods.$indexSet(pixel, 0, t7 + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0));
                for (k = 0; k < 4; ++k) {
                  t4 = _this._output;
                  t4.toString;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t4.writeByte$1(pixelBytes[k]);
                }
              }
              break;
            case 1:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              if (0 >= ptr.length)
                return H.ioore(ptr, 0);
              t4 = ptr[0];
              if (typeof t4 !== "number")
                return t4.$add();
              C.JSArray_methods.$indexSet(ptr, 1, t4 + n);
              if (1 >= ptr.length)
                return H.ioore(ptr, 1);
              t4 = ptr[1];
              if (typeof t4 !== "number")
                return t4.$add();
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                if (0 >= ptr.length)
                  return H.ioore(ptr, 0);
                t4 = ptr[0];
                if (typeof t4 !== "number")
                  return t4.$add();
                C.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                t4 = t3.$index(data, t4);
                if (typeof t4 !== "number")
                  return t4.$shl();
                if (1 >= ptr.length)
                  return H.ioore(ptr, 1);
                t5 = ptr[1];
                if (typeof t5 !== "number")
                  return t5.$add();
                C.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                t5 = t3.$index(data, t5);
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t6 = pixel[0];
                if (typeof t6 !== "number")
                  return t6.$add();
                C.NativeUint32List_methods.$indexSet(pixel, 0, t6 + ((t4 << 8 | t5) >>> 0));
                for (k = 0; k < 2; ++k) {
                  t4 = _this._output;
                  t4.toString;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t4.writeByte$1(pixelBytes[k]);
                }
              }
              break;
            case 2:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              if (0 >= ptr.length)
                return H.ioore(ptr, 0);
              t4 = ptr[0];
              if (typeof t4 !== "number")
                return t4.$add();
              C.JSArray_methods.$indexSet(ptr, 1, t4 + n);
              if (1 >= ptr.length)
                return H.ioore(ptr, 1);
              t4 = ptr[1];
              if (typeof t4 !== "number")
                return t4.$add();
              C.JSArray_methods.$indexSet(ptr, 2, t4 + n);
              if (2 >= ptr.length)
                return H.ioore(ptr, 2);
              t4 = ptr[2];
              if (typeof t4 !== "number")
                return t4.$add();
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                if (0 >= ptr.length)
                  return H.ioore(ptr, 0);
                t4 = ptr[0];
                if (typeof t4 !== "number")
                  return t4.$add();
                C.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                t4 = t3.$index(data, t4);
                if (typeof t4 !== "number")
                  return t4.$shl();
                if (1 >= ptr.length)
                  return H.ioore(ptr, 1);
                t5 = ptr[1];
                if (typeof t5 !== "number")
                  return t5.$add();
                C.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                t5 = t3.$index(data, t5);
                if (typeof t5 !== "number")
                  return t5.$shl();
                if (2 >= ptr.length)
                  return H.ioore(ptr, 2);
                t6 = ptr[2];
                if (typeof t6 !== "number")
                  return t6.$add();
                C.JSArray_methods.$indexSet(ptr, 2, t6 + 1);
                t6 = t3.$index(data, t6);
                if (typeof t6 !== "number")
                  return t6.$shl();
                t7 = pixel[0];
                if (typeof t7 !== "number")
                  return t7.$add();
                C.NativeUint32List_methods.$indexSet(pixel, 0, t7 + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0));
                for (k = 0; k < 4; ++k) {
                  t4 = _this._output;
                  t4.toString;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t4.writeByte$1(pixelBytes[k]);
                }
              }
              break;
          }
        }
      return type$.Uint8List._as(_this._output.getBytes$0());
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    },
    $isExrPxr24Compressor: 1
  };
  Y.InternalExrRleCompressor.prototype = {
    numScanLines$0: function() {
      return 1;
    },
    uncompress$5: function(input, x, y, width, height) {
      var t1, out, maxX, maxY, n, count, count0, data, len, i, t2, si, t3, si0, t10, t20, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      t1 = input.get$length(input);
      if (typeof t1 !== "number")
        return t1.$mul();
      out = G.OutputBuffer$(false, t1 * 2);
      if (width == null)
        width = _this.get$header().width;
      if (height == null)
        height = _this.get$header().get$linesInBuffer();
      width.toString;
      maxX = x + width - 1;
      height.toString;
      maxY = y + height - 1;
      t1 = _this.get$header().width;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxX > t1) {
        t1 = _this.get$header().width;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxX = t1 - 1;
      }
      t1 = _this.get$header().height;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1) {
        t1 = _this.get$header().height;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxY = t1 - 1;
      }
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      for (; !H.boolConversionCheck(input.get$isEOS());) {
        n = input.readInt8$0();
        if (n < 0) {
          count = -n;
          for (; count0 = count - 1, count > 0; count = count0)
            out.writeByte$1(input.readByte$0());
        } else
          for (count = n; count0 = count - 1, count >= 0; count = count0)
            out.writeByte$1(input.readByte$0());
      }
      data = type$.Uint8List._as(out.getBytes$0());
      for (len = data.length, i = 1; i < len; ++i) {
        t1 = data[i - 1];
        t2 = data[i];
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        C.NativeUint8List_methods.$indexSet(data, i, t1 + t2 - 128);
      }
      t1 = _this._exr_rle_compressor$_outCache;
      if (t1 == null || !H.boolConversionCheck(J.$eq$(J.get$length$asx(t1), len)))
        _this.set$_exr_rle_compressor$_outCache(H.NativeUint8List_NativeUint8List(len));
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t1 = 0, si = 0; true; t2 = t20, t1 = t10) {
        if (si < len) {
          t3 = _this._exr_rle_compressor$_outCache;
          t3.toString;
          si0 = si + 1;
          t10 = t1 + 1;
          if (t1 >= len)
            return H.ioore(data, t1);
          J.$indexSet$ax(t3, si, data[t1]);
        } else
          break;
        if (si0 < len) {
          t1 = _this._exr_rle_compressor$_outCache;
          t1.toString;
          si = si0 + 1;
          t20 = t2 + 1;
          if (t2 >= len)
            return H.ioore(data, t2);
          J.$indexSet$ax(t1, si0, data[t2]);
        } else
          break;
      }
      t1 = _this._exr_rle_compressor$_outCache;
      t1.toString;
      return t1;
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    },
    set$_exr_rle_compressor$_outCache: function(_outCache) {
      this._exr_rle_compressor$_outCache = type$.nullable_Uint8List._as(_outCache);
    },
    $isExrRleCompressor: 1
  };
  R.InternalExrZipCompressor.prototype = {
    numScanLines$0: function() {
      return this._exr_zip_compressor$_numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      var data, maxX, maxY, t1, len, i, t2, t3, t10, si, si0, t11, t20, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(x);
      H._asInt(y);
      H._asIntQ(width);
      H._asIntQ(height);
      data = _this.zlib.decodeBytes$1(input.toUint8List$0());
      if (width == null)
        width = _this.get$header().width;
      if (height == null)
        height = _this.get$header().get$linesInBuffer();
      width.toString;
      maxX = x + width - 1;
      height.toString;
      maxY = y + height - 1;
      t1 = _this.get$header().width;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxX > t1) {
        t1 = _this.get$header().width;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxX = t1 - 1;
      }
      t1 = _this.get$header().height;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1) {
        t1 = _this.get$header().height;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        maxY = t1 - 1;
      }
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      for (t1 = J.getInterceptor$asx(data), len = t1.get$length(data), i = 1; i < len; ++i) {
        t2 = t1.$index(data, i - 1);
        t3 = t1.$index(data, i);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1.$indexSet(data, i, t2 + t3 - 128);
      }
      t2 = _this._outCache;
      if (t2 == null || !H.boolConversionCheck(J.$eq$(J.get$length$asx(t2), t1.get$length(data))))
        _this.set$_outCache(H.NativeUint8List_NativeUint8List(t1.get$length(data)));
      len = t1.get$length(data);
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
          t3 = _this._outCache;
          t3.toString;
          si0 = si + 1;
          t11 = t10 + 1;
          J.$indexSet$ax(t3, si, t1.$index(data, t10));
        } else
          break;
        if (si0 < len) {
          t3 = _this._outCache;
          t3.toString;
          si = si0 + 1;
          t20 = t2 + 1;
          J.$indexSet$ax(t3, si0, t1.$index(data, t2));
        } else
          break;
      }
      t1 = _this._outCache;
      t1.toString;
      return t1;
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    },
    set$_outCache: function(_outCache) {
      this._outCache = type$.nullable_Uint8List._as(_outCache);
    },
    $isExrZipCompressor: 1
  };
  U.ExrDecoder.prototype = {
    isValidFile$1: function(bytes) {
      return Y.ExrImage_isValidFile(type$.List_int._as(bytes));
    },
    startDecode$1: function(bytes) {
      return this.exrImage = Y.ExrImage$(type$.List_int._as(bytes));
    },
    decodeFrame$1: function(frame) {
      var t1;
      H._asInt(frame);
      t1 = this.exrImage;
      if (t1 == null)
        return null;
      return A.hdrToImage(t1.getPart$1(frame).framebuffer, 1);
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    }
  };
  M.GifColorMap.prototype = {
    $index: function(_, index) {
      return J.$index$asx(this.colors, H._asInt(index));
    },
    $indexSet: function(_, index, value) {
      H._asInt(index);
      H._asInt(value);
      J.$indexSet$ax(this.colors, index, value);
      return value;
    },
    color$1: function(index) {
      var ci, a, t1, t2;
      H._asInt(index);
      ci = index * 3;
      a = index === this.transparent ? 0 : 255;
      t1 = this.colors;
      t2 = J.getInterceptor$asx(t1);
      return K.getColor(t2.$index(t1, ci), t2.$index(t1, ci + 1), t2.$index(t1, ci + 2), a);
    },
    setColor$4: function(index, r, g, b) {
      var ci, t1, t2;
      H._asInt(index);
      H._asInt(r);
      H._asInt(g);
      H._asInt(b);
      ci = index * 3;
      t1 = this.colors;
      t2 = J.getInterceptor$ax(t1);
      t2.$indexSet(t1, ci, r);
      t2.$indexSet(t1, ci + 1, g);
      t2.$indexSet(t1, ci + 2, b);
    }
  };
  A.GifImageDesc.prototype = {
    get$x: function() {
      var t1 = this.__GifImageDesc_x;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("x")) : t1;
    },
    set$x: function(t1) {
      this.__GifImageDesc_x = H._asInt(t1);
    },
    get$y: function() {
      var t1 = this.__GifImageDesc_y;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("y")) : t1;
    },
    set$y: function(t1) {
      this.__GifImageDesc_y = H._asInt(t1);
    },
    get$width: function(_) {
      var t1 = this.__GifImageDesc_width;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("width")) : t1;
    },
    set$width: function(_, t1) {
      this.__GifImageDesc_width = H._asInt(t1);
    },
    get$height: function(_) {
      var t1 = this.__GifImageDesc_height;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("height")) : t1;
    },
    set$height: function(_, t1) {
      this.__GifImageDesc_height = H._asInt(t1);
    },
    get$interlaced: function() {
      var t1 = this.__GifImageDesc_interlaced;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("interlaced")) : t1;
    },
    set$interlaced: function(t1) {
      this.__GifImageDesc_interlaced = H._asBool(t1);
    },
    GifImageDesc$1: function(input) {
      var b, i, t1, t2, _this = this;
      _this.set$x(input.readUint16$0());
      _this.set$y(input.readUint16$0());
      _this.set$width(0, input.readUint16$0());
      _this.set$height(0, input.readUint16$0());
      b = input.readByte$0();
      _this.set$interlaced((b & 64) !== 0);
      if ((b & 128) !== 0) {
        _this.colorMap = M.GifColorMap$(C.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        i = 0;
        while (true) {
          t1 = _this.colorMap;
          t2 = t1.numColors;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.setColor$4(i, input.readByte$0(), input.readByte$0(), input.readByte$0());
          ++i;
        }
      }
      _this.set$_inputPosition(input.get$position());
    },
    get$_inputPosition: function() {
      var t1 = this.__GifImageDesc__inputPosition;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_inputPosition")) : t1;
    },
    set$_inputPosition: function(t1) {
      this.__GifImageDesc__inputPosition = H._asInt(t1);
    }
  };
  A.InternalGifImageDesc.prototype = {
    get$inputPosition: function() {
      return this.get$_inputPosition();
    }
  };
  K.GifInfo.prototype = {};
  F.GifDecoder.prototype = {
    GifDecoder$1: function(bytes) {
      if (bytes != null)
        this.startDecode$1(bytes);
    },
    isValidFile$1: function(bytes) {
      this._gif_decoder$_input = Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
      this.info = K.GifInfo$();
      return this._gif_decoder$_getInfo$0();
    },
    startDecode$1: function(bytes) {
      var recordType, gifImage, extCode, error, t1, exception, _this = this;
      _this._gif_decoder$_input = Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
      _this.info = K.GifInfo$();
      if (!H.boolConversionCheck(_this._gif_decoder$_getInfo$0()))
        return null;
      try {
        for (; !H.boolConversionCheck(_this._gif_decoder$_input.get$isEOS());) {
          recordType = _this._gif_decoder$_input.readByte$0();
          switch (recordType) {
            case 44:
              gifImage = _this._skipImage$0();
              if (gifImage == null) {
                t1 = _this.info;
                return t1;
              }
              J.add$1$ax(_this.info.frames, gifImage);
              break;
            case 33:
              extCode = _this._gif_decoder$_input.readByte$0();
              if (H.boolConversionCheck(J.$eq$(extCode, 255))) {
                t1 = _this._gif_decoder$_input;
                t1.toString;
                _this._readApplicationExt$1(t1);
              } else if (H.boolConversionCheck(J.$eq$(extCode, 249))) {
                t1 = _this._gif_decoder$_input;
                t1.toString;
                _this._readGraphicsControlExt$1(t1);
              } else
                _this._skipRemainder$0();
              break;
            case 59:
              t1 = _this.info;
              return t1;
            default:
              break;
          }
        }
      } catch (exception) {
        error = H.unwrapException(exception);
        P.print(error);
      }
      return _this.info;
    },
    _readApplicationExt$1: function(_input) {
      var b1, b2;
      type$.InputBuffer._as(_input);
      if (_input.readString$1(_input.readByte$0()) === "NETSCAPE2.0") {
        b1 = _input.readByte$0();
        b2 = _input.readByte$0();
        if (b1 === 3 && b2 === 1)
          this.set$_repeat(_input.readUint16$0());
      } else
        this._skipRemainder$0();
    },
    _readGraphicsControlExt$1: function(_input) {
      var b, transparent, gifImage, t1;
      type$.InputBuffer._as(_input);
      _input.readByte$0();
      b = _input.readByte$0();
      _input.readUint16$0();
      transparent = _input.readByte$0();
      _input.readByte$0();
      C.JSInt_methods._shrOtherPositive$1(b, 2);
      if (J.$index$asx(_input.peekBytes$1(1), 0) === 44) {
        _input.skip$1(0, 1);
        gifImage = this._skipImage$0();
        if (gifImage == null)
          return;
        if ((b & 1) !== 0) {
          t1 = gifImage.colorMap;
          if (t1 != null)
            t1.transparent = transparent;
          else {
            t1 = this.info.globalColorMap;
            if (t1 != null)
              t1.transparent = transparent;
          }
        }
        J.add$1$ax(this.info.frames, gifImage);
      }
    },
    decodeFrame$1: function(frame) {
      var t1, gifImage, _this = this;
      H._asInt(frame);
      if (_this._gif_decoder$_input == null || _this.info == null)
        return null;
      t1 = J.get$length$asx(_this.info.frames);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (frame >= t1 || frame < 0)
        return null;
      gifImage = type$.InternalGifImageDesc._as(J.$index$asx(_this.info.frames, frame));
      t1 = _this._gif_decoder$_input;
      t1.toString;
      J.set$offset$z(t1, gifImage.get$inputPosition());
      return _this._decodeImage$1(J.$index$asx(_this.info.frames, frame));
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    _skipImage$0: function() {
      var t1, gifImage, _this = this;
      if (H.boolConversionCheck(_this._gif_decoder$_input.get$isEOS()))
        return null;
      t1 = _this._gif_decoder$_input;
      t1.toString;
      gifImage = A.InternalGifImageDesc$(t1);
      t1 = _this._gif_decoder$_input;
      t1.toString;
      J.skip$1$ax(t1, 1);
      _this._skipRemainder$0();
      return gifImage;
    },
    _decodeImage$1: function(gifImage) {
      var t1, t2, width, height, t3, colorMap, image, line, row, i, j, y, _this = this;
      type$.GifImageDesc._as(gifImage);
      if (_this._gif_decoder$_buffer == null)
        _this._initDecode$0();
      _this.set$_bitsPerPixel(_this._gif_decoder$_input.readByte$0());
      t1 = _this._bitsPerPixel;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = C.JSInt_methods.$shl(1, t1);
      _this._clearCode = t1;
      _this._eofCode = t1 + 1;
      t1 = _this._eofCode;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_runningCode(t1 + 1);
      t1 = _this._bitsPerPixel;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_runningBits(t1 + 1);
      t1 = _this._runningBits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this._maxCode1 = C.JSInt_methods.$shl(1, t1);
      _this._stackPtr = 0;
      _this._lastCode = 4098;
      _this._currentShiftDWord = _this._currentShiftState = 0;
      t1 = _this._gif_decoder$_buffer;
      t1.toString;
      J.$indexSet$ax(t1, 0, 0);
      t1 = _this._gif_decoder$_prefix;
      t1.toString;
      t2 = J.getInterceptor$asx(t1);
      t2.fillRange$3(t1, 0, t2.get$length(t1), 4098);
      width = gifImage.get$width(gifImage);
      height = gifImage.get$height(gifImage);
      t1 = gifImage.get$x();
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = _this.info;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(t1 + width > t3)) {
        t1 = gifImage.get$y();
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = _this.info;
        t3 = t2.height;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t1 + height > t3;
        t1 = t3;
      } else
        t1 = true;
      if (t1)
        return null;
      colorMap = gifImage.colorMap;
      colorMap = colorMap != null ? colorMap : t2.globalColorMap;
      _this._pixelCount = width * height;
      image = U.Image$(width, height, C.Channels_1, null, null);
      line = H.NativeUint8List_NativeUint8List(width);
      if (H.boolConversionCheck(gifImage.get$interlaced())) {
        row = gifImage.get$y();
        for (t1 = row + height, i = 0, j = 0; i < 4; ++i) {
          t2 = C.List_0_4_2_1[i];
          if (typeof t2 !== "number")
            return H.iae(t2);
          y = row + t2;
          while (y < t1) {
            if (!H.boolConversionCheck(_this._getLine$1(line)))
              return image;
            _this._updateImage$4(image, y, colorMap, line);
            t2 = C.List_8_8_4_2[i];
            if (typeof t2 !== "number")
              return H.iae(t2);
            y += t2;
            ++j;
          }
        }
      } else
        for (y = 0; y < height; ++y) {
          if (!H.boolConversionCheck(_this._getLine$1(line)))
            return image;
          _this._updateImage$4(image, y, colorMap, line);
        }
      return image;
    },
    _updateImage$4: function(image, y, colorMap, line) {
      var width, x;
      type$.Image._as(image);
      H._asInt(y);
      type$.nullable_GifColorMap._as(colorMap);
      type$.Uint8List._as(line);
      if (colorMap != null)
        for (width = line.length, x = 0; x < width; ++x)
          image.setPixel$3(x, y, colorMap.color$1(line[x]));
    },
    _gif_decoder$_getInfo$0: function() {
      var t1, b, i, r, g, _this = this,
        tag = _this._gif_decoder$_input.readString$1(6);
      if (tag !== "GIF87a" && tag !== "GIF89a")
        return false;
      t1 = _this.info;
      t1.toString;
      J.set$width$z(t1, _this._gif_decoder$_input.readUint16$0());
      t1 = _this.info;
      t1.toString;
      J.set$height$z(t1, _this._gif_decoder$_input.readUint16$0());
      b = _this._gif_decoder$_input.readByte$0();
      t1 = _this.info;
      t1.toString;
      t1.set$backgroundColor(_this._gif_decoder$_input.readByte$0());
      t1 = _this._gif_decoder$_input;
      t1.toString;
      J.skip$1$ax(t1, 1);
      if ((b & 128) !== 0) {
        t1 = _this.info;
        t1.toString;
        t1.globalColorMap = M.GifColorMap$(C.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        i = 0;
        while (true) {
          t1 = _this.info.globalColorMap.numColors;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          r = _this._gif_decoder$_input.readByte$0();
          g = _this._gif_decoder$_input.readByte$0();
          b = _this._gif_decoder$_input.readByte$0();
          _this.info.globalColorMap.setColor$4(i, r, g, b);
          ++i;
        }
      }
      _this.info.toString;
      return true;
    },
    _getLine$1: function(line) {
      var t1, _this = this;
      type$.Uint8List._as(line);
      t1 = _this._pixelCount;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_pixelCount(t1 - line.length);
      if (!H.boolConversionCheck(_this._decompressLine$1(line)))
        return false;
      if (H.boolConversionCheck(J.$eq$(_this._pixelCount, 0)))
        _this._skipRemainder$0();
      return true;
    },
    _skipRemainder$0: function() {
      var b, t1, _this = this;
      if (H.boolConversionCheck(_this._gif_decoder$_input.get$isEOS()))
        return true;
      b = _this._gif_decoder$_input.readByte$0();
      while (true) {
        if (!(b !== 0 && !H.boolConversionCheck(_this._gif_decoder$_input.get$isEOS())))
          break;
        t1 = _this._gif_decoder$_input;
        t1.toString;
        J.skip$1$ax(t1, b);
        if (H.boolConversionCheck(_this._gif_decoder$_input.get$isEOS()))
          return true;
        b = _this._gif_decoder$_input.readByte$0();
      }
      return true;
    },
    _decompressLine$1: function(line) {
      var t1, lineLen, i, i0, t2, currentPrefix, j, t3, t4, t5, j0, _this = this, _4098 = 4098;
      type$.Uint8List._as(line);
      t1 = _this._stackPtr;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 4095)
        return false;
      lineLen = line.length;
      if (t1 !== 0) {
        i = 0;
        while (true) {
          if (!(!H.boolConversionCheck(J.$eq$(_this._stackPtr, 0)) && i < lineLen))
            break;
          i0 = i + 1;
          t1 = _this.get$_stack();
          t2 = _this._stackPtr;
          if (typeof t2 !== "number")
            return t2.$sub();
          --t2;
          _this.set$_stackPtr(t2);
          C.NativeUint8List_methods.$indexSet(line, i, J.$index$asx(t1, t2));
          i = i0;
        }
      } else
        i = 0;
      for (currentPrefix = null; i < lineLen;) {
        _this.set$_currentCode(_this._decompressInput$0());
        t1 = _this._currentCode;
        if (t1 == null)
          return false;
        if (H.boolConversionCheck(J.$eq$(t1, _this._eofCode)))
          return false;
        if (H.boolConversionCheck(J.$eq$(_this._currentCode, _this._clearCode))) {
          for (j = 0; j <= 4095; ++j) {
            t1 = _this._gif_decoder$_prefix;
            t1.toString;
            J.$indexSet$ax(t1, j, _4098);
          }
          t1 = _this._eofCode;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.set$_runningCode(t1 + 1);
          t1 = _this._bitsPerPixel;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.set$_runningBits(t1 + 1);
          t1 = _this._runningBits;
          if (typeof t1 !== "number")
            return H.iae(t1);
          _this._maxCode1 = C.JSInt_methods.$shl(1, t1);
          _this._lastCode = 4098;
        } else {
          t1 = _this._currentCode;
          t1.toString;
          t2 = _this._clearCode;
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2) {
            i0 = i + 1;
            C.NativeUint8List_methods.$indexSet(line, i, t1);
            i = i0;
          } else {
            t2 = _this._gif_decoder$_prefix;
            t2.toString;
            if (H.boolConversionCheck(J.$eq$(J.$index$asx(t2, t1), _4098))) {
              t1 = _this._currentCode;
              t2 = _this._runningCode;
              if (typeof t2 !== "number")
                return t2.$sub();
              if (H.boolConversionCheck(J.$eq$(t1, t2 - 2))) {
                currentPrefix = _this._lastCode;
                t1 = _this.get$_suffix();
                t2 = _this._runningCode;
                if (typeof t2 !== "number")
                  return t2.$sub();
                t3 = _this.get$_stack();
                t4 = _this._stackPtr;
                if (typeof t4 !== "number")
                  return t4.$add();
                _this.set$_stackPtr(t4 + 1);
                t5 = _this._getPrefixChar$3(_this._gif_decoder$_prefix, _this._lastCode, _this._clearCode);
                J.$indexSet$ax(t3, t4, t5);
                J.$indexSet$ax(t1, t2 - 2, t5);
              } else
                return false;
            } else
              currentPrefix = _this._currentCode;
            j = 0;
            while (true) {
              j0 = j + 1;
              if (j <= 4095) {
                currentPrefix.toString;
                t1 = _this._clearCode;
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = currentPrefix > t1 && currentPrefix <= 4095;
              } else
                t1 = false;
              if (!t1)
                break;
              t1 = _this.get$_stack();
              t2 = _this._stackPtr;
              if (typeof t2 !== "number")
                return t2.$add();
              _this.set$_stackPtr(t2 + 1);
              J.$indexSet$ax(t1, t2, J.$index$asx(_this.get$_suffix(), currentPrefix));
              t2 = _this._gif_decoder$_prefix;
              t2.toString;
              currentPrefix = J.$index$asx(t2, currentPrefix);
              j = j0;
            }
            if (j0 < 4095) {
              currentPrefix.toString;
              t1 = currentPrefix > 4095;
            } else
              t1 = true;
            if (t1)
              return false;
            t1 = _this.get$_stack();
            t2 = _this._stackPtr;
            if (typeof t2 !== "number")
              return t2.$add();
            _this.set$_stackPtr(t2 + 1);
            J.$indexSet$ax(t1, t2, currentPrefix);
            while (true) {
              if (!(!H.boolConversionCheck(J.$eq$(_this._stackPtr, 0)) && i < lineLen))
                break;
              i0 = i + 1;
              t1 = _this.get$_stack();
              t2 = _this._stackPtr;
              if (typeof t2 !== "number")
                return t2.$sub();
              --t2;
              _this.set$_stackPtr(t2);
              C.NativeUint8List_methods.$indexSet(line, i, J.$index$asx(t1, t2));
              i = i0;
            }
          }
          if (!H.boolConversionCheck(J.$eq$(_this._lastCode, _4098))) {
            t1 = _this._gif_decoder$_prefix;
            t1.toString;
            t2 = _this._runningCode;
            if (typeof t2 !== "number")
              return t2.$sub();
            t2 = H.boolConversionCheck(J.$eq$(J.$index$asx(t1, t2 - 2), _4098));
            t1 = t2;
          } else
            t1 = false;
          if (t1) {
            t1 = _this._gif_decoder$_prefix;
            t1.toString;
            t2 = _this._runningCode;
            if (typeof t2 !== "number")
              return t2.$sub();
            J.$indexSet$ax(t1, t2 - 2, _this._lastCode);
            t1 = _this._currentCode;
            t2 = _this._runningCode;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (H.boolConversionCheck(J.$eq$(t1, t2 - 2))) {
              t1 = _this.get$_suffix();
              t2 = _this._runningCode;
              if (typeof t2 !== "number")
                return t2.$sub();
              J.$indexSet$ax(t1, t2 - 2, _this._getPrefixChar$3(_this._gif_decoder$_prefix, _this._lastCode, _this._clearCode));
            } else {
              t1 = _this.get$_suffix();
              t2 = _this._runningCode;
              if (typeof t2 !== "number")
                return t2.$sub();
              t3 = _this._gif_decoder$_prefix;
              t4 = _this._currentCode;
              t4.toString;
              J.$indexSet$ax(t1, t2 - 2, _this._getPrefixChar$3(t3, t4, _this._clearCode));
            }
          }
          t1 = _this._currentCode;
          t1.toString;
          _this.set$_lastCode(t1);
        }
      }
      return true;
    },
    _decompressInput$0: function() {
      var t2, t3, t4, _this = this,
        t1 = _this._runningBits;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 12)
        return null;
      while (true) {
        t1 = _this._currentShiftState;
        t2 = _this._runningBits;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 < t2))
          break;
        t1 = _this._bufferedInput$0();
        t1.toString;
        t2 = _this._currentShiftDWord;
        t3 = _this._currentShiftState;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1 = C.JSInt_methods.$shl(t1, t3);
        if (typeof t2 !== "number")
          return t2.$or();
        _this._currentShiftDWord = (t2 | t1) >>> 0;
        _this.set$_currentShiftState(t3 + 8);
      }
      t1 = _this._currentShiftDWord;
      t2 = C.JSArray_methods.$index(C.List_Qw3, t2);
      if (typeof t1 !== "number")
        return t1.$and();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this._currentShiftDWord;
      t4 = _this._runningBits;
      if (typeof t3 !== "number")
        return t3.$shr();
      if (typeof t4 !== "number")
        return H.iae(t4);
      _this._currentShiftDWord = C.JSNumber_methods.$shr(t3, t4);
      t4 = _this._currentShiftState;
      t3 = _this._runningBits;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this.set$_currentShiftState(t4 - t3);
      t3 = _this._runningCode;
      if (typeof t3 !== "number")
        return t3.$lt();
      if (t3 < 4097) {
        ++t3;
        _this.set$_runningCode(t3);
        t4 = _this._maxCode1;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 > t4) {
          t3 = _this._runningBits;
          if (typeof t3 !== "number")
            return t3.$lt();
          t3 = t3 < 12;
        } else
          t3 = false;
      } else
        t3 = false;
      if (t3) {
        t3 = _this._maxCode1;
        if (typeof t3 !== "number")
          return t3.$shl();
        _this._maxCode1 = t3 << 1 >>> 0;
        t3 = _this._runningBits;
        if (typeof t3 !== "number")
          return t3.$add();
        _this.set$_runningBits(t3 + 1);
      }
      return (t1 & t2) >>> 0;
    },
    _getPrefixChar$3: function(prefix, code, clearCode) {
      var i, i0, t1;
      type$.nullable_Uint32List._as(prefix);
      H._asInt(code);
      H._asInt(clearCode);
      i = 0;
      while (true) {
        if (code > clearCode) {
          i0 = i + 1;
          t1 = i <= 4095;
          i = i0;
        } else
          t1 = false;
        if (!t1)
          break;
        if (code > 4095)
          return 4098;
        if (code < 0 || code >= prefix.length)
          return H.ioore(prefix, code);
        code = prefix[code];
      }
      return code;
    },
    _bufferedInput$0: function() {
      var t2, t3, t4, t5, nextByte, _this = this,
        t1 = _this._gif_decoder$_buffer;
      t1.toString;
      t1 = H.boolConversionCheck(J.$eq$(J.$index$asx(t1, 0), 0));
      t2 = _this._gif_decoder$_buffer;
      if (t1) {
        t2.toString;
        J.$indexSet$ax(t2, 0, _this._gif_decoder$_input.readByte$0());
        t1 = _this._gif_decoder$_buffer;
        t1.toString;
        if (H.boolConversionCheck(J.$eq$(J.$index$asx(t1, 0), 0)))
          return null;
        t1 = _this._gif_decoder$_buffer;
        t1.toString;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.$index(t1, 0);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = _this._gif_decoder$_input;
        t4.toString;
        t5 = _this._gif_decoder$_buffer;
        t5.toString;
        t2.setRange$3(t1, 1, 1 + t3, t4.readBytes$1(J.$index$asx(t5, 0)).toUint8List$0());
        t5 = _this._gif_decoder$_buffer;
        t5.toString;
        nextByte = J.$index$asx(t5, 1);
        t5 = _this._gif_decoder$_buffer;
        t5.toString;
        J.$indexSet$ax(t5, 1, 2);
        t5 = _this._gif_decoder$_buffer;
        t5.toString;
        t4 = J.getInterceptor$asx(t5);
        t3 = t4.$index(t5, 0);
        if (typeof t3 !== "number")
          return t3.$sub();
        t4.$indexSet(t5, 0, t3 - 1);
      } else {
        t2.toString;
        t1 = J.getInterceptor$asx(t2);
        t3 = t1.$index(t2, 1);
        if (typeof t3 !== "number")
          return t3.$add();
        t1.$indexSet(t2, 1, t3 + 1);
        nextByte = t1.$index(t2, t3);
        t3 = _this._gif_decoder$_buffer;
        t3.toString;
        t2 = J.getInterceptor$asx(t3);
        t1 = t2.$index(t3, 0);
        if (typeof t1 !== "number")
          return t1.$sub();
        t2.$indexSet(t3, 0, t1 - 1);
      }
      return nextByte;
    },
    _initDecode$0: function() {
      var _this = this;
      _this.set$_gif_decoder$_buffer(H.NativeUint8List_NativeUint8List(256));
      _this.set$_stack(H.NativeUint8List_NativeUint8List(4095));
      _this.set$_suffix(H.NativeUint8List_NativeUint8List(4096));
      _this.set$_gif_decoder$_prefix(H.NativeUint32List_NativeUint32List(4096));
    },
    get$_stack: function() {
      var t1 = this.__GifDecoder__stack;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_stack")) : t1;
    },
    set$_stack: function(t1) {
      this.__GifDecoder__stack = type$.Uint8List._as(t1);
    },
    get$_suffix: function() {
      var t1 = this.__GifDecoder__suffix;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_suffix")) : t1;
    },
    set$_suffix: function(t1) {
      this.__GifDecoder__suffix = type$.Uint8List._as(t1);
    },
    set$_repeat: function(_repeat) {
      H._asInt(_repeat);
    },
    set$_gif_decoder$_buffer: function(_buffer) {
      this._gif_decoder$_buffer = type$.nullable_Uint8List._as(_buffer);
    },
    set$_gif_decoder$_prefix: function(_prefix) {
      this._gif_decoder$_prefix = type$.nullable_Uint32List._as(_prefix);
    },
    set$_bitsPerPixel: function(_bitsPerPixel) {
      this._bitsPerPixel = H._asInt(_bitsPerPixel);
    },
    set$_pixelCount: function(_pixelCount) {
      this._pixelCount = H._asIntQ(_pixelCount);
    },
    set$_currentShiftState: function(_currentShiftState) {
      this._currentShiftState = H._asInt(_currentShiftState);
    },
    set$_stackPtr: function(_stackPtr) {
      this._stackPtr = H._asInt(_stackPtr);
    },
    set$_currentCode: function(_currentCode) {
      this._currentCode = H._asIntQ(_currentCode);
    },
    set$_lastCode: function(_lastCode) {
      this._lastCode = H._asInt(_lastCode);
    },
    set$_runningBits: function(_runningBits) {
      this._runningBits = H._asInt(_runningBits);
    },
    set$_runningCode: function(_runningCode) {
      this._runningCode = H._asInt(_runningCode);
    }
  };
  X.IcoDecoder.prototype = {
    isValidFile$1: function(bytes) {
      var t1 = Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
      this._input = t1;
      this.set$_icoInfo(X.IcoInfo__read(t1));
      return this._icoInfo != null;
    },
    startDecode$1: function(bytes) {
      var t1 = Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
      this._input = t1;
      this.set$_icoInfo(X.IcoInfo__read(t1));
      return this._icoInfo;
    },
    decodeFrame$1: function(frame) {
      var t1, imageInfo, t2, t3, imageBuffer, png, dummyBmpHeader, bmpInfo, offset, inp, image, padding, rowLength, y, line, row, x, b, j, _this = this, _null = null;
      H._asInt(frame);
      if (_this._input != null) {
        t1 = _this._icoInfo;
        if (t1 != null) {
          t1 = t1.numFrames;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = frame >= t1;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        return _null;
      t1 = _this._icoInfo.images;
      t1.toString;
      imageInfo = J.$index$asx(t1, frame);
      t1 = _this._input;
      t2 = t1.buffer;
      t1 = t1.start;
      t3 = imageInfo.bytesOffset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = t1 + t3;
      t1 = imageInfo.bytesSize;
      if (typeof t1 !== "number")
        return H.iae(t1);
      imageBuffer = J.sublist$2$ax(t2, t3, t3 + t1);
      png = G.PngDecoder$();
      if (H.boolConversionCheck(png.isValidFile$1(imageBuffer)))
        return png.decodeImage$1(imageBuffer);
      dummyBmpHeader = G.OutputBuffer$(false, 14);
      dummyBmpHeader.writeUint16$1(19778);
      dummyBmpHeader.writeUint32$1(t1);
      dummyBmpHeader.writeUint32$1(0);
      dummyBmpHeader.writeUint32$1(0);
      bmpInfo = X.IcoBmpInfo$(Z.InputBuffer$(imageBuffer, false, _null, 0), L.BitmapFileHeader$(Z.InputBuffer$(dummyBmpHeader.getBytes$0(), false, _null, 0)));
      if (!H.boolConversionCheck(J.$eq$(bmpInfo.headerSize, 40)) && !H.boolConversionCheck(J.$eq$(bmpInfo.planes, 1)))
        return _null;
      t1 = bmpInfo.totalColors;
      if (H.boolConversionCheck(J.$eq$(t1, 0))) {
        t2 = bmpInfo.bpp;
        if (typeof t2 !== "number")
          return t2.$le();
        t2 = t2 <= 8;
      } else
        t2 = false;
      if (t2) {
        t1 = bmpInfo.bpp;
        if (typeof t1 !== "number")
          return H.iae(t1);
        offset = 40 + 4 * C.JSInt_methods.$shl(1, t1);
      } else {
        if (typeof t1 !== "number")
          return H.iae(t1);
        offset = 40 + 4 * t1;
      }
      J.set$offset$z(bmpInfo.file, offset);
      t1 = dummyBmpHeader.length;
      if (typeof t1 !== "number")
        return t1.$sub();
      dummyBmpHeader.set$length(0, t1 - 4);
      dummyBmpHeader.writeUint32$1(offset);
      inp = Z.InputBuffer$(imageBuffer, false, _null, 0);
      image = E.DibDecoder$(inp, bmpInfo).decodeFrame$1(0);
      t1 = bmpInfo.bpp;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 32)
        return image;
      t1 = bmpInfo.BmpInfo_width;
      if (typeof t1 !== "number")
        return t1.$mod();
      padding = 32 - C.JSNumber_methods.$mod(t1, 32);
      if (padding === 32)
        t2 = t1;
      else
        t2 = t1 + padding;
      rowLength = C.JSNumber_methods._tdivFast$1(t2, 8);
      t2 = image.height;
      y = 0;
      while (true) {
        t3 = bmpInfo.get$height(bmpInfo);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(y < t3))
          break;
        if (H.boolConversionCheck(bmpInfo.get$readBottomUp()))
          line = y;
        else {
          if (typeof t2 !== "number")
            return t2.$sub();
          line = t2 - 1 - y;
        }
        row = inp.readBytes$1(rowLength);
        for (x = 0; x < t1;) {
          b = row.readByte$0();
          j = 7;
          while (true) {
            if (!(j > -1 && x < t1))
              break;
            if ((b & C.JSInt_methods.$shl(1, j)) >>> 0 !== 0)
              image.setPixelRgba$6(x, line, 0, 0, 0, 0);
            ++x;
            --j;
          }
        }
        ++y;
      }
      return image;
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    set$_icoInfo: function(_icoInfo) {
      this._icoInfo = type$.nullable_IcoInfo._as(_icoInfo);
    }
  };
  X.IcoInfo.prototype = {};
  X.IcoInfo__read_closure.prototype = {
    call$1: function(e) {
      var t1, t2, t3, t4, t5, t6, t7;
      H._asInt(e);
      t1 = this.input;
      t2 = t1.readByte$0();
      t3 = t1.readByte$0();
      t4 = t1.readByte$0();
      J.skip$1$ax(t1, 1);
      t5 = t1.readUint16$0();
      t6 = t1.readUint16$0();
      t7 = t1.readUint32$0();
      return X.IcoInfoImage$(t6, t1.readUint32$0(), t7, t4, t5, t3, t2);
    },
    $signature: 28
  };
  X.IcoInfoImage.prototype = {};
  X.IcoBmpInfo.prototype = {
    get$height: function(_) {
      var t1 = L.BmpInfo.prototype.get$height.call(this, this);
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 2);
    },
    get$ignoreAlphaChannel: function() {
      return H.boolConversionCheck(J.$eq$(this.headerSize, 40)) && H.boolConversionCheck(J.$eq$(this.bpp, 32)) ? false : L.BmpInfo.prototype.get$ignoreAlphaChannel.call(this);
    }
  };
  U.ComponentData.prototype = {};
  D.JpegAdobe.prototype = {
    set$version: function(version) {
      H._asIntQ(version);
    },
    set$transformCode: function(transformCode) {
      this.transformCode = H._asIntQ(transformCode);
    }
  };
  R.JpegComponent.prototype = {
    get$blocksPerLine: function() {
      var t1 = this.__JpegComponent_blocksPerLine;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("blocksPerLine")) : t1;
    },
    set$blocksPerLine: function(t1) {
      this.__JpegComponent_blocksPerLine = H._asInt(t1);
    },
    get$blocksPerColumn: function() {
      var t1 = this.__JpegComponent_blocksPerColumn;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("blocksPerColumn")) : t1;
    },
    set$blocksPerColumn: function(t1) {
      this.__JpegComponent_blocksPerColumn = H._asInt(t1);
    },
    get$blocks: function() {
      var t1 = this.__JpegComponent_blocks;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("blocks")) : t1;
    },
    set$blocks: function(t1) {
      this.set$__JpegComponent_blocks(type$.List_List_List_int._as(t1));
    },
    get$huffmanTableDC: function() {
      var t1 = this.__JpegComponent_huffmanTableDC;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("huffmanTableDC")) : t1;
    },
    set$huffmanTableDC: function(t1) {
      this.__JpegComponent_huffmanTableDC = type$.List_dynamic._as(t1);
    },
    get$huffmanTableAC: function() {
      var t1 = this.__JpegComponent_huffmanTableAC;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("huffmanTableAC")) : t1;
    },
    set$huffmanTableAC: function(t1) {
      this.__JpegComponent_huffmanTableAC = type$.List_dynamic._as(t1);
    },
    get$pred: function() {
      var t1 = this.__JpegComponent_pred;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("pred")) : t1;
    },
    set$pred: function(t1) {
      this.__JpegComponent_pred = H._asInt(t1);
    },
    get$quantizationTable: function() {
      return J.$index$asx(this.quantizationTableList, this.quantizationIndex);
    },
    set$__JpegComponent_blocks: function(__JpegComponent_blocks) {
      this.__JpegComponent_blocks = type$.nullable_List_List_List_int._as(__JpegComponent_blocks);
    }
  };
  Y.JpegData.prototype = {
    get$input: function() {
      var t1 = this.__JpegData_input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("input")) : t1;
    },
    set$input: function(t1) {
      this.__JpegData_input = type$.InputBuffer._as(t1);
    },
    get$jfif: function() {
      var t1 = this.__JpegData_jfif;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("jfif")) : t1;
    },
    set$jfif: function(t1) {
      this.__JpegData_jfif = type$.JpegJfif._as(t1);
    },
    validate$1: function(bytes) {
      var marker, hasSOF, hasSOS, sectionByteSize, t1, t2, _this = this;
      _this.set$input(Z.InputBuffer$(type$.List_int._as(bytes), true, null, 0));
      if (_this._nextMarker$0() !== 216)
        return false;
      marker = _this._nextMarker$0();
      hasSOF = false;
      hasSOS = false;
      while (true) {
        if (!(marker !== 217 && !H.boolConversionCheck(_this.get$input().get$isEOS())))
          break;
        sectionByteSize = _this.get$input().readUint16$0();
        if (sectionByteSize < 2)
          break;
        t1 = _this.get$input();
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        J.set$offset$z(t1, t2 + (sectionByteSize - 2));
        switch (marker) {
          case 192:
          case 193:
          case 194:
            hasSOF = true;
            break;
          case 218:
            hasSOS = true;
            break;
        }
        marker = _this._nextMarker$0();
      }
      return hasSOF && hasSOS;
    },
    read$1: function(bytes) {
      var t1, t2, i, t3, t4, _this = this;
      _this.set$input(Z.InputBuffer$(type$.List_int._as(bytes), true, null, 0));
      _this._read$0();
      if (!H.boolConversionCheck(J.$eq$(J.get$length$asx(_this.frames), 1)))
        throw H.wrapException(K.ImageException$("Only single frame JPEGs supported"));
      t1 = _this.components;
      t2 = J.getInterceptor$ax(t1);
      i = 0;
      while (true) {
        t3 = J.get$length$asx(_this.frame.componentsOrder);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = _this.frame;
        t3 = J.$index$asx(t3.components, J.$index$asx(t3.componentsOrder, i));
        t3.toString;
        t4 = _this.frame;
        t2.add$1(t1, U.ComponentData$(t3.hSamples, t4.maxHSamples, t3.vSamples, t4.maxVSamples, _this._buildComponentData$2(t4, t3)));
        ++i;
      }
    },
    get$width: function(_) {
      return this.frame.samplesPerLine;
    },
    get$height: function(_) {
      return this.frame.scanLines;
    },
    getImage$0: function() {
      return L.getImageFromJpeg(this);
    },
    _read$0: function() {
      var marker, block, t1, t2, _this = this;
      if (_this._nextMarker$0() !== 216)
        throw H.wrapException(K.ImageException$("Start Of Image marker not found."));
      marker = _this._nextMarker$0();
      while (true) {
        if (!(marker !== 217 && !H.boolConversionCheck(_this.get$input().get$isEOS())))
          break;
        block = _this._readBlock$0();
        switch (marker) {
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 254:
            _this._readAppData$2(marker, block);
            break;
          case 219:
            _this._readDQT$1(block);
            break;
          case 192:
          case 193:
          case 194:
            _this._readFrame$2(marker, block);
            break;
          case 195:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 205:
          case 206:
          case 207:
            throw H.wrapException(K.ImageException$("Unhandled frame type " + H.S(C.JSInt_methods.toRadixString$1(marker, 16))));
          case 196:
            _this._readDHT$1(block);
            break;
          case 221:
            _this._readDRI$1(block);
            break;
          case 218:
            _this._readSOS$1(block);
            break;
          case 255:
            if (!H.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$input(), 0), 255))) {
              t1 = _this.get$input();
              t2 = t1.offset;
              if (typeof t2 !== "number")
                return t2.$sub();
              J.set$offset$z(t1, t2 - 1);
            }
            break;
          default:
            if (H.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$input(), -3), 255))) {
              t1 = J.$index$asx(_this.get$input(), -2);
              if (typeof t1 !== "number")
                return t1.$ge();
              if (t1 >= 192) {
                t1 = J.$index$asx(_this.get$input(), -2);
                if (typeof t1 !== "number")
                  return t1.$le();
                t1 = t1 <= 254;
              } else
                t1 = false;
            } else
              t1 = false;
            if (t1) {
              t1 = _this.get$input();
              t2 = t1.offset;
              if (typeof t2 !== "number")
                return t2.$sub();
              J.set$offset$z(t1, t2 - 3);
              break;
            }
            if (marker !== 0)
              throw H.wrapException(K.ImageException$("Unknown JPEG marker " + H.S(C.JSInt_methods.toRadixString$1(marker, 16))));
            break;
        }
        marker = _this._nextMarker$0();
      }
    },
    _readBlock$0: function() {
      var $length = this.get$input().readUint16$0();
      if ($length < 2)
        throw H.wrapException(K.ImageException$("Invalid Block"));
      return this.get$input().readBytes$1($length - 2);
    },
    _nextMarker$0: function() {
      var c, _this = this;
      if (H.boolConversionCheck(_this.get$input().get$isEOS()))
        return 0;
      do {
        do
          c = _this.get$input().readByte$0();
        while (c !== 255 && !H.boolConversionCheck(_this.get$input().get$isEOS()));
        if (H.boolConversionCheck(_this.get$input().get$isEOS()))
          return c;
        do
          c = _this.get$input().readByte$0();
        while (c === 255 && !H.boolConversionCheck(_this.get$input().get$isEOS()));
      } while (c === 0 && !H.boolConversionCheck(_this.get$input().get$isEOS()));
      return c;
    },
    _readExifValue$3: function(block, format, offset) {
      var initialBlockLength, buffer, num, den, bytesRead, t1, t2;
      type$.InputBuffer._as(block);
      H._asInt(format);
      H._asInt(offset);
      initialBlockLength = block.get$length(block);
      try {
        switch (format) {
          case 6:
            t1 = block.readInt8$0();
            return t1;
          case 1:
          case 7:
            t1 = block.readByte$0();
            return t1;
          case 2:
            t1 = block.readString$1(1);
            return t1;
          case 3:
            t1 = block.readUint16$0();
            return t1;
          case 4:
            t1 = block.readUint32$0();
            return t1;
          case 5:
          case 10:
            buffer = block.peekBytes$2(8, offset);
            num = buffer.readInt32$0();
            den = buffer.readInt32$0();
            if (H.boolConversionCheck(J.$eq$(den, 0)))
              return 0;
            t1 = num;
            t2 = den;
            if (typeof t1 !== "number")
              return t1.$div();
            if (typeof t2 !== "number")
              return H.iae(t2);
            return t1 / t2;
          case 8:
            t1 = block.readInt16$0();
            return t1;
          case 9:
            t1 = block.readInt32$0();
            return t1;
          case 11:
            t1 = block.readFloat32$0();
            return t1;
          case 12:
            t1 = block.peekBytes$2(8, offset).readFloat64$0();
            return t1;
          default:
            return 0;
        }
      } finally {
        t1 = initialBlockLength;
        t2 = block.get$length(block);
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        bytesRead = t1 - t2;
        t1 = bytesRead;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 4) {
          t1 = bytesRead;
          if (typeof t1 !== "number")
            return H.iae(t1);
          block.skip$1(0, 4 - t1);
        }
      }
    },
    _readExifDir$1: function(block) {
      var numDirEntries, t1, di, tag, format, components, byteCount, offset, t2;
      type$.InputBuffer._as(block);
      numDirEntries = block.readUint16$0();
      for (t1 = this.exif, di = 0; di < numDirEntries; ++di) {
        tag = block.readUint16$0();
        format = block.readUint16$0();
        components = block.readUint32$0();
        if (format - 1 >= 12)
          continue;
        if (components > 65536)
          continue;
        if (format >>> 0 !== format || format >= 13)
          return H.ioore(C.List_mC8, format);
        byteCount = C.List_mC8[format];
        if (byteCount > 4) {
          offset = block.readUint32$0();
          t2 = block.get$length(block);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (offset + byteCount > t2)
            continue;
        } else
          offset = 0;
        J.$indexSet$ax(t1.data, tag, this._readExifValue$3(block, format, offset));
      }
    },
    _readExifData$1: function(block) {
      var t1, rawData, saveEndian, alignment, offset;
      type$.InputBuffer._as(block);
      t1 = this.exif;
      if (t1.rawData == null)
        t1.set$rawData(H.setRuntimeTypeInfo([], type$.JSArray_Uint8List));
      rawData = J.sublist$1$ax(block.toUint8List$0(), 0);
      t1 = t1.rawData;
      t1.toString;
      J.add$1$ax(t1, rawData);
      if (!H.boolConversionCheck(J.$eq$(block.readUint32$0(), 1165519206)))
        return;
      if (!H.boolConversionCheck(J.$eq$(block.readUint16$0(), 0)))
        return;
      saveEndian = block.bigEndian;
      alignment = block.readString$1(2);
      if (alignment === "II")
        block.bigEndian = false;
      else if (alignment === "MM")
        block.bigEndian = true;
      else
        return;
      block.skip$1(0, 2);
      offset = block.readUint32$0();
      if (offset < 8 || offset > 16) {
        t1 = block.get$length(block);
        if (typeof t1 !== "number")
          return t1.$sub();
        if (offset > t1 - 16) {
          block.bigEndian = saveEndian;
          return;
        }
      }
      if (offset > 8)
        block.skip$1(0, offset - 8);
      this._readExifDir$1(block);
      block.bigEndian = saveEndian;
    },
    _readAppData$2: function(marker, block) {
      var t1, t2, _this = this;
      H._asInt(marker);
      type$.InputBuffer._as(block);
      if (marker === 224) {
        if (H.boolConversionCheck(J.$eq$(block.$index(0, 0), 74)) && H.boolConversionCheck(J.$eq$(block.$index(0, 1), 70)) && H.boolConversionCheck(J.$eq$(block.$index(0, 2), 73)) && H.boolConversionCheck(J.$eq$(block.$index(0, 3), 70)) && H.boolConversionCheck(J.$eq$(block.$index(0, 4), 0))) {
          _this.set$jfif(S.JpegJfif$());
          _this.get$jfif().set$majorVersion(block.$index(0, 5));
          _this.get$jfif().set$minorVersion(block.$index(0, 6));
          _this.get$jfif().set$densityUnits(block.$index(0, 7));
          _this.get$jfif();
          t1 = block.$index(0, 8);
          if (typeof t1 !== "number")
            return t1.$shl();
          t1 = block.$index(0, 9);
          if (typeof t1 !== "number")
            return H.iae(t1);
          _this.get$jfif();
          t1 = block.$index(0, 10);
          if (typeof t1 !== "number")
            return t1.$shl();
          t1 = block.$index(0, 11);
          if (typeof t1 !== "number")
            return H.iae(t1);
          _this.get$jfif().set$thumbWidth(block.$index(0, 12));
          _this.get$jfif().set$thumbHeight(block.$index(0, 13));
          t1 = _this.get$jfif().get$thumbWidth();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = _this.get$jfif().get$thumbHeight();
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this.get$jfif().set$thumbData(block.subset$2$offset(14 + 3 * t1 * t2, 14));
        }
      } else if (marker === 225)
        _this._readExifData$1(block);
      else if (marker === 238)
        if (H.boolConversionCheck(J.$eq$(block.$index(0, 0), 65)) && H.boolConversionCheck(J.$eq$(block.$index(0, 1), 100)) && H.boolConversionCheck(J.$eq$(block.$index(0, 2), 111)) && H.boolConversionCheck(J.$eq$(block.$index(0, 3), 98)) && H.boolConversionCheck(J.$eq$(block.$index(0, 4), 101)) && H.boolConversionCheck(J.$eq$(block.$index(0, 5), 0))) {
          t1 = D.JpegAdobe$();
          _this.adobe = t1;
          t1.set$version(block.$index(0, 6));
          _this.adobe.toString;
          t1 = block.$index(0, 7);
          if (typeof t1 !== "number")
            return t1.$shl();
          t1 = block.$index(0, 8);
          if (typeof t1 !== "number")
            return H.iae(t1);
          _this.adobe.toString;
          t1 = block.$index(0, 9);
          if (typeof t1 !== "number")
            return t1.$shl();
          t1 = block.$index(0, 10);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = _this.adobe;
          t1.toString;
          t1.set$transformCode(block.$index(0, 11));
        }
    },
    _readDQT$1: function(block) {
      var t1, t2, n, prec, tableData, t3, i, tmp;
      type$.InputBuffer._as(block);
      for (t1 = this.quantizationTables, t2 = J.getInterceptor$asx(t1); !H.boolConversionCheck(block.get$isEOS());) {
        n = block.readByte$0();
        prec = C.JSInt_methods._shrOtherPositive$1(n, 4);
        n &= 15;
        if (n >= 4)
          throw H.wrapException(K.ImageException$("Invalid number of quantization tables"));
        if (t2.$index(t1, n) == null)
          t2.$indexSet(t1, n, H.NativeInt16List_NativeInt16List(64));
        tableData = t2.$index(t1, n);
        for (t3 = prec !== 0, i = 0; i < 64; ++i) {
          tmp = t3 ? block.readUint16$0() : block.readByte$0();
          tableData.toString;
          C.NativeInt16List_methods.$indexSet(tableData, C.List_AZw[i], tmp);
        }
      }
      if (!H.boolConversionCheck(block.get$isEOS()))
        throw H.wrapException(K.ImageException$("Bad length for DQT block"));
    },
    _readFrame$2: function(marker, block) {
      var t1, numComponents, i, componentId, x, t2, qId, _this = this;
      H._asInt(marker);
      type$.InputBuffer._as(block);
      if (_this.frame != null)
        throw H.wrapException(K.ImageException$("Duplicate JPG frame data found."));
      t1 = _this.frame = L.JpegFrame$();
      t1.progressive = marker === 194;
      t1.set$precision(block.readByte$0());
      t1 = _this.frame;
      t1.toString;
      t1.set$scanLines(block.readUint16$0());
      t1 = _this.frame;
      t1.toString;
      t1.set$samplesPerLine(block.readUint16$0());
      numComponents = block.readByte$0();
      for (t1 = _this.quantizationTables, i = 0; i < numComponents; ++i) {
        componentId = block.readByte$0();
        x = block.readByte$0();
        t2 = C.JSInt_methods._shrOtherPositive$1(x, 4);
        qId = block.readByte$0();
        J.add$1$ax(_this.frame.componentsOrder, componentId);
        J.$indexSet$ax(_this.frame.components, componentId, R.JpegComponent$(t2 & 15, x & 15, t1, qId));
      }
      _this.frame.prepare$0();
      J.add$1$ax(_this.frames, _this.frame);
    },
    _readDHT$1: function(block) {
      var ht, ht0, index, bits, t1, count, j, t2, huffmanValues, ht1;
      type$.InputBuffer._as(block);
      for (ht = this.huffmanTablesDC, ht0 = this.huffmanTablesAC; !H.boolConversionCheck(block.get$isEOS());) {
        index = block.readByte$0();
        bits = H.NativeUint8List_NativeUint8List(16);
        for (t1 = bits.length, count = 0, j = 0; j < 16; ++j) {
          C.NativeUint8List_methods.$indexSet(bits, j, block.readByte$0());
          if (j >= t1)
            return H.ioore(bits, j);
          t2 = bits[j];
          if (typeof t2 !== "number")
            return H.iae(t2);
          count += t2;
        }
        huffmanValues = H.NativeUint8List_NativeUint8List(count);
        for (j = 0; j < count; ++j)
          C.NativeUint8List_methods.$indexSet(huffmanValues, j, block.readByte$0());
        if ((index & 16) !== 0) {
          index -= 16;
          ht1 = ht0;
        } else
          ht1 = ht;
        t1 = J.getInterceptor$asx(ht1);
        t2 = t1.get$length(ht1);
        if (typeof t2 !== "number")
          return t2.$le();
        if (t2 <= index)
          t1.set$length(ht1, index + 1);
        t1.$indexSet(ht1, index, this._buildHuffmanTable$2(bits, huffmanValues));
      }
    },
    _readDRI$1: function(block) {
      this.set$resetInterval(type$.InputBuffer._as(block).readUint16$0());
    },
    _readSOS$1: function(block) {
      var n, components, spectralStart, spectralEnd, successiveApproximation, t1, t2, t3, _this = this;
      type$.InputBuffer._as(block);
      n = block.readByte$0();
      if (n < 1 || n > 4)
        throw H.wrapException(K.ImageException$("Invalid SOS block"));
      components = P.List_List$generate(n, new Y.JpegData__readSOS_closure(_this, block), true, type$.JpegComponent);
      spectralStart = block.readByte$0();
      spectralEnd = block.readByte$0();
      successiveApproximation = block.readByte$0();
      t1 = C.JSInt_methods._shrOtherPositive$1(successiveApproximation, 4);
      t2 = _this.get$input();
      t3 = _this.frame;
      t3.toString;
      R.JpegScan$(t2, t3, components, _this.resetInterval, spectralStart, spectralEnd, t1 & 15, successiveApproximation & 15).decode$0();
    },
    _buildHuffmanTable$2: function(codeLengths, values) {
      var code, $length, t2, p, k, q, i, j, t3, t4, t5, t6,
        t1 = type$.Uint8List;
      t1._as(codeLengths);
      t1._as(values);
      code = H.setRuntimeTypeInfo([], type$.JSArray__JpegHuffman);
      t1 = codeLengths.length;
      $length = 16;
      while (true) {
        if ($length > 0) {
          t2 = $length - 1;
          if (t2 >= t1)
            return H.ioore(codeLengths, t2);
          t2 = H.boolConversionCheck(J.$eq$(codeLengths[t2], 0));
        } else
          t2 = false;
        if (!t2)
          break;
        --$length;
      }
      C.JSArray_methods.add$1(code, Y._JpegHuffman$());
      if (0 >= code.length)
        return H.ioore(code, 0);
      p = code[0];
      for (t2 = values.length, k = 0, q = null, i = 0; i < $length;) {
        if (i >= t1)
          return H.ioore(codeLengths, i);
        j = 0;
        while (true) {
          t3 = codeLengths[i];
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(j < t3))
            break;
          if (0 >= code.length)
            return H.ioore(code, -1);
          p = code.pop();
          t3 = p.children;
          t4 = J.getInterceptor$asx(t3);
          t5 = t4.get$length(t3);
          t6 = p.index;
          if (typeof t5 !== "number")
            return t5.$le();
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (t5 <= t6)
            t4.set$length(t3, t6 + 1);
          t5 = p.index;
          if (k < 0 || k >= t2)
            return H.ioore(values, k);
          t4.$indexSet(t3, t5, values[k]);
          while (true) {
            t3 = p.index;
            if (typeof t3 !== "number")
              return t3.$gt();
            if (!(t3 > 0))
              break;
            if (0 >= code.length)
              return H.ioore(code, -1);
            p = code.pop();
          }
          p.set$index(t3 + 1);
          C.JSArray_methods.add$1(code, p);
          for (; code.length <= i; p = q) {
            q = Y._JpegHuffman$();
            C.JSArray_methods.add$1(code, q);
            t3 = p.children;
            t4 = J.getInterceptor$asx(t3);
            t5 = t4.get$length(t3);
            t6 = p.index;
            if (typeof t5 !== "number")
              return t5.$le();
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (t5 <= t6)
              t4.set$length(t3, t6 + 1);
            t4.$indexSet(t3, p.index, q.children);
          }
          ++k;
          ++j;
        }
        ++i;
        if (i < $length) {
          q = Y._JpegHuffman$();
          C.JSArray_methods.add$1(code, q);
          t3 = p.children;
          t4 = J.getInterceptor$asx(t3);
          t5 = t4.get$length(t3);
          t6 = p.index;
          if (typeof t5 !== "number")
            return t5.$le();
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (t5 <= t6)
            t4.set$length(t3, t6 + 1);
          t4.$indexSet(t3, p.index, q.children);
          p = q;
        }
      }
      if (0 >= code.length)
        return H.ioore(code, 0);
      return code[0].children;
    },
    _buildComponentData$2: function(frame, component) {
      var blocksPerLine, blocksPerColumn, samplesPerLine, $R, r, lines, t1, t2, t3, l, blockRow, scanLine, i, l0, blockCol, t4, sample, offset, j, line, offset0;
      type$.nullable_JpegFrame._as(frame);
      type$.JpegComponent._as(component);
      blocksPerLine = component.get$blocksPerLine();
      blocksPerColumn = component.get$blocksPerColumn();
      samplesPerLine = blocksPerLine << 3 >>> 0;
      $R = H.NativeInt32List_NativeInt32List(64);
      r = H.NativeUint8List_NativeUint8List(64);
      lines = P.List_List$filled(blocksPerColumn * 8, null, false, type$.nullable_Uint8List);
      for (t1 = r.length, t2 = J.getInterceptor$asx(lines), t3 = type$.Int32List, l = 0, blockRow = 0; blockRow < blocksPerColumn; ++blockRow) {
        scanLine = blockRow << 3 >>> 0;
        for (i = 0; i < 8; ++i, l = l0) {
          l0 = l + 1;
          t2.$indexSet(lines, l, H.NativeUint8List_NativeUint8List(samplesPerLine));
        }
        for (blockCol = 0; blockCol < blocksPerLine; ++blockCol) {
          t4 = component.get$quantizationTable();
          t4.toString;
          L.quantizeAndInverse(t4, t3._as(J.$index$asx(J.$index$asx(component.get$blocks(), blockRow), blockCol)), r, $R);
          sample = blockCol << 3 >>> 0;
          for (offset = 0, j = 0; j < 8; ++j) {
            line = t2.$index(lines, scanLine + j);
            for (i = 0; i < 8; ++i, offset = offset0) {
              line.toString;
              offset0 = offset + 1;
              if (offset < 0 || offset >= t1)
                return H.ioore(r, offset);
              C.NativeUint8List_methods.$indexSet(line, sample + i, r[offset]);
            }
          }
        }
      }
      return lines;
    },
    set$resetInterval: function(resetInterval) {
      this.resetInterval = H._asIntQ(resetInterval);
    }
  };
  Y.JpegData__readSOS_closure.prototype = {
    call$1: function(i) {
      var t1, id, c, t2, dc_tbl_no, ac_tbl_no, t3, t4, t5;
      H._asInt(i);
      t1 = this.block;
      id = t1.readByte$0();
      c = t1.readByte$0();
      t1 = this.$this;
      if (!H.boolConversionCheck(t1.frame.components.containsKey$1(id)))
        throw H.wrapException(K.ImageException$("Invalid Component in SOS block"));
      t2 = J.$index$asx(t1.frame.components, id);
      t2.toString;
      dc_tbl_no = C.JSInt_methods._shrOtherPositive$1(c, 4) & 15;
      ac_tbl_no = c & 15;
      t3 = t1.huffmanTablesDC;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.get$length(t3);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (dc_tbl_no < t5) {
        t3 = t4.$index(t3, dc_tbl_no);
        t3.toString;
        t2.set$huffmanTableDC(t3);
      }
      t1 = t1.huffmanTablesAC;
      t3 = J.getInterceptor$asx(t1);
      t4 = t3.get$length(t1);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (ac_tbl_no < t4) {
        t1 = t3.$index(t1, ac_tbl_no);
        t1.toString;
        t2.set$huffmanTableAC(t1);
      }
      return t2;
    },
    $signature: 22
  };
  Y._JpegHuffman.prototype = {
    set$index: function(index) {
      this.index = H._asInt(index);
    }
  };
  L.JpegFrame.prototype = {
    get$mcusPerLine: function() {
      var t1 = this.__JpegFrame_mcusPerLine;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("mcusPerLine")) : t1;
    },
    set$mcusPerLine: function(t1) {
      this.__JpegFrame_mcusPerLine = H._asInt(t1);
    },
    get$mcusPerColumn: function() {
      var t1 = this.__JpegFrame_mcusPerColumn;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("mcusPerColumn")) : t1;
    },
    set$mcusPerColumn: function(t1) {
      this.__JpegFrame_mcusPerColumn = H._asInt(t1);
    },
    prepare$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, blocksPerLine, t10, blocksPerColumn, blocksPerLineForMcu, blocksPerColumnForMcu, blocks, _i, _list, _i0, _this = this;
      for (t1 = _this.components, t2 = J.get$iterator$ax(t1.get$keys()), t3 = J.getInterceptor$asx(t1), t4 = type$.int; H.boolConversionCheck(t2.moveNext$0());) {
        t5 = t3.$index(t1, t2.get$current());
        t5.toString;
        _this.set$maxHSamples(P.max(_this.maxHSamples, t5.hSamples, t4));
        _this.set$maxVSamples(P.max(_this.maxVSamples, t5.vSamples, t4));
      }
      t2 = _this.samplesPerLine;
      t2.toString;
      if (typeof t2 !== "number")
        return t2.$div();
      t4 = _this.maxHSamples;
      if (typeof t4 !== "number")
        return H.iae(t4);
      _this.set$mcusPerLine(C.JSNumber_methods.ceil$0(t2 / 8 / t4));
      t4 = _this.scanLines;
      t4.toString;
      if (typeof t4 !== "number")
        return t4.$div();
      t2 = _this.maxVSamples;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.set$mcusPerColumn(C.JSNumber_methods.ceil$0(t4 / 8 / t2));
      for (t2 = J.get$iterator$ax(t1.get$keys()), t4 = type$.Int32List, t5 = type$.List_Int32List; H.boolConversionCheck(t2.moveNext$0());) {
        t6 = t3.$index(t1, t2.get$current());
        t6.toString;
        t7 = _this.samplesPerLine;
        t7.toString;
        if (typeof t7 !== "number")
          return t7.$div();
        t7 = C.JSNumber_methods.ceil$0(t7 / 8);
        t8 = t6.hSamples;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t8 !== "number")
          return H.iae(t8);
        t9 = _this.maxHSamples;
        if (typeof t9 !== "number")
          return H.iae(t9);
        blocksPerLine = C.JSNumber_methods.ceil$0(t7 * t8 / t9);
        t9 = _this.scanLines;
        t9.toString;
        if (typeof t9 !== "number")
          return t9.$div();
        t9 = C.JSNumber_methods.ceil$0(t9 / 8);
        t7 = t6.vSamples;
        if (typeof t9 !== "number")
          return t9.$mul();
        if (typeof t7 !== "number")
          return H.iae(t7);
        t10 = _this.maxVSamples;
        if (typeof t10 !== "number")
          return H.iae(t10);
        blocksPerColumn = C.JSNumber_methods.ceil$0(t9 * t7 / t10);
        t10 = _this.get$mcusPerLine();
        if (typeof t10 !== "number")
          return t10.$mul();
        blocksPerLineForMcu = t10 * t8;
        t8 = _this.get$mcusPerColumn();
        if (typeof t8 !== "number")
          return t8.$mul();
        blocksPerColumnForMcu = t8 * t7;
        blocks = J.JSArray_JSArray$allocateFixed(blocksPerColumnForMcu, t5);
        for (_i = 0; _i < blocksPerColumnForMcu; ++_i) {
          _list = J.JSArray_JSArray$allocateFixed(blocksPerLineForMcu, t4);
          for (_i0 = 0; _i0 < blocksPerLineForMcu; ++_i0)
            C.JSArray_methods.$indexSet(_list, _i0, H.NativeInt32List_NativeInt32List(64));
          C.JSArray_methods.$indexSet(blocks, _i, _list);
        }
        t6.set$blocksPerLine(blocksPerLine);
        t6.set$blocksPerColumn(blocksPerColumn);
        t6.set$blocks(blocks);
      }
    },
    set$precision: function(precision) {
      this.precision = H._asIntQ(precision);
    },
    set$scanLines: function(scanLines) {
      this.scanLines = H._asIntQ(scanLines);
    },
    set$samplesPerLine: function(samplesPerLine) {
      this.samplesPerLine = H._asIntQ(samplesPerLine);
    },
    set$maxHSamples: function(maxHSamples) {
      this.maxHSamples = H._asInt(maxHSamples);
    },
    set$maxVSamples: function(maxVSamples) {
      this.maxVSamples = H._asInt(maxVSamples);
    }
  };
  S.JpegJfif.prototype = {
    get$thumbWidth: function() {
      var t1 = this.__JpegJfif_thumbWidth;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("thumbWidth")) : t1;
    },
    set$thumbWidth: function(t1) {
      this.__JpegJfif_thumbWidth = H._asInt(t1);
    },
    get$thumbHeight: function() {
      var t1 = this.__JpegJfif_thumbHeight;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("thumbHeight")) : t1;
    },
    set$thumbHeight: function(t1) {
      this.__JpegJfif_thumbHeight = H._asInt(t1);
    },
    set$majorVersion: function(majorVersion) {
      H._asIntQ(majorVersion);
    },
    set$minorVersion: function(minorVersion) {
      H._asIntQ(minorVersion);
    },
    set$densityUnits: function(densityUnits) {
      H._asIntQ(densityUnits);
    },
    set$thumbData: function(thumbData) {
      type$.nullable_InputBuffer._as(thumbData);
    }
  };
  R.JpegScan.prototype = {
    get$mcusPerLine: function() {
      var t1 = this.__JpegScan_mcusPerLine;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("mcusPerLine")) : t1;
    },
    set$mcusPerLine: function(t1) {
      this.__JpegScan_mcusPerLine = H._asInt(t1);
    },
    get$successiveACNextValue: function() {
      var t1 = this.__JpegScan_successiveACNextValue;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("successiveACNextValue")) : t1;
    },
    set$successiveACNextValue: function(t1) {
      this.__JpegScan_successiveACNextValue = H._asInt(t1);
    },
    JpegScan$8: function(input, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
      var _this = this,
        t1 = _this.frame;
      _this.set$precision(t1.precision);
      _this.set$samplesPerLine(t1.samplesPerLine);
      _this.set$scanLines(t1.scanLines);
      _this.set$mcusPerLine(t1.get$mcusPerLine());
      _this.set$progressive(t1.progressive);
      _this.set$maxH(t1.maxHSamples);
      _this.set$maxV(t1.maxVSamples);
    },
    decode$0: function() {
      var decodeFn, t4, t5, mcuExpected, component, mcu, h, v, i, n, t6, j, k, m1, m2, _this = this,
        t1 = _this.components,
        t2 = J.getInterceptor$asx(t1),
        componentsLength = t2.get$length(t1),
        t3 = _this.progressive;
      t3.toString;
      if (H.boolConversionCheck(t3))
        if (H.boolConversionCheck(J.$eq$(_this.spectralStart, 0)))
          decodeFn = H.boolConversionCheck(J.$eq$(_this.successivePrev, 0)) ? _this.get$_decodeDCFirst() : _this.get$_decodeDCSuccessive();
        else
          decodeFn = H.boolConversionCheck(J.$eq$(_this.successivePrev, 0)) ? _this.get$_decodeACFirst() : _this.get$_decodeACSuccessive();
      else
        decodeFn = _this.get$_decodeBaseline();
      t3 = componentsLength === 1;
      if (t3) {
        t4 = t2.$index(t1, 0).get$blocksPerLine();
        t5 = t2.$index(t1, 0).get$blocksPerColumn();
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        mcuExpected = t4 * t5;
      } else {
        t4 = _this.get$mcusPerLine();
        t5 = _this.frame.get$mcusPerColumn();
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        mcuExpected = t4 * t5;
      }
      t4 = _this.resetInterval;
      if (t4 == null || H.boolConversionCheck(J.$eq$(t4, 0)))
        _this.resetInterval = mcuExpected;
      for (t4 = _this.input, t5 = J.getInterceptor$asx(t4), component = null, mcu = 0, h = null, v = null; mcu < mcuExpected;) {
        for (i = 0; i < componentsLength; ++i)
          t2.$index(t1, i).set$pred(0);
        _this.eobrun = 0;
        if (t3) {
          component = t2.$index(t1, 0);
          n = 0;
          while (true) {
            t6 = _this.resetInterval;
            t6.toString;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (!(n < t6))
              break;
            _this._decodeBlock$3(component, decodeFn, mcu);
            ++mcu;
            ++n;
          }
        } else {
          n = 0;
          while (true) {
            t6 = _this.resetInterval;
            t6.toString;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (!(n < t6))
              break;
            for (i = 0; i < componentsLength; ++i) {
              component = t2.$index(t1, i);
              h = component.hSamples;
              v = component.vSamples;
              for (j = 0; j < v; ++j)
                for (k = 0; k < h; ++k)
                  _this._decodeMcu$5(component, decodeFn, mcu, j, k);
            }
            ++mcu;
            ++n;
          }
        }
        _this.bitsCount = 0;
        m1 = t5.$index(t4, 0);
        m2 = t5.$index(t4, 1);
        if (m1 === 255)
          if (m2 >= 208 && m2 <= 215) {
            t6 = t4.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            t5.set$offset(t4, t6 + 2);
          } else
            break;
      }
    },
    _readBit$0: function() {
      var t2, nextByte, _this = this,
        t1 = _this.bitsCount;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this.set$bitsCount(t1 - 1);
        t1 = _this.bitsData;
        t2 = _this.bitsCount;
        if (typeof t1 !== "number")
          return t1.$shr();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return C.JSNumber_methods.$shr(t1, t2) & 1;
      }
      t1 = _this.input;
      if (H.boolConversionCheck(t1.get$isEOS()))
        return null;
      _this.set$bitsData(t1.readByte$0());
      if (H.boolConversionCheck(J.$eq$(_this.bitsData, 255))) {
        nextByte = t1.readByte$0();
        if (nextByte !== 0) {
          t1 = _this.bitsData;
          if (typeof t1 !== "number")
            return t1.$shl();
          throw H.wrapException(K.ImageException$("unexpected marker: " + H.S(C.JSInt_methods.toRadixString$1((t1 << 8 | nextByte) >>> 0, 16))));
        }
      }
      _this.bitsCount = 7;
      t1 = _this.bitsData;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSNumber_methods._shrOtherPositive$1(t1, 7) & 1;
    },
    _jpeg_scan$_decodeHuffman$1: function(tree) {
      var node, bit,
        t1 = type$.List_dynamic;
      t1._as(tree);
      for (node = tree; bit = this._readBit$0(), bit != null;) {
        node = J.$index$asx(t1._as(node), bit);
        if (typeof node == "number")
          return C.JSNumber_methods.toInt$0(node);
      }
      return null;
    },
    _receive$1: function($length) {
      var n, bit;
      H._asInt($length);
      for (n = 0; $length > 0;) {
        bit = this._readBit$0();
        if (bit == null)
          return null;
        n = (n << 1 | bit) >>> 0;
        --$length;
      }
      return n;
    },
    _receiveAndExtend$1: function($length) {
      var t1;
      H._asIntQ($length);
      if ($length === 1)
        return H.boolConversionCheck(J.$eq$(this._readBit$0(), 1)) ? 1 : -1;
      $length.toString;
      t1 = this._receive$1($length);
      t1.toString;
      if (t1 >= C.JSInt_methods.$shl(1, $length - 1))
        return t1;
      return t1 + C.JSInt_methods.$shl(-1, $length) + 1;
    },
    _decodeBaseline$2: function(component, zz) {
      var t, diff, t1, k, t2, s, r, _this = this;
      type$.JpegComponent._as(component);
      type$.List_dynamic._as(zz);
      t = _this._jpeg_scan$_decodeHuffman$1(component.get$huffmanTableDC());
      diff = t === 0 ? 0 : _this._receiveAndExtend$1(t);
      t1 = component.get$pred();
      if (typeof t1 !== "number")
        return t1.$add();
      component.set$pred(t1 + diff);
      t1 = J.getInterceptor$ax(zz);
      t1.$indexSet(zz, 0, component.get$pred());
      for (k = 1; k < 64;) {
        t2 = _this._jpeg_scan$_decodeHuffman$1(component.get$huffmanTableAC());
        t2.toString;
        s = t2 & 15;
        r = C.JSInt_methods._shrOtherPositive$1(t2, 4);
        if (s === 0) {
          if (r < 15)
            break;
          k += 16;
          continue;
        }
        k += r;
        s = _this._receiveAndExtend$1(s);
        if (k < 0 || k >= 80)
          return H.ioore(C.List_AZw, k);
        t1.$indexSet(zz, C.List_AZw[k], s);
        ++k;
      }
    },
    _decodeDCFirst$2: function(component, zz) {
      var t, diff, t1, t2;
      type$.JpegComponent._as(component);
      type$.List_dynamic._as(zz);
      t = this._jpeg_scan$_decodeHuffman$1(component.get$huffmanTableDC());
      if (t === 0)
        diff = 0;
      else {
        t1 = this._receiveAndExtend$1(t);
        t2 = this.successive;
        if (typeof t1 !== "number")
          return t1.$shl();
        if (typeof t2 !== "number")
          return H.iae(t2);
        diff = C.JSNumber_methods.$shl(t1, t2);
      }
      t1 = component.get$pred();
      if (typeof t1 !== "number")
        return t1.$add();
      component.set$pred(t1 + diff);
      J.$indexSet$ax(zz, 0, component.get$pred());
    },
    _decodeDCSuccessive$2: function(component, zz) {
      var t1, t2, t3, t4;
      type$.JpegComponent._as(component);
      type$.List_int._as(zz);
      t1 = J.getInterceptor$asx(zz);
      t2 = t1.$index(zz, 0);
      t3 = this._readBit$0();
      t3.toString;
      t4 = this.successive;
      if (typeof t3 !== "number")
        return t3.$shl();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = C.JSNumber_methods.$shl(t3, t4);
      if (typeof t2 !== "number")
        return t2.$or();
      t1.$indexSet(zz, 0, (t2 | t4) >>> 0);
    },
    _decodeACFirst$2: function(component, zz) {
      var t1, k, e, t2, t3, s, r, z, t4, _this = this;
      type$.JpegComponent._as(component);
      type$.List_dynamic._as(zz);
      t1 = _this.eobrun;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        _this.set$eobrun(t1 - 1);
        return;
      }
      k = _this.spectralStart;
      e = _this.spectralEnd;
      for (t1 = _this.successive, t2 = J.getInterceptor$ax(zz); k <= e;) {
        t3 = _this._jpeg_scan$_decodeHuffman$1(component.get$huffmanTableAC());
        t3.toString;
        s = t3 & 15;
        r = C.JSInt_methods._shrOtherPositive$1(t3, 4);
        if (s === 0) {
          if (r < 15) {
            t1 = _this._receive$1(r);
            t1.toString;
            t2 = C.JSInt_methods._shlPositive$1(1, r);
            if (typeof t1 !== "number")
              return t1.$add();
            _this.set$eobrun(t1 + t2 - 1);
            break;
          }
          k += 16;
          continue;
        }
        k += r;
        if (k < 0 || k >= 80)
          return H.ioore(C.List_AZw, k);
        z = C.List_AZw[k];
        t3 = _this._receiveAndExtend$1(s);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = C.JSInt_methods.$shl(1, t1);
        if (typeof t3 !== "number")
          return t3.$mul();
        t2.$indexSet(zz, z, t3 * t4);
        ++k;
      }
    },
    _decodeACSuccessive$2: function(component, zz) {
      var k, e, t1, t2, s, r, z, rs, t3, t4, _this = this;
      type$.JpegComponent._as(component);
      type$.List_int._as(zz);
      k = _this.spectralStart;
      e = _this.spectralEnd;
      for (t1 = J.getInterceptor$asx(zz), t2 = _this.successive, s = 0, r = 0; k <= e;) {
        if (k < 0 || k >= 80)
          return H.ioore(C.List_AZw, k);
        z = C.List_AZw[k];
        switch (_this.successiveACState) {
          case 0:
            rs = _this._jpeg_scan$_decodeHuffman$1(component.get$huffmanTableAC());
            if (rs == null)
              continue;
            s = rs & 15;
            r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
            if (s === 0)
              if (r < 15) {
                t3 = _this._receive$1(r);
                t3.toString;
                t4 = C.JSInt_methods._shlPositive$1(1, r);
                if (typeof t3 !== "number")
                  return t3.$add();
                _this.set$eobrun(t3 + t4);
                _this.successiveACState = 4;
              } else {
                _this.successiveACState = 1;
                r = 16;
              }
            else {
              if (s !== 1)
                throw H.wrapException(K.ImageException$("invalid ACn encoding"));
              _this.set$successiveACNextValue(_this._receiveAndExtend$1(s));
              _this.successiveACState = r !== 0 ? 2 : 3;
            }
            continue;
          case 1:
          case 2:
            if (!H.boolConversionCheck(J.$eq$(t1.$index(zz, z), 0))) {
              t3 = t1.$index(zz, z);
              t4 = _this._readBit$0();
              t4.toString;
              if (typeof t4 !== "number")
                return t4.$shl();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = C.JSNumber_methods.$shl(t4, t2);
              if (typeof t3 !== "number")
                return t3.$add();
              t1.$indexSet(zz, z, t3 + t4);
            } else {
              --r;
              if (r === 0)
                _this.successiveACState = H.boolConversionCheck(J.$eq$(_this.successiveACState, 2)) ? 3 : 0;
            }
            break;
          case 3:
            if (!H.boolConversionCheck(J.$eq$(t1.$index(zz, z), 0))) {
              t3 = t1.$index(zz, z);
              t4 = _this._readBit$0();
              t4.toString;
              if (typeof t4 !== "number")
                return t4.$shl();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = C.JSNumber_methods.$shl(t4, t2);
              if (typeof t3 !== "number")
                return t3.$add();
              t1.$indexSet(zz, z, t3 + t4);
            } else {
              t3 = _this.get$successiveACNextValue();
              if (typeof t3 !== "number")
                return t3.$shl();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1.$indexSet(zz, z, C.JSNumber_methods.$shl(t3, t2));
              _this.successiveACState = 0;
            }
            break;
          case 4:
            if (!H.boolConversionCheck(J.$eq$(t1.$index(zz, z), 0))) {
              t3 = t1.$index(zz, z);
              t4 = _this._readBit$0();
              t4.toString;
              if (typeof t4 !== "number")
                return t4.$shl();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = C.JSNumber_methods.$shl(t4, t2);
              if (typeof t3 !== "number")
                return t3.$add();
              t1.$indexSet(zz, z, t3 + t4);
            }
            break;
        }
        ++k;
      }
      if (H.boolConversionCheck(J.$eq$(_this.successiveACState, 4))) {
        t1 = _this.eobrun;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$eobrun(t1 - 1);
        if (H.boolConversionCheck(J.$eq$(_this.eobrun, 0)))
          _this.successiveACState = 0;
      }
    },
    _decodeMcu$5: function(component, decodeFn, mcu, row, col) {
      var t1, mcuRow, mcuCol, blockRow, blockCol;
      type$.JpegComponent._as(component);
      type$.void_Function_2_JpegComponent_and_List_int._as(decodeFn);
      H._asInt(mcu);
      H._asInt(row);
      H._asInt(col);
      t1 = this.get$mcusPerLine();
      if (typeof t1 !== "number")
        return H.iae(t1);
      mcuRow = C.JSInt_methods.$tdiv(mcu, t1);
      t1 = this.get$mcusPerLine();
      if (typeof t1 !== "number")
        return H.iae(t1);
      mcuCol = C.JSInt_methods.$mod(mcu, t1);
      t1 = component.vSamples;
      if (typeof t1 !== "number")
        return H.iae(t1);
      blockRow = mcuRow * t1 + row;
      t1 = component.hSamples;
      if (typeof t1 !== "number")
        return H.iae(t1);
      blockCol = mcuCol * t1 + col;
      t1 = J.get$length$asx(component.get$blocks());
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (blockRow >= t1)
        return;
      if (blockCol >= J.get$length$asx(J.$index$asx(component.get$blocks(), blockRow)))
        return;
      decodeFn.call$2(component, J.$index$asx(J.$index$asx(component.get$blocks(), blockRow), blockCol));
    },
    _decodeBlock$3: function(component, decodeFn, mcu) {
      var t1, blockRow, blockCol;
      type$.JpegComponent._as(component);
      type$.void_Function_2_JpegComponent_and_List_int._as(decodeFn);
      H._asInt(mcu);
      t1 = component.get$blocksPerLine();
      if (typeof t1 !== "number")
        return H.iae(t1);
      blockRow = C.JSInt_methods.$tdiv(mcu, t1);
      t1 = component.get$blocksPerLine();
      if (typeof t1 !== "number")
        return H.iae(t1);
      blockCol = C.JSInt_methods.$mod(mcu, t1);
      decodeFn.call$2(component, J.$index$asx(J.$index$asx(component.get$blocks(), blockRow), blockCol));
    },
    set$precision: function(precision) {
      H._asIntQ(precision);
    },
    set$samplesPerLine: function(samplesPerLine) {
      H._asIntQ(samplesPerLine);
    },
    set$scanLines: function(scanLines) {
      H._asIntQ(scanLines);
    },
    set$progressive: function(progressive) {
      this.progressive = H._asBoolQ(progressive);
    },
    set$maxH: function(maxH) {
      H._asIntQ(maxH);
    },
    set$maxV: function(maxV) {
      H._asIntQ(maxV);
    },
    set$bitsData: function(bitsData) {
      this.bitsData = H._asInt(bitsData);
    },
    set$bitsCount: function(bitsCount) {
      this.bitsCount = H._asInt(bitsCount);
    },
    set$eobrun: function(eobrun) {
      this.eobrun = H._asInt(eobrun);
    }
  };
  Z.JpegDecoder.prototype = {
    isValidFile$1: function(data) {
      type$.List_int._as(data);
      return Y.JpegData$().validate$1(data);
    },
    decodeImage$1: function(bytes) {
      var jpeg;
      type$.List_int._as(bytes);
      jpeg = Y.JpegData$();
      jpeg.read$1(bytes);
      if (!H.boolConversionCheck(J.$eq$(J.get$length$asx(jpeg.frames), 1)))
        throw H.wrapException(K.ImageException$("only single frame JPEGs supported"));
      return jpeg.getImage$0();
    }
  };
  Z.JpegEncoder.prototype = {
    JpegEncoder$1$quality: function(quality) {
      var _this = this;
      _this._initHuffmanTbl$0();
      _this._initCategoryNumber$0();
      _this._initRGBYUVTable$0();
      _this.setQuality$1(quality);
    },
    setQuality$1: function(quality) {
      quality = J.toInt$0$n(C.JSInt_methods.clamp$2(H._asInt(quality), 0, 100));
      if (H.boolConversionCheck(J.$eq$(this.currentQuality, quality)))
        return;
      this._initQuantTables$1(quality < 50 ? C.JSNumber_methods.floor$0(5000 / quality) : C.JSInt_methods.floor$0(200 - quality * 2));
      this.currentQuality = quality;
    },
    encodeImage$1: function(image) {
      var fp, t1, t2, imageData, quadWidth, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, DCY, DCU, DCV, y, t13, t14, x, start, pos, row, col, p, t15, p0, r, g, b, t16, t17, _this = this;
      type$.Image._as(image);
      fp = G.OutputBuffer$(true, 8192);
      _this._writeMarker$2(fp, 216);
      _this._writeAPP0$1(fp);
      _this._writeAPP1$2(fp, image.exif);
      _this._writeDQT$1(fp);
      t1 = image.width;
      t2 = image.height;
      _this._writeSOF0$3(fp, t1, t2);
      _this._writeDHT$1(fp);
      _this._writeSOS$1(fp);
      _this._resetBits$0();
      imageData = image.getBytes$0();
      quadWidth = t1 * 4;
      for (t1 = _this.YDU, t3 = _this.fdtbl_Y, t4 = _this.UDU, t5 = _this.fdtbl_UV, t6 = _this.VDU, t7 = imageData.length, t8 = _this.RGB_YUV_TABLE, t9 = J.getInterceptor$asx(t8), t10 = J.getInterceptor$ax(t1), t11 = J.getInterceptor$ax(t4), t12 = J.getInterceptor$ax(t6), DCY = 0, DCU = 0, DCV = 0, y = 0; y < t2;) {
        for (t13 = y + 1, t14 = quadWidth * y, x = 0; x < quadWidth;) {
          start = t14 + x;
          for (pos = 0; pos < 64; ++pos) {
            row = pos >>> 3;
            col = (pos & 7) * 4;
            p = start + row * quadWidth + col;
            if (y + row >= t2)
              p -= quadWidth * (t13 + row - t2);
            t15 = x + col;
            if (t15 >= quadWidth)
              p -= t15 - quadWidth + 4;
            p0 = p + 1;
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            r = imageData[p];
            p = p0 + 1;
            if (p0 < 0 || p0 >= t7)
              return H.ioore(imageData, p0);
            g = imageData[p0];
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            b = imageData[p];
            t15 = t9.$index(t8, r);
            t16 = t9.$index(t8, g + 256);
            if (typeof t15 !== "number")
              return t15.$add();
            if (typeof t16 !== "number")
              return H.iae(t16);
            t17 = t9.$index(t8, b + 512);
            if (typeof t17 !== "number")
              return H.iae(t17);
            t10.$indexSet(t1, pos, C.JSNumber_methods._shrOtherPositive$1(t15 + t16 + t17, 16) - 128);
            t17 = t9.$index(t8, r + 768);
            t16 = t9.$index(t8, g + 1024);
            if (typeof t17 !== "number")
              return t17.$add();
            if (typeof t16 !== "number")
              return H.iae(t16);
            t15 = t9.$index(t8, b + 1280);
            if (typeof t15 !== "number")
              return H.iae(t15);
            t11.$indexSet(t4, pos, C.JSNumber_methods._shrOtherPositive$1(t17 + t16 + t15, 16) - 128);
            t15 = t9.$index(t8, r + 1280);
            t16 = t9.$index(t8, g + 1536);
            if (typeof t15 !== "number")
              return t15.$add();
            if (typeof t16 !== "number")
              return H.iae(t16);
            t17 = t9.$index(t8, b + 1792);
            if (typeof t17 !== "number")
              return H.iae(t17);
            t12.$indexSet(t6, pos, C.JSNumber_methods._shrOtherPositive$1(t15 + t16 + t17, 16) - 128);
          }
          DCY.toString;
          DCY = _this._processDU$6(fp, t1, t3, DCY, _this.YDC_HT, _this.get$YAC_HT());
          DCU.toString;
          DCU = _this._processDU$6(fp, t4, t5, DCU, _this.UVDC_HT, _this.get$UVAC_HT());
          DCV.toString;
          DCV = _this._processDU$6(fp, t6, t5, DCV, _this.UVDC_HT, _this.get$UVAC_HT());
          x += 32;
        }
        y += 8;
      }
      t1 = _this._bytepos;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0) {
        ++t1;
        _this._writeBits$2(fp, H.setRuntimeTypeInfo([C.JSInt_methods.$shl(1, t1) - 1, t1], type$.JSArray_int));
      }
      _this._writeMarker$2(fp, 217);
      return fp.getBytes$0();
    },
    _writeMarker$2: function(fp, marker) {
      type$.OutputBuffer._as(fp);
      H._asInt(marker);
      fp.writeByte$1(255);
      fp.writeByte$1(marker & 255);
    },
    _initQuantTables$1: function(sf) {
      var t1, t2, i, t3, t, t4, j, t5, u, t6, t7, t8, k, row, col, t9, t10, t11, _this = this;
      H._asInt(sf);
      for (t1 = _this.YTable, t2 = J.getInterceptor$asx(t1), i = 0; i < 64; ++i) {
        t3 = C.List_kcl0[i];
        if (typeof t3 !== "number")
          return t3.$mul();
        t = C.JSNumber_methods.floor$0((t3 * sf + 50) / 100);
        if (t < 1)
          t = 1;
        else if (t > 255)
          t = 255;
        t2.$indexSet(t1, C.List_kcl[i], t);
      }
      for (t3 = _this.UVTable, t4 = J.getInterceptor$asx(t3), j = 0; j < 64; ++j) {
        t5 = C.List_kcl1[j];
        if (typeof t5 !== "number")
          return t5.$mul();
        u = C.JSNumber_methods.floor$0((t5 * sf + 50) / 100);
        if (u < 1)
          u = 1;
        else if (u > 255)
          u = 255;
        t4.$indexSet(t3, C.List_kcl[j], u);
      }
      for (t5 = _this.fdtbl_Y, t6 = J.getInterceptor$ax(t5), t7 = _this.fdtbl_UV, t8 = J.getInterceptor$ax(t7), k = 0, row = 0; row < 8; ++row)
        for (col = 0; col < 8; ++col) {
          if (k < 0 || k >= 64)
            return H.ioore(C.List_kcl, k);
          t9 = t2.$index(t1, C.List_kcl[k]);
          t10 = C.List_K2a[row];
          if (typeof t9 !== "number")
            return t9.$mul();
          if (typeof t10 !== "number")
            return H.iae(t10);
          t11 = C.List_K2a[col];
          if (typeof t11 !== "number")
            return H.iae(t11);
          t6.$indexSet(t5, k, 1 / (t9 * t10 * t11 * 8));
          t11 = t4.$index(t3, C.List_kcl[k]);
          t10 = C.List_K2a[row];
          if (typeof t11 !== "number")
            return t11.$mul();
          if (typeof t10 !== "number")
            return H.iae(t10);
          t9 = C.List_K2a[col];
          if (typeof t9 !== "number")
            return H.iae(t9);
          t8.$indexSet(t7, k, 1 / (t11 * t10 * t9 * 8));
          ++k;
        }
    },
    _computeHuffmanTbl$2: function(nrcodes, std_table) {
      var HT, t2, t3, codevalue, pos_in_table, k, j, t4, index,
        t1 = type$.List_int;
      t1._as(nrcodes);
      t1._as(std_table);
      t1 = type$.JSArray_int;
      HT = H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([], t1)], type$.JSArray_nullable_List_int);
      for (t2 = J.getInterceptor$asx(nrcodes), t3 = J.getInterceptor$asx(std_table), codevalue = 0, pos_in_table = 0, k = 1; k <= 16; ++k) {
        j = 1;
        while (true) {
          t4 = t2.$index(nrcodes, k);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(j <= t4))
            break;
          index = t3.$index(std_table, pos_in_table);
          if (HT.length <= index)
            C.JSArray_methods.set$length(HT, index + 1);
          C.JSArray_methods.$indexSet(HT, index, H.setRuntimeTypeInfo([codevalue, k], t1));
          ++pos_in_table;
          ++codevalue;
          ++j;
        }
        codevalue *= 2;
      }
      return HT;
    },
    _initHuffmanTbl$0: function() {
      var _this = this;
      _this.set$YDC_HT(_this._computeHuffmanTbl$2(C.List_F1L, C.List_UiL));
      _this.set$UVDC_HT(_this._computeHuffmanTbl$2(C.List_F1L1, C.List_UiL));
      _this.set$YAC_HT(_this._computeHuffmanTbl$2(C.List_F1L0, C.List_G61));
      _this.set$UVAC_HT(_this._computeHuffmanTbl$2(C.List_F1L2, C.List_AKW));
    },
    _initCategoryNumber$0: function() {
      var t1, t2, t3, t4, t5, nrlower, nrupper, cat, nr, t6, nrneg, t7, t8;
      for (t1 = this.category, t2 = J.getInterceptor$ax(t1), t3 = this.bitcode, t4 = type$.JSArray_int, t5 = J.getInterceptor$ax(t3), nrlower = 1, nrupper = 2, cat = 1; cat <= 15; ++cat) {
        for (nr = nrlower; nr < nrupper; ++nr) {
          t6 = 32767 + nr;
          t2.$indexSet(t1, t6, cat);
          t5.$indexSet(t3, t6, H.setRuntimeTypeInfo([nr, cat], t4));
        }
        for (t6 = nrupper - 1, nrneg = -t6, t7 = -nrlower; nrneg <= t7; ++nrneg) {
          t8 = 32767 + nrneg;
          t2.$indexSet(t1, t8, cat);
          t5.$indexSet(t3, t8, H.setRuntimeTypeInfo([t6 + nrneg, cat], t4));
        }
        nrlower = nrlower << 1 >>> 0;
        nrupper = nrupper << 1 >>> 0;
      }
    },
    _initRGBYUVTable$0: function() {
      var t1, t2, i;
      for (t1 = this.RGB_YUV_TABLE, t2 = J.getInterceptor$ax(t1), i = 0; i < 256; ++i) {
        t2.$indexSet(t1, i, 19595 * i);
        t2.$indexSet(t1, i + 256, 38470 * i);
        t2.$indexSet(t1, i + 512, 7471 * i + 32768);
        t2.$indexSet(t1, i + 768, -11059 * i);
        t2.$indexSet(t1, i + 1024, -21709 * i);
        t2.$indexSet(t1, i + 1280, 32768 * i + 8421375);
        t2.$indexSet(t1, i + 1536, -27439 * i);
        t2.$indexSet(t1, i + 1792, -5329 * i);
      }
    },
    _fDCTQuant$2: function(data, fdtbl) {
      var dataOff, i, d0, t2, d1, t3, d2, t4, d3, t5, d4, t6, d5, t7, d6, t8, d7, tmp0, tmp7, tmp1, tmp6, tmp2, tmp5, tmp3, tmp10, tmp13, tmp11, z1, tmp12, z5, z2, z4, z3, z11, z13, tmp0p2, tmp7p2, tmp1p2, tmp6p2, tmp2p2, tmp5p2, tmp3p2, tmp10p2, tmp13p2, tmp11p2, z1p2, tmp12p2, z5p2, z2p2, z4p2, z3p2, z11p2, z13p2, fDCTQuant,
        t1 = type$.List_double;
      t1._as(data);
      t1._as(fdtbl);
      for (t1 = J.getInterceptor$asx(data), dataOff = 0, i = 0; i < 8; ++i) {
        d0 = t1.$index(data, dataOff);
        t2 = dataOff + 1;
        d1 = t1.$index(data, t2);
        t3 = dataOff + 2;
        d2 = t1.$index(data, t3);
        t4 = dataOff + 3;
        d3 = t1.$index(data, t4);
        t5 = dataOff + 4;
        d4 = t1.$index(data, t5);
        t6 = dataOff + 5;
        d5 = t1.$index(data, t6);
        t7 = dataOff + 6;
        d6 = t1.$index(data, t7);
        t8 = dataOff + 7;
        d7 = t1.$index(data, t8);
        tmp0 = d0 + d7;
        tmp7 = d0 - d7;
        tmp1 = d1 + d6;
        tmp6 = d1 - d6;
        tmp2 = d2 + d5;
        tmp5 = d2 - d5;
        tmp3 = d3 + d4;
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        t1.$indexSet(data, dataOff, tmp10 + tmp11);
        t1.$indexSet(data, t5, tmp10 - tmp11);
        z1 = (tmp1 - tmp2 + tmp13) * 0.707106781;
        t1.$indexSet(data, t3, tmp13 + z1);
        t1.$indexSet(data, t7, tmp13 - z1);
        tmp10 = d3 - d4 + tmp5;
        tmp12 = tmp6 + tmp7;
        z5 = (tmp10 - tmp12) * 0.382683433;
        z2 = 0.5411961 * tmp10 + z5;
        z4 = 1.306562965 * tmp12 + z5;
        z3 = (tmp5 + tmp6) * 0.707106781;
        z11 = tmp7 + z3;
        z13 = tmp7 - z3;
        t1.$indexSet(data, t6, z13 + z2);
        t1.$indexSet(data, t4, z13 - z2);
        t1.$indexSet(data, t2, z11 + z4);
        t1.$indexSet(data, t8, z11 - z4);
        dataOff += 8;
      }
      for (dataOff = 0, i = 0; i < 8; ++i) {
        d0 = t1.$index(data, dataOff);
        t2 = dataOff + 8;
        d1 = t1.$index(data, t2);
        t3 = dataOff + 16;
        d2 = t1.$index(data, t3);
        t4 = dataOff + 24;
        d3 = t1.$index(data, t4);
        t5 = dataOff + 32;
        d4 = t1.$index(data, t5);
        t6 = dataOff + 40;
        d5 = t1.$index(data, t6);
        t7 = dataOff + 48;
        d6 = t1.$index(data, t7);
        t8 = dataOff + 56;
        d7 = t1.$index(data, t8);
        tmp0p2 = d0 + d7;
        tmp7p2 = d0 - d7;
        tmp1p2 = d1 + d6;
        tmp6p2 = d1 - d6;
        tmp2p2 = d2 + d5;
        tmp5p2 = d2 - d5;
        tmp3p2 = d3 + d4;
        tmp10p2 = tmp0p2 + tmp3p2;
        tmp13p2 = tmp0p2 - tmp3p2;
        tmp11p2 = tmp1p2 + tmp2p2;
        t1.$indexSet(data, dataOff, tmp10p2 + tmp11p2);
        t1.$indexSet(data, t5, tmp10p2 - tmp11p2);
        z1p2 = (tmp1p2 - tmp2p2 + tmp13p2) * 0.707106781;
        t1.$indexSet(data, t3, tmp13p2 + z1p2);
        t1.$indexSet(data, t7, tmp13p2 - z1p2);
        tmp10p2 = d3 - d4 + tmp5p2;
        tmp12p2 = tmp6p2 + tmp7p2;
        z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
        z2p2 = 0.5411961 * tmp10p2 + z5p2;
        z4p2 = 1.306562965 * tmp12p2 + z5p2;
        z3p2 = (tmp5p2 + tmp6p2) * 0.707106781;
        z11p2 = tmp7p2 + z3p2;
        z13p2 = tmp7p2 - z3p2;
        t1.$indexSet(data, t6, z13p2 + z2p2);
        t1.$indexSet(data, t4, z13p2 - z2p2);
        t1.$indexSet(data, t2, z11p2 + z4p2);
        t1.$indexSet(data, t8, z11p2 - z4p2);
        ++dataOff;
      }
      for (t2 = J.getInterceptor$asx(fdtbl), t3 = this.outputfDCTQuant, i = 0; i < 64; ++i) {
        t4 = t1.$index(data, i);
        t5 = t2.$index(fdtbl, i);
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        fDCTQuant = t4 * t5;
        J.$indexSet$ax(t3, i, fDCTQuant > 0 ? C.JSNumber_methods.toInt$0(fDCTQuant + 0.5) : C.JSNumber_methods.toInt$0(fDCTQuant - 0.5));
      }
      return t3;
    },
    _writeAPP0$1: function(out) {
      type$.OutputBuffer._as(out);
      this._writeMarker$2(out, 224);
      out.writeUint16$1(16);
      out.writeByte$1(74);
      out.writeByte$1(70);
      out.writeByte$1(73);
      out.writeByte$1(70);
      out.writeByte$1(0);
      out.writeByte$1(1);
      out.writeByte$1(1);
      out.writeByte$1(0);
      out.writeUint16$1(1);
      out.writeUint16$1(1);
      out.writeByte$1(0);
      out.writeByte$1(0);
    },
    _writeAPP1$2: function(out, exif) {
      var t1, t2;
      type$.OutputBuffer._as(out);
      t1 = type$.ExifData._as(exif).rawData;
      if (t1 == null)
        return;
      for (t1 = J.get$iterator$ax(t1); H.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        this._writeMarker$2(out, 225);
        out.writeUint16$1(t2.length + 2);
        out.writeBytes$1(t2);
      }
    },
    _writeSOF0$3: function(out, width, height) {
      type$.OutputBuffer._as(out);
      H._asInt(width);
      H._asInt(height);
      this._writeMarker$2(out, 192);
      out.writeUint16$1(17);
      out.writeByte$1(8);
      out.writeUint16$1(height);
      out.writeUint16$1(width);
      out.writeByte$1(3);
      out.writeByte$1(1);
      out.writeByte$1(17);
      out.writeByte$1(0);
      out.writeByte$1(2);
      out.writeByte$1(17);
      out.writeByte$1(1);
      out.writeByte$1(3);
      out.writeByte$1(17);
      out.writeByte$1(1);
    },
    _writeDQT$1: function(out) {
      var t1, t2, i, j;
      type$.OutputBuffer._as(out);
      this._writeMarker$2(out, 219);
      out.writeUint16$1(132);
      out.writeByte$1(0);
      for (t1 = this.YTable, t2 = J.getInterceptor$asx(t1), i = 0; i < 64; ++i)
        out.writeByte$1(t2.$index(t1, i));
      out.writeByte$1(1);
      for (t1 = this.UVTable, t2 = J.getInterceptor$asx(t1), j = 0; j < 64; ++j)
        out.writeByte$1(t2.$index(t1, j));
    },
    _writeDHT$1: function(out) {
      var i, j, k, l, m, n, o, p;
      type$.OutputBuffer._as(out);
      this._writeMarker$2(out, 196);
      out.writeUint16$1(418);
      out.writeByte$1(0);
      for (i = 0; i < 16;) {
        ++i;
        out.writeByte$1(C.List_F1L[i]);
      }
      for (j = 0; j <= 11; ++j)
        out.writeByte$1(C.List_UiL[j]);
      out.writeByte$1(16);
      for (k = 0; k < 16;) {
        ++k;
        out.writeByte$1(C.List_F1L0[k]);
      }
      for (l = 0; l <= 161; ++l)
        out.writeByte$1(C.List_G61[l]);
      out.writeByte$1(1);
      for (m = 0; m < 16;) {
        ++m;
        out.writeByte$1(C.List_F1L1[m]);
      }
      for (n = 0; n <= 11; ++n)
        out.writeByte$1(C.List_UiL[n]);
      out.writeByte$1(17);
      for (o = 0; o < 16;) {
        ++o;
        out.writeByte$1(C.List_F1L2[o]);
      }
      for (p = 0; p <= 161; ++p)
        out.writeByte$1(C.List_AKW[p]);
    },
    _writeSOS$1: function(out) {
      type$.OutputBuffer._as(out);
      this._writeMarker$2(out, 218);
      out.writeUint16$1(12);
      out.writeByte$1(3);
      out.writeByte$1(1);
      out.writeByte$1(0);
      out.writeByte$1(2);
      out.writeByte$1(17);
      out.writeByte$1(3);
      out.writeByte$1(17);
      out.writeByte$1(0);
      out.writeByte$1(63);
      out.writeByte$1(0);
    },
    _processDU$6: function(out, CDU, fdtbl, DC, HTDC, HTAC) {
      var t1, EOB, M16zeroes, DU_DCT, t2, t3, t4, j, Diff, t5, pos, end0pos, t6, t7, t8, i, lng, i0, nrzeroes, nrmarker, t9, _this = this;
      type$.OutputBuffer._as(out);
      t1 = type$.List_double;
      t1._as(CDU);
      t1._as(fdtbl);
      H._asInt(DC);
      type$.nullable_List_nullable_List_int._as(HTDC);
      type$.List_nullable_List_int._as(HTAC);
      t1 = J.getInterceptor$asx(HTAC);
      EOB = t1.$index(HTAC, 0);
      M16zeroes = t1.$index(HTAC, 240);
      DU_DCT = _this._fDCTQuant$2(CDU, fdtbl);
      for (t2 = _this.DU, t3 = J.getInterceptor$asx(DU_DCT), t4 = J.getInterceptor$asx(t2), j = 0; j < 64; ++j)
        t4.$indexSet(t2, C.List_kcl[j], t3.$index(DU_DCT, j));
      t3 = t4.$index(t2, 0);
      t3.toString;
      if (typeof t3 !== "number")
        return t3.$sub();
      Diff = t3 - DC;
      t3 = t4.$index(t2, 0);
      t3.toString;
      if (Diff === 0) {
        HTDC.toString;
        t5 = J.$index$asx(HTDC, 0);
        t5.toString;
        _this._writeBits$2(out, t5);
      } else {
        pos = 32767 + Diff;
        HTDC.toString;
        t5 = J.$index$asx(_this.category, pos);
        t5.toString;
        t5 = J.$index$asx(HTDC, t5);
        t5.toString;
        _this._writeBits$2(out, t5);
        t5 = J.$index$asx(_this.bitcode, pos);
        t5.toString;
        _this._writeBits$2(out, t5);
      }
      end0pos = 63;
      while (true) {
        if (!(end0pos > 0 && H.boolConversionCheck(J.$eq$(t4.$index(t2, end0pos), 0))))
          break;
        --end0pos;
      }
      if (end0pos === 0) {
        EOB.toString;
        _this._writeBits$2(out, EOB);
        return t3;
      }
      for (t5 = _this.category, t6 = J.getInterceptor$asx(t5), t7 = _this.bitcode, t8 = J.getInterceptor$asx(t7), i = 1, lng = null; i <= end0pos;) {
        i0 = i;
        while (true) {
          if (!(H.boolConversionCheck(J.$eq$(t4.$index(t2, i0), 0)) && i0 <= end0pos))
            break;
          ++i0;
        }
        nrzeroes = i0 - i;
        if (nrzeroes >= 16) {
          lng = C.JSInt_methods._shrOtherPositive$1(nrzeroes, 4);
          for (nrmarker = 1; nrmarker <= lng; ++nrmarker) {
            M16zeroes.toString;
            _this._writeBits$2(out, M16zeroes);
          }
          nrzeroes &= 15;
        }
        t9 = t4.$index(t2, i0);
        t9.toString;
        if (typeof t9 !== "number")
          return H.iae(t9);
        pos = 32767 + t9;
        t9 = t6.$index(t5, pos);
        t9.toString;
        if (typeof t9 !== "number")
          return H.iae(t9);
        t9 = t1.$index(HTAC, (nrzeroes << 4 >>> 0) + t9);
        t9.toString;
        _this._writeBits$2(out, t9);
        t9 = t8.$index(t7, pos);
        t9.toString;
        _this._writeBits$2(out, t9);
        i = i0 + 1;
      }
      if (end0pos !== 63) {
        EOB.toString;
        _this._writeBits$2(out, EOB);
      }
      return t3;
    },
    _writeBits$2: function(out, bits) {
      var t1, value, posval, t2, _this = this;
      type$.OutputBuffer._as(out);
      type$.List_int._as(bits);
      t1 = J.getInterceptor$asx(bits);
      value = t1.$index(bits, 0);
      t1 = t1.$index(bits, 1);
      if (typeof t1 !== "number")
        return t1.$sub();
      posval = t1 - 1;
      for (; posval >= 0;) {
        if ((value & C.JSInt_methods.$shl(1, posval)) >>> 0 !== 0) {
          t1 = _this._bytenew;
          t2 = _this._bytepos;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = C.JSInt_methods.$shl(1, t2);
          if (typeof t1 !== "number")
            return t1.$or();
          _this._bytenew = (t1 | t2) >>> 0;
        }
        --posval;
        t1 = _this._bytepos;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_bytepos(t1 - 1);
        t1 = _this._bytepos;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 0) {
          if (H.boolConversionCheck(J.$eq$(_this._bytenew, 255))) {
            out.writeByte$1(255);
            out.writeByte$1(0);
          } else
            out.writeByte$1(_this._bytenew);
          _this._bytepos = 7;
          _this._bytenew = 0;
        }
      }
    },
    _resetBits$0: function() {
      this._bytenew = 0;
      this._bytepos = 7;
    },
    get$YAC_HT: function() {
      var t1 = this.__JpegEncoder_YAC_HT;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("YAC_HT")) : t1;
    },
    set$YAC_HT: function(t1) {
      this.set$__JpegEncoder_YAC_HT(type$.List_nullable_List_int._as(t1));
    },
    get$UVAC_HT: function() {
      var t1 = this.__JpegEncoder_UVAC_HT;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("UVAC_HT")) : t1;
    },
    set$UVAC_HT: function(t1) {
      this.set$__JpegEncoder_UVAC_HT(type$.List_nullable_List_int._as(t1));
    },
    set$YDC_HT: function(YDC_HT) {
      this.YDC_HT = type$.nullable_List_nullable_List_int._as(YDC_HT);
    },
    set$UVDC_HT: function(UVDC_HT) {
      this.UVDC_HT = type$.nullable_List_nullable_List_int._as(UVDC_HT);
    },
    set$__JpegEncoder_YAC_HT: function(__JpegEncoder_YAC_HT) {
      this.__JpegEncoder_YAC_HT = type$.nullable_List_nullable_List_int._as(__JpegEncoder_YAC_HT);
    },
    set$__JpegEncoder_UVAC_HT: function(__JpegEncoder_UVAC_HT) {
      this.__JpegEncoder_UVAC_HT = type$.nullable_List_nullable_List_int._as(__JpegEncoder_UVAC_HT);
    },
    set$_bytepos: function(_bytepos) {
      this._bytepos = H._asInt(_bytepos);
    }
  };
  D.PngFrame.prototype = {
    set$sequenceNumber: function(sequenceNumber) {
      H._asIntQ(sequenceNumber);
    },
    set$width: function(_, width) {
      this.width = H._asIntQ(width);
    },
    set$height: function(_, height) {
      this.height = H._asIntQ(height);
    },
    set$xOffset: function(xOffset) {
      H._asIntQ(xOffset);
    },
    set$yOffset: function(yOffset) {
      H._asIntQ(yOffset);
    },
    set$delayNum: function(delayNum) {
      H._asIntQ(delayNum);
    },
    set$delayDen: function(delayDen) {
      H._asIntQ(delayDen);
    },
    set$dispose: function(dispose) {
      H._asIntQ(dispose);
    },
    set$blend: function(blend) {
      H._asIntQ(blend);
    }
  };
  D.InternalPngFrame.prototype = {
    get$fdat: function() {
      return this._fdat;
    }
  };
  Q.PngInfo.prototype = {
    get$isAnimated: function() {
      return J.get$isNotEmpty$ax(this.frames);
    },
    set$bits: function(bits) {
      this.bits = H._asIntQ(bits);
    },
    set$colorType: function(colorType) {
      this.colorType = H._asIntQ(colorType);
    },
    set$compressionMethod: function(compressionMethod) {
      H._asIntQ(compressionMethod);
    },
    set$filterMethod: function(filterMethod) {
      this.filterMethod = H._asIntQ(filterMethod);
    },
    set$interlaceMethod: function(interlaceMethod) {
      this.interlaceMethod = H._asIntQ(interlaceMethod);
    },
    set$palette: function(palette) {
      this.palette = type$.nullable_List_nullable_int._as(palette);
    },
    set$transparency: function(transparency) {
      this.transparency = type$.nullable_List_int._as(transparency);
    },
    set$colorLut: function(colorLut) {
      this.colorLut = type$.nullable_List_nullable_int._as(colorLut);
    },
    set$backgroundColor: function(backgroundColor) {
      H._asInt(backgroundColor);
    },
    set$iCCPName: function(iCCPName) {
      this.iCCPName = H._asString(iCCPName);
    },
    set$iCCPCompression: function(iCCPCompression) {
      H._asInt(iCCPCompression);
    },
    set$iCCPData: function(iCCPData) {
      this.iCCPData = type$.nullable_Uint8List._as(iCCPData);
    },
    set$numFrames: function(numFrames) {
      H._asInt(numFrames);
    },
    set$repeat: function(_, repeat) {
      H._asInt(repeat);
    }
  };
  Q.InternalPngInfo.prototype = {
    get$idat: function() {
      return this._idat;
    }
  };
  G.PngDecoder.prototype = {
    isValidFile$1: function(data) {
      var i,
        pngHeader = Z.InputBuffer$(type$.List_int._as(data), true, null, 0).readBytes$1(8);
      for (i = 0; i < 8; ++i)
        if (!H.boolConversionCheck(J.$eq$(pngHeader.$index(0, i), C.List_2Vk[i])))
          return false;
      return true;
    },
    startDecode$1: function(data) {
      var pngHeader, i, t2, t3, inputPos, chunkSize, chunkType, hdr, hdrBytes, t4, crc, gammaInt, frame, p3, t5, t6, t7, profile, _this = this, _null = null,
        t1 = type$.List_int;
      _this.set$_png_decoder$_input(Z.InputBuffer$(t1._as(data), true, _null, 0));
      pngHeader = _this.get$_png_decoder$_input().readBytes$1(8);
      for (i = 0; i < 8; ++i)
        if (!H.boolConversionCheck(J.$eq$(pngHeader.$index(0, i), C.List_2Vk[i])))
          return _null;
      for (t2 = type$.InternalPngFrame, t3 = type$.JSArray_int; true;) {
        inputPos = _this.get$_png_decoder$_input().get$position();
        chunkSize = _this.get$_png_decoder$_input().readUint32$0();
        chunkType = _this.get$_png_decoder$_input().readString$1(4);
        switch (chunkType) {
          case "IHDR":
            hdr = Z.InputBuffer$from(_this.get$_png_decoder$_input().readBytes$1(chunkSize), _null, 0);
            hdrBytes = hdr.toUint8List$0();
            t4 = Q.InternalPngInfo$();
            _this._png_decoder$_info = t4;
            t4.set$width(0, hdr.readUint32$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            J.set$height$z(t4, hdr.readUint32$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$bits(hdr.readByte$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$colorType(hdr.readByte$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$compressionMethod(hdr.readByte$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$filterMethod(hdr.readByte$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$interlaceMethod(hdr.readByte$0());
            if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([0, 2, 3, 4, 6], t3), _this._png_decoder$_info.colorType)))
              return _null;
            if (!H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.filterMethod, 0)))
              return _null;
            switch (_this._png_decoder$_info.colorType) {
              case 0:
                if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8, 16], t3), _this._png_decoder$_info.bits)))
                  return _null;
                break;
              case 2:
                if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t3), _this._png_decoder$_info.bits)))
                  return _null;
                break;
              case 3:
                if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8], t3), _this._png_decoder$_info.bits)))
                  return _null;
                break;
              case 4:
                if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t3), _this._png_decoder$_info.bits)))
                  return _null;
                break;
              case 6:
                if (!H.boolConversionCheck(C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t3), _this._png_decoder$_info.bits)))
                  return _null;
                break;
            }
            if (_this.get$_png_decoder$_input().readUint32$0() !== _this._crc$2(chunkType, hdrBytes))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "PLTE":
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$palette(_this.get$_png_decoder$_input().readBytes$1(chunkSize).toUint8List$0());
            if (_this.get$_png_decoder$_input().readUint32$0() !== _this._crc$2(chunkType, t1._as(_this._png_decoder$_info.palette)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "tRNS":
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$transparency(_this.get$_png_decoder$_input().readBytes$1(chunkSize).toUint8List$0());
            crc = _this.get$_png_decoder$_input().readUint32$0();
            t4 = _this._png_decoder$_info.transparency;
            t4.toString;
            if (crc !== _this._crc$2(chunkType, t4))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "IEND":
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "gAMA":
            if (chunkSize !== 4)
              throw H.wrapException(K.ImageException$("Invalid gAMA chunk"));
            gammaInt = _this.get$_png_decoder$_input().readUint32$0();
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            if (gammaInt !== 100000)
              _this._png_decoder$_info.gamma = gammaInt / 100000;
            break;
          case "IDAT":
            J.add$1$ax(_this._png_decoder$_info.get$idat(), inputPos);
            J.skip$1$ax(_this.get$_png_decoder$_input(), chunkSize);
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "acTL":
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$numFrames(_this.get$_png_decoder$_input().readUint32$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            J.set$repeat$z(t4, _this.get$_png_decoder$_input().readUint32$0());
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "fcTL":
            frame = D.InternalPngFrame$();
            J.add$1$ax(_this._png_decoder$_info.frames, frame);
            frame.set$sequenceNumber(_this.get$_png_decoder$_input().readUint32$0());
            frame.set$width(0, _this.get$_png_decoder$_input().readUint32$0());
            frame.set$height(0, _this.get$_png_decoder$_input().readUint32$0());
            frame.set$xOffset(_this.get$_png_decoder$_input().readUint32$0());
            frame.set$yOffset(_this.get$_png_decoder$_input().readUint32$0());
            frame.set$delayNum(_this.get$_png_decoder$_input().readUint16$0());
            frame.set$delayDen(_this.get$_png_decoder$_input().readUint16$0());
            frame.set$dispose(_this.get$_png_decoder$_input().readByte$0());
            frame.set$blend(_this.get$_png_decoder$_input().readByte$0());
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "fdAT":
            _this.get$_png_decoder$_input().readUint32$0();
            J.add$1$ax(t2._as(J.get$last$ax(_this._png_decoder$_info.frames)).get$fdat(), inputPos);
            J.skip$1$ax(_this.get$_png_decoder$_input(), chunkSize - 4);
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "bKGD":
            if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 3))) {
              --chunkSize;
              p3 = _this.get$_png_decoder$_input().readByte$0() * 3;
              t4 = _this._png_decoder$_info.palette;
              t4.toString;
              t4 = J.$index$asx(t4, p3);
              t4.toString;
              t5 = _this._png_decoder$_info.palette;
              t5.toString;
              t5 = J.$index$asx(t5, p3 + 1);
              t5.toString;
              t6 = _this._png_decoder$_info.palette;
              t6.toString;
              t6 = J.$index$asx(t6, p3 + 2);
              t6.toString;
              t7 = _this._png_decoder$_info;
              t7.toString;
              t7.set$backgroundColor(K.Color_fromRgb(t4, t5, t6));
            } else if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 0)) || H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 4))) {
              _this.get$_png_decoder$_input().readUint16$0();
              chunkSize -= 2;
            } else if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 2)) || H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 6))) {
              _this.get$_png_decoder$_input().readUint16$0();
              _this.get$_png_decoder$_input().readUint16$0();
              _this.get$_png_decoder$_input().readUint16$0();
              chunkSize -= 24;
            }
            if (chunkSize > 0)
              J.skip$1$ax(_this.get$_png_decoder$_input(), chunkSize);
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          case "iCCP":
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$iCCPName(_this.get$_png_decoder$_input().readString$0());
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$iCCPCompression(_this.get$_png_decoder$_input().readByte$0());
            t4 = J.get$length$asx(_this._png_decoder$_info.iCCPName);
            if (typeof t4 !== "number")
              return t4.$add();
            profile = _this.get$_png_decoder$_input().readBytes$1(chunkSize - (t4 + 2));
            t4 = _this._png_decoder$_info;
            t4.toString;
            t4.set$iCCPData(profile.toUint8List$0());
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
          default:
            J.skip$1$ax(_this.get$_png_decoder$_input(), chunkSize);
            J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
            break;
        }
        if (chunkType === "IEND")
          break;
        if (H.boolConversionCheck(_this.get$_png_decoder$_input().get$isEOS()))
          return _null;
      }
      return _this._png_decoder$_info;
    },
    decodeFrame$1: function(frame) {
      var imageData, t1, width, height, len, i, chunkSize, chunkType, data, f, channels, image, input, t2, t3, t4, origW, origH, _this = this, _null = null;
      H._asInt(frame);
      if (_this._png_decoder$_info == null)
        return _null;
      imageData = H.setRuntimeTypeInfo([], type$.JSArray_int);
      t1 = _this._png_decoder$_info;
      width = t1.width;
      height = t1.height;
      if (!H.boolConversionCheck(t1.get$isAnimated()) || frame === 0)
        for (len = J.get$length$asx(_this._png_decoder$_info.get$idat()), i = 0; i < len; ++i) {
          J.set$offset$z(_this.get$_png_decoder$_input(), J.$index$asx(_this._png_decoder$_info.get$idat(), i));
          chunkSize = _this.get$_png_decoder$_input().readUint32$0();
          chunkType = _this.get$_png_decoder$_input().readString$1(4);
          data = _this.get$_png_decoder$_input().readBytes$1(chunkSize).toUint8List$0();
          C.JSArray_methods.addAll$1(imageData, data);
          if (_this.get$_png_decoder$_input().readUint32$0() !== _this._crc$2(chunkType, data))
            throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
        }
      else {
        if (frame >= 0) {
          t1 = J.get$length$asx(_this._png_decoder$_info.frames);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = frame >= t1;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(K.ImageException$("Invalid Frame Number: " + frame));
        f = type$.InternalPngFrame._as(J.$index$asx(_this._png_decoder$_info.frames, frame));
        width = f.width;
        height = f.height;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(f.get$fdat());
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          J.set$offset$z(_this.get$_png_decoder$_input(), J.$index$asx(f.get$fdat(), i));
          chunkSize = _this.get$_png_decoder$_input().readUint32$0();
          _this.get$_png_decoder$_input().readString$1(4);
          J.skip$1$ax(_this.get$_png_decoder$_input(), 4);
          C.JSArray_methods.addAll$1(imageData, _this.get$_png_decoder$_input().readBytes$1(chunkSize).toUint8List$0());
          ++i;
        }
      }
      channels = H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 4)) || H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 6)) || _this._png_decoder$_info.transparency != null ? C.Channels_1 : C.Channels_0;
      width.toString;
      height.toString;
      image = U.Image$(width, height, channels, _null, _null);
      input = Z.InputBuffer$(Z.ZLibDecoder$().decodeBytes$1(imageData), true, _null, 0);
      _this._png_decoder$_resetBits$0();
      t1 = _this._png_decoder$_info;
      if (t1.colorLut == null) {
        t1.set$colorLut(P.List_List$generate(256, new G.PngDecoder_decodeFrame_closure(), false, type$.int));
        t1 = _this._png_decoder$_info;
        if (t1.palette != null && t1.gamma != null) {
          i = 0;
          while (true) {
            t1 = _this._png_decoder$_info.palette;
            t1.toString;
            t1 = J.get$length$asx(t1);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = _this._png_decoder$_info;
            t2 = t1.palette;
            t2.toString;
            t1 = t1.colorLut;
            t1.toString;
            t3 = J.getInterceptor$asx(t2);
            t4 = t3.$index(t2, i);
            t4.toString;
            t3.$indexSet(t2, i, J.$index$asx(t1, t4));
            ++i;
          }
        }
      }
      t1 = _this._png_decoder$_info;
      origW = t1.width;
      origH = t1.height;
      t1.width = width;
      t1.height = height;
      _this._progressY = 0;
      if (!H.boolConversionCheck(J.$eq$(t1.interlaceMethod, 0))) {
        t1 = C.JSInt_methods._shrOtherPositive$1(width + 7, 3);
        t2 = C.JSInt_methods._shrOtherPositive$1(height + 7, 3);
        _this._processPass$8(input, image, 0, 0, 8, 8, t1, t2);
        t1 = width + 3;
        _this._processPass$8(input, image, 4, 0, 8, 8, C.JSInt_methods._shrOtherPositive$1(t1, 3), t2);
        t2 = height + 3;
        _this._processPass$8(input, image, 0, 4, 4, 8, C.JSInt_methods._shrOtherPositive$1(t1, 2), C.JSInt_methods._shrOtherPositive$1(t2, 3));
        t1 = width + 1;
        _this._processPass$8(input, image, 2, 0, 4, 4, C.JSInt_methods._shrOtherPositive$1(t1, 2), C.JSInt_methods._shrOtherPositive$1(t2, 2));
        t2 = height + 1;
        _this._processPass$8(input, image, 0, 2, 2, 4, C.JSInt_methods._shrOtherPositive$1(t1, 1), C.JSInt_methods._shrOtherPositive$1(t2, 2));
        _this._processPass$8(input, image, 1, 0, 2, 2, C.JSInt_methods._shrOtherPositive$1(width, 1), C.JSInt_methods._shrOtherPositive$1(t2, 1));
        _this._processPass$8(input, image, 0, 1, 1, 2, width, C.JSInt_methods._shrOtherPositive$1(height, 1));
      } else
        _this._process$2(input, image);
      t1 = _this._png_decoder$_info;
      t1.width = origW;
      t1.height = origH;
      t2 = t1.iCCPData;
      if (t2 != null)
        image.iccProfile = D.ICCProfileData$(t1.iCCPName, C.ICCPCompression_1, t2);
      return image;
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    _processPass$8: function(input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
      var channels, t1, pixelDepth, bpp, rowBytes, line, inData, pixel, blockWidth, dstY, srcY, ri, filterType, t2, row, rowInput, dstX, srcX, c, i, j, _this = this;
      type$.InputBuffer._as(input);
      type$.Image._as(image);
      H._asInt(xOffset);
      H._asInt(yOffset);
      H._asInt(xStep);
      H._asInt(yStep);
      H._asInt(passWidth);
      H._asInt(passHeight);
      if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 4)))
        channels = 2;
      else if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 2)))
        channels = 3;
      else {
        t1 = H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 6)) ? 4 : 1;
        channels = t1;
      }
      t1 = _this._png_decoder$_info.bits;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pixelDepth = channels * t1;
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      rowBytes = C.JSInt_methods._shrOtherPositive$1(pixelDepth * passWidth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_List_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_int);
      t1 = xStep > 1;
      blockWidth = xStep - xOffset;
      dstY = yOffset;
      srcY = 0;
      ri = 0;
      while (srcY < passHeight) {
        filterType = input.readByte$0();
        C.JSArray_methods.$indexSet(inData, ri, input.readBytes$1(rowBytes).toUint8List$0());
        t2 = inData.length;
        if (ri < 0 || ri >= t2)
          return H.ioore(inData, ri);
        row = inData[ri];
        ri = 1 - ri;
        if (ri < 0 || ri >= t2)
          return H.ioore(inData, ri);
        _this._unfilter$4(filterType, bpp, row, inData[ri]);
        _this._png_decoder$_resetBits$0();
        rowInput = Z.InputBuffer$(row, true, null, 0);
        for (t2 = blockWidth <= 1, dstX = xOffset, srcX = 0; srcX < passWidth; ++srcX, dstX += xStep) {
          _this._readPixel$2(rowInput, pixel);
          c = _this._getColor$1(pixel);
          image.setPixel$3(dstX, dstY, c);
          if (!t2 || t1)
            for (i = 0; i < xStep; ++i)
              for (j = 0; j < blockWidth; ++j)
                image.setPixelSafe$3(dstX + j, dstY + j, c);
        }
        ++srcY;
        dstY += yStep;
        t2 = _this._progressY;
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_progressY(t2 + 1);
      }
    },
    _process$2: function(input, image) {
      var channels, t1, t2, pixelDepth, w, h, rowBytes, bpp, line, inData, pixel, y, pi, ri, filterType, row, ri0, rowInput, x, pi0, _this = this;
      type$.InputBuffer._as(input);
      type$.Image._as(image);
      if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 4)))
        channels = 2;
      else if (H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 2)))
        channels = 3;
      else {
        t1 = H.boolConversionCheck(J.$eq$(_this._png_decoder$_info.colorType, 6)) ? 4 : 1;
        channels = t1;
      }
      t1 = _this._png_decoder$_info;
      t2 = t1.bits;
      t2.toString;
      if (typeof t2 !== "number")
        return H.iae(t2);
      pixelDepth = channels * t2;
      w = t1.width;
      h = t1.height;
      rowBytes = C.JSInt_methods._shrOtherPositive$1(w * pixelDepth + 7, 3);
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_List_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_int);
      for (y = 0, pi = 0, ri = 0; y < h; ++y, ri = ri0) {
        filterType = input.readByte$0();
        C.JSArray_methods.$indexSet(inData, ri, input.readBytes$1(rowBytes).toUint8List$0());
        t1 = inData.length;
        if (ri < 0 || ri >= t1)
          return H.ioore(inData, ri);
        row = inData[ri];
        ri0 = 1 - ri;
        if (ri0 < 0 || ri0 >= t1)
          return H.ioore(inData, ri0);
        _this._unfilter$4(filterType, bpp, row, inData[ri0]);
        _this._png_decoder$_resetBits$0();
        if (ri >= inData.length)
          return H.ioore(inData, ri);
        rowInput = Z.InputBuffer$(inData[ri], true, null, 0);
        for (x = 0; x < w; ++x, pi = pi0) {
          _this._readPixel$2(rowInput, pixel);
          pi0 = pi + 1;
          image.$indexSet(0, pi, _this._getColor$1(pixel));
        }
      }
    },
    _unfilter$4: function(filterType, bpp, row, prevRow) {
      var t1, rowBytes, x, t2, t3, t4, a, b, c, p, pa, pb, pc, paeth;
      H._asInt(filterType);
      H._asInt(bpp);
      t1 = type$.List_int;
      t1._as(row);
      t1._as(prevRow);
      t1 = J.getInterceptor$asx(row);
      rowBytes = t1.get$length(row);
      switch (filterType) {
        case 0:
          break;
        case 1:
          for (x = bpp; x < rowBytes; ++x) {
            t2 = t1.$index(row, x);
            t3 = t1.$index(row, x - bpp);
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t1.$indexSet(row, x, t2 + t3 & 255);
          }
          break;
        case 2:
          for (t2 = J.getInterceptor$asx(prevRow), x = 0; x < rowBytes; ++x) {
            t3 = t1.$index(row, x);
            t4 = t2.$index(prevRow, x);
            if (typeof t3 !== "number")
              return t3.$add();
            if (typeof t4 !== "number")
              return H.iae(t4);
            t1.$indexSet(row, x, t3 + t4 & 255);
          }
          break;
        case 3:
          for (t2 = J.getInterceptor$asx(prevRow), x = 0; x < rowBytes; ++x) {
            a = x < bpp ? 0 : t1.$index(row, x - bpp);
            b = t2.$index(prevRow, x);
            t3 = t1.$index(row, x);
            t4 = C.JSInt_methods._shrOtherPositive$1(a + b, 1);
            if (typeof t3 !== "number")
              return t3.$add();
            t1.$indexSet(row, x, t3 + t4 & 255);
          }
          break;
        case 4:
          for (t2 = J.getInterceptor$asx(prevRow), x = 0; x < rowBytes; ++x) {
            t3 = x < bpp;
            a = t3 ? 0 : t1.$index(row, x - bpp);
            b = t2.$index(prevRow, x);
            c = t3 ? 0 : t2.$index(prevRow, x - bpp);
            p = a + b - c;
            pa = Math.abs(p - a);
            pb = Math.abs(p - b);
            pc = Math.abs(p - c);
            if (pa <= pb && pa <= pc)
              paeth = a;
            else
              paeth = pb <= pc ? b : c;
            t3 = t1.$index(row, x);
            if (typeof t3 !== "number")
              return t3.$add();
            t1.$indexSet(row, x, t3 + paeth & 255);
          }
          break;
        default:
          throw H.wrapException(K.ImageException$("Invalid filter value: " + filterType));
      }
    },
    _convert16to8$1: function(c) {
      return C.JSInt_methods._shrOtherPositive$1(H._asInt(c), 8);
    },
    _convert1to8$1: function(c) {
      return H._asInt(c) === 0 ? 0 : 255;
    },
    _convert2to8$1: function(c) {
      return H._asInt(c) * 85;
    },
    _convert4to8$1: function(c) {
      return H._asInt(c) << 4 >>> 0;
    },
    _crc$2: function(type, bytes) {
      H._asString(type);
      return X.getCrc32(type$.List_int._as(bytes), X.getCrc32(C.JSString_methods.get$codeUnits(type), 0));
    },
    _png_decoder$_resetBits$0: function() {
      this._png_decoder$_bitBufferLen = this._png_decoder$_bitBuffer = 0;
    },
    _png_decoder$_readBits$2: function(input, numBits) {
      var t1, octet, mask, t2, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(numBits);
      if (numBits === 0)
        return 0;
      if (numBits === 8)
        return input.readByte$0();
      if (numBits === 16)
        return input.readUint16$0();
      while (true) {
        t1 = _this._png_decoder$_bitBufferLen;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (!(t1 < numBits))
          break;
        if (H.boolConversionCheck(input.get$isEOS()))
          throw H.wrapException(K.ImageException$("Invalid PNG data."));
        octet = input.readByte$0();
        t1 = _this._png_decoder$_bitBufferLen;
        if (typeof t1 !== "number")
          return H.iae(t1);
        _this._png_decoder$_bitBuffer = C.JSInt_methods.$shl(octet, t1);
        _this.set$_png_decoder$_bitBufferLen(t1 + 8);
      }
      if (numBits === 1)
        mask = 1;
      else if (numBits === 2)
        mask = 3;
      else {
        if (numBits === 4)
          t2 = 15;
        else
          t2 = 0;
        mask = t2;
      }
      t2 = _this._png_decoder$_bitBuffer;
      t1 -= numBits;
      if (typeof t2 !== "number")
        return t2.$shr();
      t2 = C.JSNumber_methods.$shr(t2, t1);
      _this.set$_png_decoder$_bitBufferLen(t1);
      return t2 & mask;
    },
    _readPixel$2: function(input, pixel) {
      var t1, t2, _this = this;
      type$.InputBuffer._as(input);
      type$.List_int._as(pixel);
      t1 = _this._png_decoder$_info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          t1 = t1.bits;
          t1.toString;
          J.$indexSet$ax(pixel, 0, _this._png_decoder$_readBits$2(input, t1));
          return;
        case 2:
          t1 = t1.bits;
          t1.toString;
          t2 = J.getInterceptor$ax(pixel);
          t2.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, t1));
          return;
        case 3:
          t1 = t1.bits;
          t1.toString;
          J.$indexSet$ax(pixel, 0, _this._png_decoder$_readBits$2(input, t1));
          return;
        case 4:
          t1 = t1.bits;
          t1.toString;
          t2 = J.getInterceptor$ax(pixel);
          t2.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1));
          return;
        case 6:
          t1 = t1.bits;
          t1.toString;
          t2 = J.getInterceptor$ax(pixel);
          t2.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, t1));
          t1 = _this._png_decoder$_info.bits;
          t1.toString;
          t2.$indexSet(pixel, 3, _this._png_decoder$_readBits$2(input, t1));
          return;
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    _getColor$1: function(raw) {
      var t1, t2, _g_get, _g_set, _r_get, _r_set, _b_get, _b_set, t3, t4, t5, t6, t7, p, a, _a_set, _this = this, _box_0 = {};
      type$.List_int._as(raw);
      t1 = _this._png_decoder$_info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set(_box_0);
          switch (t1.bits) {
            case 1:
              _g_set.call$1(_this._convert1to8$1(J.$index$asx(raw, 0)));
              break;
            case 2:
              _g_set.call$1(_this._convert2to8$1(J.$index$asx(raw, 0)));
              break;
            case 4:
              _g_set.call$1(_this._convert4to8$1(J.$index$asx(raw, 0)));
              break;
            case 8:
              _g_set.call$1(J.$index$asx(raw, 0));
              break;
            case 16:
              _g_set.call$1(_this._convert16to8$1(J.$index$asx(raw, 0)));
              break;
          }
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _g_get.call$0());
          t1.toString;
          _g_set.call$1(t1);
          t1 = _this._png_decoder$_info.transparency;
          if (t1 != null) {
            t1 = J.$index$asx(t1, 0);
            if (typeof t1 !== "number")
              return t1.$and();
            t2 = _this._png_decoder$_info.transparency;
            t2.toString;
            t2 = J.$index$asx(t2, 1);
            if (typeof t2 !== "number")
              return t2.$and();
            if (H.boolConversionCheck(J.$eq$(J.$index$asx(raw, 0), ((t1 & 255) << 24 | t2 & 255) >>> 0)))
              return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), 0);
          }
          return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), 255);
        case 2:
          _box_0._r = null;
          _r_get = new G.PngDecoder__getColor__r_get(_box_0);
          _r_set = new G.PngDecoder__getColor__r_set(_box_0);
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get0(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set0(_box_0);
          _box_0._b = null;
          _b_get = new G.PngDecoder__getColor__b_get(_box_0);
          _b_set = new G.PngDecoder__getColor__b_set(_box_0);
          switch (t1.bits) {
            case 1:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert1to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert1to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert1to8$1(t1.$index(raw, 2)));
              break;
            case 2:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert2to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert2to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert2to8$1(t1.$index(raw, 2)));
              break;
            case 4:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert4to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert4to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert4to8$1(t1.$index(raw, 2)));
              break;
            case 8:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(t1.$index(raw, 0));
              _g_set.call$1(t1.$index(raw, 1));
              _b_set.call$1(t1.$index(raw, 2));
              break;
            case 16:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert16to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert16to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert16to8$1(t1.$index(raw, 2)));
              break;
          }
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _r_get.call$0());
          t1.toString;
          _r_set.call$1(t1);
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _g_get.call$0());
          t1.toString;
          _g_set.call$1(t1);
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _b_get.call$0());
          t1.toString;
          _b_set.call$1(t1);
          t1 = _this._png_decoder$_info.transparency;
          if (t1 != null) {
            t1 = J.$index$asx(t1, 0);
            if (typeof t1 !== "number")
              return t1.$and();
            t2 = _this._png_decoder$_info.transparency;
            t2.toString;
            t2 = J.$index$asx(t2, 1);
            if (typeof t2 !== "number")
              return t2.$and();
            t3 = _this._png_decoder$_info.transparency;
            t3.toString;
            t3 = J.$index$asx(t3, 2);
            if (typeof t3 !== "number")
              return t3.$and();
            t4 = _this._png_decoder$_info.transparency;
            t4.toString;
            t4 = J.$index$asx(t4, 3);
            if (typeof t4 !== "number")
              return t4.$and();
            t5 = _this._png_decoder$_info.transparency;
            t5.toString;
            t5 = J.$index$asx(t5, 4);
            if (typeof t5 !== "number")
              return t5.$and();
            t6 = _this._png_decoder$_info.transparency;
            t6.toString;
            t6 = J.$index$asx(t6, 5);
            if (typeof t6 !== "number")
              return t6.$and();
            t7 = J.getInterceptor$asx(raw);
            if (H.boolConversionCheck(J.$eq$(t7.$index(raw, 0), (t1 & 255) << 8 | t2 & 255)) && H.boolConversionCheck(J.$eq$(t7.$index(raw, 1), (t3 & 255) << 8 | t4 & 255)) && H.boolConversionCheck(J.$eq$(t7.$index(raw, 2), (t5 & 255) << 8 | t6 & 255)))
              return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), 0);
          }
          return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), 255);
        case 3:
          t1 = J.getInterceptor$asx(raw);
          t2 = t1.$index(raw, 0);
          if (typeof t2 !== "number")
            return t2.$mul();
          p = t2 * 3;
          if (_this._png_decoder$_info.transparency != null) {
            t2 = t1.$index(raw, 0);
            t3 = _this._png_decoder$_info.transparency;
            t3.toString;
            t3 = J.get$length$asx(t3);
            if (typeof t2 !== "number")
              return t2.$lt();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = t2 < t3;
            t2 = t3;
          } else
            t2 = false;
          if (t2) {
            t2 = _this._png_decoder$_info.transparency;
            t2.toString;
            a = J.$index$asx(t2, t1.$index(raw, 0));
          } else
            a = 255;
          t1 = _this._png_decoder$_info.palette;
          t1.toString;
          t1 = J.get$length$asx(t1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (p >= t1)
            return K.getColor(255, 255, 255, a);
          t1 = _this._png_decoder$_info.palette;
          t1.toString;
          t1 = J.$index$asx(t1, p);
          t1.toString;
          t2 = _this._png_decoder$_info.palette;
          t2.toString;
          t2 = J.$index$asx(t2, p + 1);
          t2.toString;
          t3 = _this._png_decoder$_info.palette;
          t3.toString;
          t3 = J.$index$asx(t3, p + 2);
          t3.toString;
          return K.getColor(t1, t2, t3, a);
        case 4:
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get1(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set1(_box_0);
          _box_0._a0 = null;
          _a_set = new G.PngDecoder__getColor__a_set(_box_0);
          switch (t1.bits) {
            case 1:
              t1 = J.getInterceptor$asx(raw);
              _g_set.call$1(_this._convert1to8$1(t1.$index(raw, 0)));
              _a_set.call$1(_this._convert1to8$1(t1.$index(raw, 1)));
              break;
            case 2:
              t1 = J.getInterceptor$asx(raw);
              _g_set.call$1(_this._convert2to8$1(t1.$index(raw, 0)));
              _a_set.call$1(_this._convert2to8$1(t1.$index(raw, 1)));
              break;
            case 4:
              t1 = J.getInterceptor$asx(raw);
              _g_set.call$1(_this._convert4to8$1(t1.$index(raw, 0)));
              _a_set.call$1(_this._convert4to8$1(t1.$index(raw, 1)));
              break;
            case 8:
              t1 = J.getInterceptor$asx(raw);
              _g_set.call$1(t1.$index(raw, 0));
              _a_set.call$1(t1.$index(raw, 1));
              break;
            case 16:
              t1 = J.getInterceptor$asx(raw);
              _g_set.call$1(_this._convert16to8$1(t1.$index(raw, 0)));
              _a_set.call$1(_this._convert16to8$1(t1.$index(raw, 1)));
              break;
          }
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _g_get.call$0());
          t1.toString;
          _g_set.call$1(t1);
          return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), new G.PngDecoder__getColor__a_get(_box_0).call$0());
        case 6:
          _box_0._r = null;
          _r_get = new G.PngDecoder__getColor__r_get0(_box_0);
          _r_set = new G.PngDecoder__getColor__r_set0(_box_0);
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get2(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set2(_box_0);
          _box_0._b = null;
          _b_get = new G.PngDecoder__getColor__b_get0(_box_0);
          _b_set = new G.PngDecoder__getColor__b_set0(_box_0);
          _box_0._a0 = null;
          _a_set = new G.PngDecoder__getColor__a_set0(_box_0);
          switch (t1.bits) {
            case 1:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert1to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert1to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert1to8$1(t1.$index(raw, 2)));
              _a_set.call$1(_this._convert1to8$1(t1.$index(raw, 3)));
              break;
            case 2:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert2to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert2to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert2to8$1(t1.$index(raw, 2)));
              _a_set.call$1(_this._convert2to8$1(t1.$index(raw, 3)));
              break;
            case 4:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert4to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert4to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert4to8$1(t1.$index(raw, 2)));
              _a_set.call$1(_this._convert4to8$1(t1.$index(raw, 3)));
              break;
            case 8:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(t1.$index(raw, 0));
              _g_set.call$1(t1.$index(raw, 1));
              _b_set.call$1(t1.$index(raw, 2));
              _a_set.call$1(t1.$index(raw, 3));
              break;
            case 16:
              t1 = J.getInterceptor$asx(raw);
              _r_set.call$1(_this._convert16to8$1(t1.$index(raw, 0)));
              _g_set.call$1(_this._convert16to8$1(t1.$index(raw, 1)));
              _b_set.call$1(_this._convert16to8$1(t1.$index(raw, 2)));
              _a_set.call$1(_this._convert16to8$1(t1.$index(raw, 3)));
              break;
          }
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _r_get.call$0());
          t1.toString;
          _r_set.call$1(t1);
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _g_get.call$0());
          t1.toString;
          _g_set.call$1(t1);
          t1 = _this._png_decoder$_info.colorLut;
          t1.toString;
          t1 = J.$index$asx(t1, _b_get.call$0());
          t1.toString;
          _b_set.call$1(t1);
          return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), new G.PngDecoder__getColor__a_get0(_box_0).call$0());
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    get$_png_decoder$_input: function() {
      var t1 = this.__PngDecoder__input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_input")) : t1;
    },
    set$_png_decoder$_input: function(t1) {
      this.__PngDecoder__input = type$.InputBuffer._as(t1);
    },
    set$_png_decoder$_bitBufferLen: function(_bitBufferLen) {
      this._png_decoder$_bitBufferLen = H._asInt(_bitBufferLen);
    },
    set$_progressY: function(_progressY) {
      this._progressY = H._asInt(_progressY);
    }
  };
  G.PngDecoder_decodeFrame_closure.prototype = {
    call$1: function(i) {
      return H._asInt(i);
    },
    $signature: 5
  };
  G.PngDecoder__getColor__g_set.prototype = {
    call$1: function(t1) {
      return this._box_0._g = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__g_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__b_set.prototype = {
    call$1: function(t1) {
      return this._box_0._b = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__g_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._g = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__r_set.prototype = {
    call$1: function(t1) {
      return this._box_0._r = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__r_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._r;
      return t1 == null ? H.throwExpression(H.LateError$localNI("r")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__g_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__b_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._b;
      return t1 == null ? H.throwExpression(H.LateError$localNI("b")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__a_set.prototype = {
    call$1: function(t1) {
      return this._box_0._a0 = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__g_set1.prototype = {
    call$1: function(t1) {
      return this._box_0._g = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__g_get1.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__a_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._a0;
      return t1 == null ? H.throwExpression(H.LateError$localNI("a")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__a_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._a0 = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__b_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._b = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__g_set2.prototype = {
    call$1: function(t1) {
      return this._box_0._g = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__r_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._r = H._asInt(t1);
    },
    $signature: 4
  };
  G.PngDecoder__getColor__r_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._r;
      return t1 == null ? H.throwExpression(H.LateError$localNI("r")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__g_get2.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__b_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._b;
      return t1 == null ? H.throwExpression(H.LateError$localNI("b")) : t1;
    },
    $signature: 3
  };
  G.PngDecoder__getColor__a_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._a0;
      return t1 == null ? H.throwExpression(H.LateError$localNI("a")) : t1;
    },
    $signature: 3
  };
  U.PsdBevelEffect.prototype = {
    set$angle: function(angle) {
      H._asIntQ(angle);
    },
    set$strength: function(strength) {
      H._asIntQ(strength);
    },
    set$blur: function($blur) {
      H._asIntQ($blur);
    },
    set$highlightBlendMode: function(highlightBlendMode) {
      H._asStringQ(highlightBlendMode);
    },
    set$shadowBlendMode: function(shadowBlendMode) {
      H._asStringQ(shadowBlendMode);
    },
    set$highlightColor: function(highlightColor) {
      type$.nullable_List_int._as(highlightColor);
    },
    set$shadowColor: function(shadowColor) {
      type$.nullable_List_int._as(shadowColor);
    },
    set$bevelStyle: function(bevelStyle) {
      H._asIntQ(bevelStyle);
    },
    set$highlightOpacity: function(highlightOpacity) {
      H._asIntQ(highlightOpacity);
    },
    set$shadowOpacity: function(shadowOpacity) {
      H._asIntQ(shadowOpacity);
    },
    set$upOrDown: function(upOrDown) {
      H._asIntQ(upOrDown);
    },
    set$realHighlightColor: function(realHighlightColor) {
      type$.nullable_List_int._as(realHighlightColor);
    },
    set$realShadowColor: function(realShadowColor) {
      type$.nullable_List_int._as(realShadowColor);
    }
  };
  M.PsdDropShadowEffect.prototype = {
    set$blur: function($blur) {
      H._asIntQ($blur);
    },
    set$intensity: function(intensity) {
      H._asIntQ(intensity);
    },
    set$angle: function(angle) {
      H._asIntQ(angle);
    },
    set$distance: function(distance) {
      H._asIntQ(distance);
    },
    set$color: function(color) {
      type$.nullable_List_int._as(color);
    },
    set$blendMode: function(blendMode) {
      H._asStringQ(blendMode);
    },
    set$opacity: function(opacity) {
      H._asIntQ(opacity);
    },
    set$nativeColor: function(nativeColor) {
      type$.nullable_List_int._as(nativeColor);
    }
  };
  V.PsdEffect.prototype = {
    set$version: function(version) {
      this.version = H._asIntQ(version);
    }
  };
  D.PsdInnerGlowEffect.prototype = {
    set$blur: function($blur) {
      H._asIntQ($blur);
    },
    set$intensity: function(intensity) {
      H._asIntQ(intensity);
    },
    set$color: function(color) {
      type$.nullable_List_int._as(color);
    },
    set$blendMode: function(blendMode) {
      H._asStringQ(blendMode);
    },
    set$opacity: function(opacity) {
      H._asIntQ(opacity);
    },
    set$nativeColor: function(nativeColor) {
      type$.nullable_List_int._as(nativeColor);
    }
  };
  L.PsdInnerShadowEffect.prototype = {
    set$blur: function($blur) {
      H._asIntQ($blur);
    },
    set$intensity: function(intensity) {
      H._asIntQ(intensity);
    },
    set$angle: function(angle) {
      H._asIntQ(angle);
    },
    set$distance: function(distance) {
      H._asIntQ(distance);
    },
    set$color: function(color) {
      type$.nullable_List_int._as(color);
    },
    set$blendMode: function(blendMode) {
      H._asStringQ(blendMode);
    },
    set$opacity: function(opacity) {
      H._asIntQ(opacity);
    },
    set$nativeColor: function(nativeColor) {
      type$.nullable_List_int._as(nativeColor);
    }
  };
  N.PsdOuterGlowEffect.prototype = {
    set$blur: function($blur) {
      H._asIntQ($blur);
    },
    set$intensity: function(intensity) {
      H._asIntQ(intensity);
    },
    set$color: function(color) {
      type$.nullable_List_int._as(color);
    },
    set$blendMode: function(blendMode) {
      H._asStringQ(blendMode);
    },
    set$opacity: function(opacity) {
      H._asIntQ(opacity);
    },
    set$nativeColor: function(nativeColor) {
      type$.nullable_List_int._as(nativeColor);
    }
  };
  F.PsdSolidFillEffect.prototype = {
    set$blendMode: function(blendMode) {
      H._asStringQ(blendMode);
    },
    set$color: function(color) {
      type$.nullable_List_int._as(color);
    },
    set$opacity: function(opacity) {
      H._asIntQ(opacity);
    },
    set$nativeColor: function(nativeColor) {
      type$.nullable_List_int._as(nativeColor);
    }
  };
  K.PsdLayerAdditionalData.prototype = {};
  Y.PsdLayerSectionDivider.prototype = {
    set$type: function(_, t1) {
      H._asInt(t1);
    },
    PsdLayerSectionDivider$2: function(tag, data) {
      var len = data.get$length(data);
      this.set$type(0, data.readUint32$0());
      if (len >= 12) {
        if (data.readString$1(4) !== "8BIM")
          throw H.wrapException(K.ImageException$("Invalid key in layer additional data"));
        this.set$key(0, data.readString$1(4));
      }
      if (len >= 16)
        this.set$subType(data.readUint32$0());
    },
    set$key: function(_, key) {
      H._asStringQ(key);
    },
    set$subType: function(subType) {
      H._asInt(subType);
    }
  };
  O.PsdBlendingRanges.prototype = {
    get$blackSrc: function() {
      var t1 = this.__PsdBlendingRanges_blackSrc;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("blackSrc")) : t1;
    },
    set$blackSrc: function(t1) {
      this.__PsdBlendingRanges_blackSrc = type$.Uint16List._as(t1);
    },
    get$whiteSrc: function() {
      var t1 = this.__PsdBlendingRanges_whiteSrc;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("whiteSrc")) : t1;
    },
    set$whiteSrc: function(t1) {
      this.__PsdBlendingRanges_whiteSrc = type$.Uint16List._as(t1);
    },
    get$blackDst: function() {
      var t1 = this.__PsdBlendingRanges_blackDst;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("blackDst")) : t1;
    },
    set$blackDst: function(t1) {
      this.__PsdBlendingRanges_blackDst = type$.Uint16List._as(t1);
    },
    get$whiteDst: function() {
      var t1 = this.__PsdBlendingRanges_whiteDst;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("whiteDst")) : t1;
    },
    set$whiteDst: function(t1) {
      this.__PsdBlendingRanges_whiteDst = type$.Uint16List._as(t1);
    },
    PsdBlendingRanges$1: function(input) {
      var numChannels, i, _this = this;
      _this.set$grayBlackSrc(input.readUint16$0());
      _this.set$grayWhiteSrc(input.readUint16$0());
      _this.set$grayBlackDst(input.readUint16$0());
      _this.set$grayWhiteDst(input.readUint16$0());
      numChannels = C.JSInt_methods._tdivFast$1(input.get$length(input), 8);
      if (numChannels > 0) {
        _this.set$blackSrc(H.NativeUint16List_NativeUint16List(numChannels));
        _this.set$whiteSrc(H.NativeUint16List_NativeUint16List(numChannels));
        _this.set$blackDst(H.NativeUint16List_NativeUint16List(numChannels));
        _this.set$whiteDst(H.NativeUint16List_NativeUint16List(numChannels));
        for (i = 0; i < numChannels; ++i) {
          J.$indexSet$ax(_this.get$blackSrc(), i, input.readUint16$0());
          J.$indexSet$ax(_this.get$whiteSrc(), i, input.readUint16$0());
          J.$indexSet$ax(_this.get$blackDst(), i, input.readUint16$0());
          J.$indexSet$ax(_this.get$whiteDst(), i, input.readUint16$0());
        }
      }
    },
    set$grayBlackSrc: function(grayBlackSrc) {
      H._asIntQ(grayBlackSrc);
    },
    set$grayWhiteSrc: function(grayWhiteSrc) {
      H._asIntQ(grayWhiteSrc);
    },
    set$grayBlackDst: function(grayBlackDst) {
      H._asIntQ(grayBlackDst);
    },
    set$grayWhiteDst: function(grayWhiteDst) {
      H._asIntQ(grayWhiteDst);
    }
  };
  N.PsdChannel.prototype = {
    get$data: function(_) {
      var t1 = this.__PsdChannel_data;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("data")) : t1;
    },
    set$data: function(_, t1) {
      this.__PsdChannel_data = type$.Uint8List._as(t1);
    },
    PsdChannel$read$8: function(input, id, width, height, bitDepth, compression, lineLengths, planeNumber) {
      this.readPlane$7(input, width, height, bitDepth, compression, lineLengths, planeNumber);
    },
    readPlane$7: function(input, width, height, bitDepth, compression, lineLengths, planeNum) {
      type$.InputBuffer._as(input);
      H._asInt(width);
      H._asInt(height);
      H._asIntQ(bitDepth);
      H._asIntQ(compression);
      type$.nullable_Uint16List._as(lineLengths);
      H._asInt(planeNum);
      if (compression == null)
        compression = input.readUint16$0();
      switch (compression) {
        case 0:
          bitDepth.toString;
          this._readPlaneUncompressed$4(input, width, height, bitDepth);
          break;
        case 1:
          if (lineLengths == null)
            lineLengths = this._readLineLengths$2(input, height);
          bitDepth.toString;
          this._readPlaneRleCompressed$6(input, width, height, bitDepth, lineLengths, planeNum);
          break;
        default:
          throw H.wrapException(K.ImageException$("Unsupported compression: " + H.S(compression)));
      }
    },
    readPlane$4: function(input, width, height, bitDepth) {
      return this.readPlane$7(input, width, height, bitDepth, null, null, 0);
    },
    _readLineLengths$2: function(input, height) {
      var lineLengths, i;
      type$.InputBuffer._as(input);
      H._asInt(height);
      lineLengths = H.NativeUint16List_NativeUint16List(height);
      for (i = 0; i < height; ++i)
        C.NativeUint16List_methods.$indexSet(lineLengths, i, input.readUint16$0());
      return lineLengths;
    },
    _readPlaneUncompressed$4: function(input, width, height, bitDepth) {
      var len, t1, _this = this;
      type$.InputBuffer._as(input);
      len = H._asInt(width) * H._asInt(height);
      if (H._asInt(bitDepth) === 16)
        len *= 2;
      t1 = input.get$length(input);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (len > t1) {
        _this.set$data(0, H.NativeUint8List_NativeUint8List(len));
        J.fillRange$3$ax(_this.get$data(_this), 0, len, 255);
        return;
      }
      _this.set$data(0, input.readBytes$1(len).toUint8List$0());
    },
    _readPlaneRleCompressed$6: function(input, width, height, bitDepth, lineLengths, planeNum) {
      var len, lineIndex, t1, pos, i, lineIndex0, _this = this;
      type$.InputBuffer._as(input);
      H._asInt(width);
      H._asInt(height);
      H._asInt(bitDepth);
      type$.Uint16List._as(lineLengths);
      H._asInt(planeNum);
      len = width * height;
      _this.set$data(0, H.NativeUint8List_NativeUint8List(bitDepth === 16 ? len * 2 : len));
      lineIndex = planeNum * height;
      t1 = lineLengths.length;
      if (lineIndex >= t1) {
        J.fillRange$3$ax(_this.get$data(_this), 0, J.get$length$asx(_this.get$data(_this)), 255);
        return;
      }
      for (pos = 0, i = 0; i < height; ++i, lineIndex = lineIndex0) {
        lineIndex0 = lineIndex + 1;
        if (lineIndex < 0 || lineIndex >= t1)
          return H.ioore(lineLengths, lineIndex);
        _this._decodeRLE$3(input.readBytes$1(lineLengths[lineIndex]), _this.get$data(_this), pos);
        pos += width;
      }
    },
    _decodeRLE$3: function(src, dst, dstIndex) {
      var t1, n, b, i, dstIndex0;
      type$.InputBuffer._as(src);
      type$.Uint8List._as(dst);
      H._asInt(dstIndex);
      for (t1 = dst.length; !H.boolConversionCheck(src.get$isEOS());) {
        n = src.readInt8$0();
        if (n < 0) {
          n = 1 - n;
          b = src.readByte$0();
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            if (dstIndex < 0 || dstIndex >= t1)
              return H.ioore(dst, dstIndex);
            dst[dstIndex] = b;
          }
        } else {
          ++n;
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            C.NativeUint8List_methods.$indexSet(dst, dstIndex, src.readByte$0());
          }
        }
      }
    }
  };
  L.PsdImage.prototype = {
    get$channels: function() {
      var t1 = this.__PsdImage_channels;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("channels")) : t1;
    },
    set$channels: function(t1) {
      this.__PsdImage_channels = H._asInt(t1);
    },
    get$layers: function() {
      var t1 = this.__PsdImage_layers;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("layers")) : t1;
    },
    set$layers: function(t1) {
      this.set$__PsdImage_layers(type$.List_PsdLayer._as(t1));
    },
    get$mergeImageChannels: function() {
      var t1 = this.__PsdImage_mergeImageChannels;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("mergeImageChannels")) : t1;
    },
    set$mergeImageChannels: function(t1) {
      this.set$__PsdImage_mergeImageChannels(type$.List_PsdChannel._as(t1));
    },
    PsdImage$1: function(bytes) {
      var len, t1, t2, _this = this;
      _this.set$_psd_image$_input(Z.InputBuffer$(bytes, true, null, 0));
      _this._readHeader$0();
      if (!H.boolConversionCheck(_this.get$isValid()))
        return;
      len = _this.get$_psd_image$_input().readUint32$0();
      _this.get$_psd_image$_input().readBytes$1(len);
      len = _this.get$_psd_image$_input().readUint32$0();
      _this.set$_imageResourceData(_this.get$_psd_image$_input().readBytes$1(len));
      len = _this.get$_psd_image$_input().readUint32$0();
      _this.set$_layerAndMaskData(_this.get$_psd_image$_input().readBytes$1(len));
      t1 = _this.get$_psd_image$_input();
      t1.toString;
      t2 = _this.get$_psd_image$_input();
      t2.toString;
      _this.set$_imageData(t1.readBytes$1(J.get$length$asx(t2)));
    },
    get$isValid: function() {
      return J.$eq$(this.signature, 943870035);
    },
    decode$0: function() {
      var _this = this, _null = null;
      if (!H.boolConversionCheck(_this.get$isValid()) || _this.get$_psd_image$_input() == null)
        return false;
      _this._readColorModeData$0();
      _this._readImageResources$0();
      _this._readLayerAndMaskData$0();
      _this._readMergeImageData$0();
      _this.set$_psd_image$_input(_null);
      _this.set$_imageResourceData(_null);
      _this.set$_layerAndMaskData(_null);
      _this.set$_imageData(_null);
      return true;
    },
    decodeImage$0: function() {
      if (!H.boolConversionCheck(this.decode$0()))
        return null;
      return this.renderImage$0();
    },
    renderImage$0: function() {
      var pixels, li, t2, layer, opacity, blendMode, srcP, t3, sy, y, si, t4, t5, di, sx, x, si0, br, bg, bb, ba, ar, ag, ab, _this = this,
        t1 = _this.mergedImage;
      if (t1 != null)
        return t1;
      t1 = U.Image$(_this.width, _this.height, C.Channels_1, null, null);
      _this.mergedImage = t1;
      t1.fill$1(0);
      pixels = _this.mergedImage.getBytes$0();
      t1 = pixels.length;
      li = 0;
      while (true) {
        t2 = J.get$length$asx(_this.get$layers());
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(li < t2))
          break;
        c$0: {
          layer = J.$index$asx(_this.get$layers(), li);
          if (!H.boolConversionCheck(layer.isVisible$0()))
            break c$0;
          t2 = layer.get$opacity();
          if (typeof t2 !== "number")
            return t2.$div();
          opacity = t2 / 255;
          blendMode = layer.blendMode;
          srcP = layer.get$layerImage().getBytes$0();
          t2 = layer.top;
          t2.toString;
          t3 = srcP.length;
          sy = t2;
          y = 0;
          si = 0;
          while (true) {
            t2 = layer.get$height(layer);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(y < t2))
              break;
            t2 = layer.top;
            t2.toString;
            if (typeof t2 !== "number")
              return t2.$add();
            t4 = _this.width;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t5 = layer.left;
            t5.toString;
            if (typeof t5 !== "number")
              return t5.$mul();
            di = (t2 + y) * t4 * 4 + t5 * 4;
            t2 = sy >= 0;
            sx = t5;
            x = 0;
            while (true) {
              t4 = layer.get$width(layer);
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(x < t4))
                break;
              si0 = si + 1;
              if (si < 0 || si >= t3)
                return H.ioore(srcP, si);
              br = srcP[si];
              si = si0 + 1;
              if (si0 < 0 || si0 >= t3)
                return H.ioore(srcP, si0);
              bg = srcP[si0];
              si0 = si + 1;
              if (si < 0 || si >= t3)
                return H.ioore(srcP, si);
              bb = srcP[si];
              si = si0 + 1;
              if (si0 < 0 || si0 >= t3)
                return H.ioore(srcP, si0);
              ba = srcP[si0];
              if (sx >= 0) {
                t4 = _this.width;
                if (typeof t4 !== "number")
                  return H.iae(t4);
                if (sx < t4)
                  if (t2) {
                    t4 = _this.height;
                    if (typeof t4 !== "number")
                      return H.iae(t4);
                    t4 = sy < t4;
                  } else
                    t4 = false;
                else
                  t4 = false;
              } else
                t4 = false;
              if (t4) {
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                ar = pixels[di];
                t4 = di + 1;
                if (t4 >= t1)
                  return H.ioore(pixels, t4);
                ag = pixels[t4];
                t4 = di + 2;
                if (t4 >= t1)
                  return H.ioore(pixels, t4);
                ab = pixels[t4];
                t4 = di + 3;
                if (t4 >= t1)
                  return H.ioore(pixels, t4);
                _this._blend$12(ar, ag, ab, pixels[t4], br, bg, bb, ba, blendMode, opacity, pixels, di);
              }
              di += 4;
              ++x;
              ++sx;
            }
            ++y;
            ++sy;
          }
        }
        ++li;
      }
      t1 = _this.mergedImage;
      t1.toString;
      return t1;
    },
    _blend$12: function(ar, ag, ab, aa, br, bg, bb, ba, blendMode, opacity, pixels, di) {
      var da, a, b, g, r, t1, di0;
      H._asInt(ar);
      H._asInt(ag);
      H._asInt(ab);
      H._asInt(aa);
      H._asInt(br);
      H._asInt(bg);
      H._asInt(bb);
      H._asInt(ba);
      H._asIntQ(blendMode);
      H._asDouble(opacity);
      type$.Uint8List._as(pixels);
      H._asInt(di);
      da = ba / 255 * opacity;
      switch (blendMode) {
        case 1885434739:
          a = aa;
          b = ab;
          g = ag;
          r = ar;
          break;
        case 1852797549:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1684632435:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1684107883:
          r = L.PsdImage__blendDarken(ar, br);
          g = L.PsdImage__blendDarken(ag, bg);
          b = L.PsdImage__blendDarken(ab, bb);
          a = ba;
          break;
        case 1836411936:
          r = L.PsdImage__blendMultiply(ar, br);
          g = L.PsdImage__blendMultiply(ag, bg);
          b = L.PsdImage__blendMultiply(ab, bb);
          a = ba;
          break;
        case 1768188278:
          r = L.PsdImage__blendColorBurn(ar, br);
          g = L.PsdImage__blendColorBurn(ag, bg);
          b = L.PsdImage__blendColorBurn(ab, bb);
          a = ba;
          break;
        case 1818391150:
          r = L.PsdImage__blendLinearBurn(ar, br);
          g = L.PsdImage__blendLinearBurn(ag, bg);
          b = L.PsdImage__blendLinearBurn(ab, bb);
          a = ba;
          break;
        case 1684751212:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1818850405:
          r = L.PsdImage__blendLighten(ar, br);
          g = L.PsdImage__blendLighten(ag, bg);
          b = L.PsdImage__blendLighten(ab, bb);
          a = ba;
          break;
        case 1935897198:
          r = L.PsdImage__blendScreen(ar, br);
          g = L.PsdImage__blendScreen(ag, bg);
          b = L.PsdImage__blendScreen(ab, bb);
          a = ba;
          break;
        case 1684633120:
          r = L.PsdImage__blendColorDodge(ar, br);
          g = L.PsdImage__blendColorDodge(ag, bg);
          b = L.PsdImage__blendColorDodge(ab, bb);
          a = ba;
          break;
        case 1818518631:
          r = L.PsdImage__blendLinearDodge(ar, br);
          g = L.PsdImage__blendLinearDodge(ag, bg);
          b = L.PsdImage__blendLinearDodge(ab, bb);
          a = ba;
          break;
        case 1818706796:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1870030194:
          r = L.PsdImage__blendOverlay(ar, br, aa, ba);
          g = L.PsdImage__blendOverlay(ag, bg, aa, ba);
          b = L.PsdImage__blendOverlay(ab, bb, aa, ba);
          a = ba;
          break;
        case 1934387572:
          r = L.PsdImage__blendSoftLight(ar, br);
          g = L.PsdImage__blendSoftLight(ag, bg);
          b = L.PsdImage__blendSoftLight(ab, bb);
          a = ba;
          break;
        case 1749838196:
          r = L.PsdImage__blendHardLight(ar, br);
          g = L.PsdImage__blendHardLight(ag, bg);
          b = L.PsdImage__blendHardLight(ab, bb);
          a = ba;
          break;
        case 1984719220:
          r = L.PsdImage__blendVividLight(ar, br);
          g = L.PsdImage__blendVividLight(ag, bg);
          b = L.PsdImage__blendVividLight(ab, bb);
          a = ba;
          break;
        case 1816947060:
          r = L.PsdImage__blendLinearLight(ar, br);
          g = L.PsdImage__blendLinearLight(ag, bg);
          b = L.PsdImage__blendLinearLight(ab, bb);
          a = ba;
          break;
        case 1884055924:
          r = L.PsdImage__blendPinLight(ar, br);
          g = L.PsdImage__blendPinLight(ag, bg);
          b = L.PsdImage__blendPinLight(ab, bb);
          a = ba;
          break;
        case 1749903736:
          r = L.PsdImage__blendHardMix(ar, br);
          g = L.PsdImage__blendHardMix(ag, bg);
          b = L.PsdImage__blendHardMix(ab, bb);
          a = ba;
          break;
        case 1684629094:
          r = L.PsdImage__blendDifference(ar, br);
          g = L.PsdImage__blendDifference(ag, bg);
          b = L.PsdImage__blendDifference(ab, bb);
          a = ba;
          break;
        case 1936553316:
          r = L.PsdImage__blendExclusion(ar, br);
          g = L.PsdImage__blendExclusion(ag, bg);
          b = L.PsdImage__blendExclusion(ab, bb);
          a = ba;
          break;
        case 1718842722:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1717856630:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1752524064:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1935766560:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1668246642:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        case 1819634976:
          a = ba;
          b = bb;
          g = bg;
          r = br;
          break;
        default:
          a = ba;
          b = bb;
          g = bg;
          r = br;
      }
      t1 = 1 - da;
      r = C.JSNumber_methods.toInt$0(ar * t1 + r * da);
      g = C.JSNumber_methods.toInt$0(ag * t1 + g * da);
      b = C.JSNumber_methods.toInt$0(ab * t1 + b * da);
      a = C.JSNumber_methods.toInt$0(aa * t1 + a * da);
      di0 = di + 1;
      t1 = pixels.length;
      if (di < 0 || di >= t1)
        return H.ioore(pixels, di);
      pixels[di] = r;
      di = di0 + 1;
      if (di0 < 0 || di0 >= t1)
        return H.ioore(pixels, di0);
      pixels[di0] = g;
      di0 = di + 1;
      if (di < 0 || di >= t1)
        return H.ioore(pixels, di);
      pixels[di] = b;
      if (di0 < 0 || di0 >= t1)
        return H.ioore(pixels, di0);
      pixels[di0] = a;
    },
    _readHeader$0: function() {
      var padding, i, _this = this;
      _this.set$signature(_this.get$_psd_image$_input().readUint32$0());
      _this.set$version(_this.get$_psd_image$_input().readUint16$0());
      if (!H.boolConversionCheck(J.$eq$(_this.version, 1))) {
        _this.signature = 0;
        return;
      }
      padding = _this.get$_psd_image$_input().readBytes$1(6);
      for (i = 0; i < 6; ++i)
        if (!H.boolConversionCheck(J.$eq$(padding.$index(0, i), 0))) {
          _this.signature = 0;
          return;
        }
      _this.set$channels(_this.get$_psd_image$_input().readUint16$0());
      _this.set$height(0, _this.get$_psd_image$_input().readUint32$0());
      _this.set$width(0, _this.get$_psd_image$_input().readUint32$0());
      _this.set$depth(_this.get$_psd_image$_input().readUint16$0());
      _this.set$colorMode(_this.get$_psd_image$_input().readUint16$0());
    },
    _readColorModeData$0: function() {
    },
    _readImageResources$0: function() {
      var t1, t2, blockSignature, blockId, len, blockName, t3, blockData, _this = this;
      _this.get$_imageResourceData().rewind$0();
      for (t1 = _this.imageResources, t2 = J.getInterceptor$ax(t1); !H.boolConversionCheck(_this.get$_imageResourceData().get$isEOS());) {
        blockSignature = _this.get$_imageResourceData().readUint32$0();
        blockId = _this.get$_imageResourceData().readUint16$0();
        len = _this.get$_imageResourceData().readByte$0();
        blockName = _this.get$_imageResourceData().readString$1(len);
        if ((len & 1) === 0) {
          t3 = _this.get$_imageResourceData();
          t3.toString;
          J.skip$1$ax(t3, 1);
        }
        len = _this.get$_imageResourceData().readUint32$0();
        blockData = _this.get$_imageResourceData().readBytes$1(len);
        if ((len & 1) === 1) {
          t3 = _this.get$_imageResourceData();
          t3.toString;
          J.skip$1$ax(t3, 1);
        }
        if (blockSignature === 943868237)
          t2.$indexSet(t1, blockId, S.PsdImageResource$(blockId, blockName, blockData));
      }
    },
    _readLayerAndMaskData$0: function() {
      var len, layerData, count, i, layer, t1, maskData, _this = this;
      _this.get$_layerAndMaskData().rewind$0();
      len = _this.get$_layerAndMaskData().readUint32$0();
      if ((len & 1) !== 0)
        ++len;
      layerData = _this.get$_layerAndMaskData().readBytes$1(len);
      _this.set$layers(H.setRuntimeTypeInfo([], type$.JSArray_PsdLayer));
      if (len > 0) {
        count = layerData.readInt16$0();
        if (count < 0)
          count = -count;
        for (i = 0; i < count; ++i) {
          layer = S.PsdLayer$(layerData);
          J.add$1$ax(_this.get$layers(), layer);
        }
      }
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.get$layers());
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        J.$index$asx(_this.get$layers(), i).readImageData$2(layerData, _this);
        ++i;
      }
      len = _this.get$_layerAndMaskData().readUint32$0();
      maskData = _this.get$_layerAndMaskData().readBytes$1(len);
      if (len > 0) {
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readByte$0();
      }
    },
    _readMergeImageData$0: function() {
      var compression, t1, t2, numLines, lineLengths, i, t3, _this = this;
      _this.get$_imageData().rewind$0();
      compression = _this.get$_imageData().readUint16$0();
      if (compression === 1) {
        t1 = _this.height;
        t2 = _this.get$channels();
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        numLines = t1 * t2;
        lineLengths = H.NativeUint16List_NativeUint16List(numLines);
        for (t1 = lineLengths && C.NativeUint16List_methods, i = 0; i < numLines; ++i)
          t1.$indexSet(lineLengths, i, _this.get$_imageData().readUint16$0());
      } else
        lineLengths = null;
      _this.set$mergeImageChannels(H.setRuntimeTypeInfo([], type$.JSArray_PsdChannel));
      i = 0;
      while (true) {
        t1 = _this.get$channels();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = _this.get$mergeImageChannels();
        t2 = _this.get$_imageData();
        t2.toString;
        t3 = i === 3 ? -1 : i;
        J.add$1$ax(t1, N.PsdChannel$read(t2, t3, _this.width, _this.height, _this.depth, compression, lineLengths, i));
        ++i;
      }
      _this.set$mergedImage(L.PsdImage_createImageFromChannels(_this.colorMode, _this.depth, _this.width, _this.height, _this.get$mergeImageChannels()));
    },
    get$_psd_image$_input: function() {
      var t1 = this.__PsdImage__input;
      return H.boolConversionCheck(H.isSentinel(t1)) ? H.throwExpression(H.LateError$fieldNI("_input")) : t1;
    },
    set$_psd_image$_input: function(t1) {
      this.__PsdImage__input = type$.nullable_InputBuffer._as(t1);
    },
    get$_imageResourceData: function() {
      var t1 = this.__PsdImage__imageResourceData;
      return H.boolConversionCheck(H.isSentinel(t1)) ? H.throwExpression(H.LateError$fieldNI("_imageResourceData")) : t1;
    },
    set$_imageResourceData: function(t1) {
      this.__PsdImage__imageResourceData = type$.nullable_InputBuffer._as(t1);
    },
    get$_layerAndMaskData: function() {
      var t1 = this.__PsdImage__layerAndMaskData;
      return H.boolConversionCheck(H.isSentinel(t1)) ? H.throwExpression(H.LateError$fieldNI("_layerAndMaskData")) : t1;
    },
    set$_layerAndMaskData: function(t1) {
      this.__PsdImage__layerAndMaskData = type$.nullable_InputBuffer._as(t1);
    },
    get$_imageData: function() {
      var t1 = this.__PsdImage__imageData;
      return H.boolConversionCheck(H.isSentinel(t1)) ? H.throwExpression(H.LateError$fieldNI("_imageData")) : t1;
    },
    set$_imageData: function(t1) {
      this.__PsdImage__imageData = type$.nullable_InputBuffer._as(t1);
    },
    set$signature: function(signature) {
      this.signature = H._asIntQ(signature);
    },
    set$version: function(version) {
      this.version = H._asIntQ(version);
    },
    set$depth: function(depth) {
      this.depth = H._asIntQ(depth);
    },
    set$colorMode: function(colorMode) {
      this.colorMode = H._asIntQ(colorMode);
    },
    set$__PsdImage_layers: function(__PsdImage_layers) {
      this.__PsdImage_layers = type$.nullable_List_PsdLayer._as(__PsdImage_layers);
    },
    set$__PsdImage_mergeImageChannels: function(__PsdImage_mergeImageChannels) {
      this.__PsdImage_mergeImageChannels = type$.nullable_List_PsdChannel._as(__PsdImage_mergeImageChannels);
    },
    set$mergedImage: function(mergedImage) {
      this.mergedImage = type$.nullable_Image._as(mergedImage);
    }
  };
  S.PsdImageResource.prototype = {};
  S.PsdLayer.prototype = {
    get$bottom: function() {
      var t1 = this.__PsdLayer_bottom;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("bottom")) : t1;
    },
    set$bottom: function(t1) {
      this.__PsdLayer_bottom = H._asInt(t1);
    },
    get$right: function() {
      var t1 = this.__PsdLayer_right;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("right")) : t1;
    },
    set$right: function(t1) {
      this.__PsdLayer_right = H._asInt(t1);
    },
    get$width: function(_) {
      var t1 = this.__PsdLayer_width;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("width")) : t1;
    },
    set$width: function(_, t1) {
      this.__PsdLayer_width = H._asInt(t1);
    },
    get$height: function(_) {
      var t1 = this.__PsdLayer_height;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("height")) : t1;
    },
    set$height: function(_, t1) {
      this.__PsdLayer_height = H._asInt(t1);
    },
    get$opacity: function() {
      var t1 = this.__PsdLayer_opacity;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("opacity")) : t1;
    },
    set$opacity: function(t1) {
      this.__PsdLayer_opacity = H._asInt(t1);
    },
    get$flags: function() {
      var t1 = this.__PsdLayer_flags;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("flags")) : t1;
    },
    set$flags: function(t1) {
      this.__PsdLayer_flags = H._asInt(t1);
    },
    get$channels: function() {
      var t1 = this.__PsdLayer_channels;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("channels")) : t1;
    },
    set$channels: function(t1) {
      this.set$__PsdLayer_channels(type$.List_PsdChannel._as(t1));
    },
    get$layerImage: function() {
      var t1 = this.__PsdLayer_layerImage;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("layerImage")) : t1;
    },
    set$layerImage: function(t1) {
      this.__PsdLayer_layerImage = type$.Image._as(t1);
    },
    PsdLayer$1: function(input) {
      var t1, t2, numChannels, i, id, len, sig, extra, padding, t3, t4, t5, t6, tag, data, numFx, j, fxTag, size, fx, _this = this;
      if (input == null)
        return;
      _this.set$top(input.readInt32$0());
      _this.set$left(input.readInt32$0());
      _this.set$bottom(input.readInt32$0());
      _this.set$right(input.readInt32$0());
      t1 = _this.get$right();
      t2 = _this.left;
      t2.toString;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.set$width(0, t1 - t2);
      t2 = _this.get$bottom();
      t1 = _this.top;
      t1.toString;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$height(0, t2 - t1);
      _this.set$channels(H.setRuntimeTypeInfo([], type$.JSArray_PsdChannel));
      numChannels = input.readUint16$0();
      for (i = 0; i < numChannels; ++i) {
        id = input.readInt16$0();
        len = input.readUint32$0();
        J.add$1$ax(_this.get$channels(), N.PsdChannel$(id, len));
      }
      sig = input.readUint32$0();
      if (sig !== 943868237)
        throw H.wrapException(K.ImageException$("Invalid PSD layer signature: " + H.S(C.JSInt_methods.toRadixString$1(sig, 16))));
      _this.set$blendMode(input.readUint32$0());
      _this.set$opacity(input.readByte$0());
      _this.set$clipping(input.readByte$0());
      _this.set$flags(input.readByte$0());
      if (input.readByte$0() !== 0)
        throw H.wrapException(K.ImageException$("Invalid PSD layer data"));
      len = input.readUint32$0();
      extra = input.readBytes$1(len);
      if (len > 0) {
        len = extra.readUint32$0();
        if (len > 0)
          N.PsdMask$(extra.readBytes$1(len));
        len = extra.readUint32$0();
        if (len > 0)
          O.PsdBlendingRanges$(extra.readBytes$1(len));
        len = extra.readByte$0();
        _this.set$name(0, extra.readString$1(len));
        padding = 4 - C.JSInt_methods.$mod(len, 4) - 1;
        if (padding > 0)
          extra.skip$1(0, padding);
        for (t1 = _this.additionalData, t2 = J.getInterceptor$ax(t1), t3 = _this.effects, t4 = J.getInterceptor$ax(t3), t5 = type$.JSArray_int, t6 = type$.PsdLayerAdditionalData; !H.boolConversionCheck(extra.get$isEOS());) {
          sig = extra.readUint32$0();
          if (sig !== 943868237)
            throw H.wrapException(K.ImageException$("PSD invalid signature for layer additional data: " + H.S(C.JSInt_methods.toRadixString$1(sig, 16))));
          tag = extra.readString$1(4);
          len = extra.readUint32$0();
          data = extra.readBytes$1(len);
          if ((len & 1) === 1)
            extra.skip$1(0, 1);
          t2.$indexSet(t1, tag, Q.PsdLayerData_PsdLayerData(tag, data));
          if (tag === "lrFX") {
            data = Z.InputBuffer$from(t6._as(t2.$index(t1, "lrFX")).data, null, 0);
            data.readUint16$0();
            numFx = data.readUint16$0();
            for (j = 0; j < numFx; ++j) {
              data.readString$1(4);
              fxTag = data.readString$1(4);
              size = data.readUint32$0();
              if (fxTag === "dsdw") {
                fx = M.PsdDropShadowEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$blur(data.readUint32$0());
                fx.set$intensity(data.readUint32$0());
                fx.set$angle(data.readUint32$0());
                fx.set$distance(data.readUint32$0());
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$blendMode(data.readString$1(8));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$opacity(data.readByte$0());
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
              } else if (fxTag === "isdw") {
                fx = L.PsdInnerShadowEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$blur(data.readUint32$0());
                fx.set$intensity(data.readUint32$0());
                fx.set$angle(data.readUint32$0());
                fx.set$distance(data.readUint32$0());
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$blendMode(data.readString$1(8));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$opacity(data.readByte$0());
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
              } else if (fxTag === "oglw") {
                fx = N.PsdOuterGlowEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$blur(data.readUint32$0());
                fx.set$intensity(data.readUint32$0());
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$blendMode(data.readString$1(8));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$opacity(data.readByte$0());
                if (H.boolConversionCheck(J.$eq$(fx.version, 2)))
                  fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
              } else if (fxTag === "iglw") {
                fx = D.PsdInnerGlowEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$blur(data.readUint32$0());
                fx.set$intensity(data.readUint32$0());
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$blendMode(data.readString$1(8));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$opacity(data.readByte$0());
                if (H.boolConversionCheck(J.$eq$(fx.version, 2))) {
                  H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                  fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                }
              } else if (fxTag === "bevl") {
                fx = U.PsdBevelEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$angle(data.readUint32$0());
                fx.set$strength(data.readUint32$0());
                fx.set$blur(data.readUint32$0());
                fx.set$highlightBlendMode(data.readString$1(8));
                fx.set$shadowBlendMode(data.readString$1(8));
                fx.set$highlightColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$shadowColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$bevelStyle(data.readByte$0());
                fx.set$highlightOpacity(data.readByte$0());
                fx.set$shadowOpacity(data.readByte$0());
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$upOrDown(data.readByte$0());
                if (H.boolConversionCheck(J.$eq$(fx.version, 2))) {
                  fx.set$realHighlightColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                  fx.set$realShadowColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                }
              } else if (fxTag === "sofi") {
                fx = F.PsdSolidFillEffect$();
                t4.add$1(t3, fx);
                fx.set$version(data.readUint32$0());
                fx.set$blendMode(data.readString$1(4));
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
                fx.set$opacity(data.readByte$0());
                H.boolConversionCheck(J.$eq$(data.readByte$0(), 0));
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t5));
              } else
                data.skip$1(0, size);
            }
          }
        }
      }
    },
    isVisible$0: function() {
      var t1 = this.get$flags();
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) === 0;
    },
    readImageData$2: function(input, psd) {
      var i, t1, _this = this;
      type$.InputBuffer._as(input);
      type$.PsdImage._as(psd);
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.get$channels());
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        J.$index$asx(_this.get$channels(), i).readPlane$4(input, _this.get$width(_this), _this.get$height(_this), psd.depth);
        ++i;
      }
      _this.set$layerImage(L.PsdImage_createImageFromChannels(psd.colorMode, psd.depth, _this.get$width(_this), _this.get$height(_this), _this.get$channels()));
    },
    set$top: function($top) {
      this.top = H._asIntQ($top);
    },
    set$left: function(left) {
      this.left = H._asIntQ(left);
    },
    set$blendMode: function(blendMode) {
      this.blendMode = H._asIntQ(blendMode);
    },
    set$clipping: function(clipping) {
      H._asIntQ(clipping);
    },
    set$name: function(_, $name) {
      H._asStringQ($name);
    },
    set$__PsdLayer_channels: function(__PsdLayer_channels) {
      this.__PsdLayer_channels = type$.nullable_List_PsdChannel._as(__PsdLayer_channels);
    }
  };
  Q.PsdLayerData.prototype = {};
  N.PsdMask.prototype = {
    set$top: function(t1) {
      H._asInt(t1);
    },
    set$left: function(t1) {
      H._asInt(t1);
    },
    set$right: function(t1) {
      H._asInt(t1);
    },
    set$bottom: function(t1) {
      H._asInt(t1);
    },
    set$defaultColor: function(t1) {
      H._asInt(t1);
    },
    set$flags: function(t1) {
      H._asInt(t1);
    },
    PsdMask$1: function(input) {
      var _this = this,
        len = input.get$length(input);
      _this.set$top(input.readUint32$0());
      _this.set$left(input.readUint32$0());
      _this.set$right(input.readUint32$0());
      _this.set$bottom(input.readUint32$0());
      _this.set$defaultColor(input.readByte$0());
      _this.set$flags(input.readByte$0());
      if (len === 20)
        input.skip$1(0, 2);
      else {
        _this.set$flags(input.readByte$0());
        _this.set$defaultColor(input.readByte$0());
        _this.set$top(input.readUint32$0());
        _this.set$left(input.readUint32$0());
        _this.set$right(input.readUint32$0());
        _this.set$bottom(input.readUint32$0());
      }
    }
  };
  V.PsdDecoder.prototype = {
    isValidFile$1: function(bytes) {
      return L.PsdImage$(type$.List_int._as(bytes)).get$isValid();
    },
    decodeImage$1: function(bytes) {
      this.startDecode$1(type$.List_int._as(bytes));
      return this.decodeFrame$1(0);
    },
    startDecode$1: function(bytes) {
      return this.info = L.PsdImage$(type$.List_int._as(bytes));
    },
    decodeFrame$1: function(frame) {
      var t1;
      H._asInt(frame);
      t1 = this.info;
      if (t1 == null)
        return null;
      return t1.decodeImage$0();
    }
  };
  R.TgaInfo.prototype = {
    set$imageOffset: function(imageOffset) {
      this.imageOffset = H._asIntQ(imageOffset);
    },
    set$bpp: function(bpp) {
      this.bpp = H._asIntQ(bpp);
    }
  };
  B.TgaDecoder.prototype = {
    get$input: function() {
      var t1 = this.__TgaDecoder_input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("input")) : t1;
    },
    set$input: function(t1) {
      this.__TgaDecoder_input = type$.InputBuffer._as(t1);
    },
    isValidFile$1: function(data) {
      var header = Z.InputBuffer$(type$.List_int._as(data), true, null, 0).readBytes$1(18);
      if (!H.boolConversionCheck(J.$eq$(header.$index(0, 2), 2)))
        return false;
      if (!H.boolConversionCheck(J.$eq$(header.$index(0, 16), 24)) && !H.boolConversionCheck(J.$eq$(header.$index(0, 16), 32)))
        return false;
      return true;
    },
    startDecode$1: function(bytes) {
      var header, t1, t2, t3, _this = this;
      type$.List_int._as(bytes);
      _this.info = R.TgaInfo$();
      _this.set$input(Z.InputBuffer$(bytes, true, null, 0));
      header = _this.get$input().readBytes$1(18);
      if (!H.boolConversionCheck(J.$eq$(header.$index(0, 2), 2)))
        return null;
      if (!H.boolConversionCheck(J.$eq$(header.$index(0, 16), 24)) && !H.boolConversionCheck(J.$eq$(header.$index(0, 16), 32)))
        return null;
      t1 = _this.info;
      t1.toString;
      t2 = header.$index(0, 12);
      if (typeof t2 !== "number")
        return t2.$and();
      t3 = header.$index(0, 13);
      if (typeof t3 !== "number")
        return t3.$and();
      t1.width = t2 & 255 | (t3 & 255) << 8;
      t3 = _this.info;
      t3.toString;
      t2 = header.$index(0, 14);
      if (typeof t2 !== "number")
        return t2.$and();
      t1 = header.$index(0, 15);
      if (typeof t1 !== "number")
        return t1.$and();
      t3.height = t2 & 255 | (t1 & 255) << 8;
      t1 = _this.info;
      t1.toString;
      t1.set$imageOffset(_this.get$input().offset);
      t1 = _this.info;
      t1.toString;
      t1.set$bpp(header.$index(0, 16));
      return _this.info;
    },
    decodeFrame$1: function(frame) {
      var t1, t2, image, y, x, b, g, r, _this = this;
      H._asInt(frame);
      if (_this.info == null)
        return null;
      t1 = _this.get$input();
      t2 = _this.info.imageOffset;
      t2.toString;
      J.set$offset$z(t1, t2);
      t2 = _this.info;
      image = U.Image$(t2.width, t2.height, C.Channels_0, null, null);
      t1 = image.height;
      if (typeof t1 !== "number")
        return t1.$sub();
      y = t1 - 1;
      t1 = image.width;
      for (; y >= 0; --y) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 0;
        for (; x < t1; ++x) {
          b = _this.get$input().readByte$0();
          g = _this.get$input().readByte$0();
          r = _this.get$input().readByte$0();
          image.setPixel$3(x, y, K.getColor(r, g, b, H.boolConversionCheck(J.$eq$(_this.info.bpp, 32)) ? _this.get$input().readByte$0() : 255));
        }
      }
      return image;
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    }
  };
  A.TiffBitReader.prototype = {
    readBits$1: function(numBits) {
      var t1, value, t2, t3, t4, _this = this;
      H._asInt(numBits);
      if (numBits === 0)
        return 0;
      if (H.boolConversionCheck(J.$eq$(_this._bitPos, 0))) {
        _this._bitPos = 8;
        _this.set$_tiff_bit_reader$_bitBuffer(_this.input.readByte$0());
      }
      t1 = _this.input;
      value = 0;
      while (true) {
        t2 = _this._bitPos;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(numBits > t2))
          break;
        t3 = C.JSInt_methods.$shl(value, t2);
        t4 = _this._tiff_bit_reader$_bitBuffer;
        t2 = C.JSArray_methods.$index(C.List_knt, t2);
        if (typeof t4 !== "number")
          return t4.$and();
        if (typeof t2 !== "number")
          return H.iae(t2);
        value = t3 + ((t4 & t2) >>> 0);
        t2 = _this._bitPos;
        if (typeof t2 !== "number")
          return H.iae(t2);
        numBits -= t2;
        _this._bitPos = 8;
        _this.set$_tiff_bit_reader$_bitBuffer(t1.readByte$0());
      }
      if (numBits > 0) {
        if (t2 === 0) {
          _this._bitPos = 8;
          _this.set$_tiff_bit_reader$_bitBuffer(t1.readByte$0());
        }
        t1 = C.JSInt_methods.$shl(value, numBits);
        t2 = _this._tiff_bit_reader$_bitBuffer;
        t3 = _this._bitPos;
        if (typeof t3 !== "number")
          return t3.$sub();
        t3 -= numBits;
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSNumber_methods.$shr(t2, t3);
        if (numBits >= 9)
          return H.ioore(C.List_knt, numBits);
        t4 = C.List_knt[numBits];
        if (typeof t4 !== "number")
          return H.iae(t4);
        value = t1 + ((t2 & t4) >>> 0);
        _this.set$_bitPos(t3);
      }
      return value;
    },
    flushByte$0: function() {
      this._bitPos = 0;
    },
    set$_tiff_bit_reader$_bitBuffer: function(_bitBuffer) {
      this._tiff_bit_reader$_bitBuffer = H._asInt(_bitBuffer);
    },
    set$_bitPos: function(_bitPos) {
      this._bitPos = H._asInt(_bitPos);
    }
  };
  G.TiffEntry.prototype = {
    toString$0: function(_) {
      var _this = this,
        t1 = _this.tag;
      if (H.boolConversionCheck(C.Map_6zffn.containsKey$1(t1)))
        return H.S(C.Map_6zffn.$index(0, t1)) + ": " + H.S(_this.type) + " " + H.S(_this.numValues);
      return "<" + H.S(t1) + ">: " + H.S(_this.type) + " " + H.S(_this.numValues);
    },
    get$isValid: function() {
      var t1 = this.type;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 13 && t1 > 0;
    },
    get$typeSize: function() {
      return H.boolConversionCheck(this.get$isValid()) ? C.JSArray_methods.$index(C.List_yYQ, this.type) : 0;
    },
    readValue$0: function() {
      var t1 = this.valueOffset;
      t1.toString;
      J.set$offset$z(this.p, t1);
      return this._readValue$0();
    },
    readValues$0: function() {
      var values, i, _this = this,
        t1 = _this.valueOffset;
      t1.toString;
      J.set$offset$z(_this.p, t1);
      values = H.setRuntimeTypeInfo([], type$.JSArray_int);
      t1 = _this.numValues;
      if (typeof t1 !== "number")
        return H.iae(t1);
      i = 0;
      for (; i < t1; ++i)
        C.JSArray_methods.add$1(values, _this._readValue$0());
      return values;
    },
    _readValue$0: function() {
      var t1, num, den, _this = this;
      switch (_this.type) {
        case 1:
        case 2:
          return _this.p.readByte$0();
        case 3:
          return _this.p.readUint16$0();
        case 4:
          return _this.p.readUint32$0();
        case 5:
          t1 = _this.p;
          num = t1.readUint32$0();
          den = t1.readUint32$0();
          if (den === 0)
            return 0;
          return C.JSInt_methods.$tdiv(num, den);
        case 6:
          throw H.wrapException(K.ImageException$("Unhandled value type: SBYTE"));
        case 7:
          return _this.p.readByte$0();
        case 8:
          throw H.wrapException(K.ImageException$("Unhandled value type: SSHORT"));
        case 9:
          throw H.wrapException(K.ImageException$("Unhandled value type: SLONG"));
        case 10:
          throw H.wrapException(K.ImageException$("Unhandled value type: SRATIONAL"));
        case 11:
          throw H.wrapException(K.ImageException$("Unhandled value type: FLOAT"));
        case 12:
          throw H.wrapException(K.ImageException$("Unhandled value type: DOUBLE"));
      }
      return 0;
    },
    set$valueOffset: function(valueOffset) {
      this.valueOffset = H._asIntQ(valueOffset);
    }
  };
  A.TiffFaxDecoder.prototype = {
    get$data: function(_) {
      var t1 = this.__TiffFaxDecoder_data;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("data")) : t1;
    },
    set$data: function(_, t1) {
      this.__TiffFaxDecoder_data = type$.InputBuffer._as(t1);
    },
    TiffFaxDecoder$3: function(fillOrder, width, height) {
      var t1 = this.width,
        t2 = type$.nullable_int;
      this.set$prevChangingElems(P.List_List$filled(t1, null, false, t2));
      this.set$currChangingElems(P.List_List$filled(t1, null, false, t2));
    },
    decode1D$4: function(out, compData, startX, height) {
      var scanlineStride, lineOffset, i, _this = this,
        t1 = type$.InputBuffer;
      t1._as(out);
      t1._as(compData);
      H._asInt(startX);
      H._asInt(height);
      _this.set$data(0, compData);
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSNumber_methods._tdivFast$1(t1 + 7, 8);
      for (lineOffset = 0, i = 0; i < height; ++i) {
        _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
      }
    },
    _decodeNextScanline$3: function(buffer, lineOffset, bitOffset) {
      var t1, bits, code, isT, current, entry, twoBits, isWhite, t2, t3, _this = this;
      type$.InputBuffer._as(buffer);
      H._asInt(lineOffset);
      H._asInt(bitOffset);
      _this.changingElemSize = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bits = 0;
      code = 0;
      isT = 0;
      current = null;
      entry = null;
      twoBits = null;
      isWhite = true;
      for (; bitOffset < t1;) {
        for (; isWhite;) {
          current = _this._nextNBits$1(10);
          if (current >>> 0 !== current || current >= 1024)
            return H.ioore(C.List_VSP, current);
          entry = C.List_VSP[current];
          isT = entry & 1;
          bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
          if (bits === 12) {
            twoBits = _this._nextLesserThan8Bits$1(2);
            current = (current << 2 & 12 | twoBits) >>> 0;
            if (current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 7;
            code = C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            bitOffset += code;
            _this._updatePointer$1(4 - bits);
          } else if (bits === 0)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder0"));
          else if (bits === 15)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder1"));
          else {
            code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            bitOffset += code;
            _this._updatePointer$1(10 - bits);
            if (isT === 0) {
              t2 = _this.currChangingElems;
              t2.toString;
              t3 = _this.changingElemSize;
              if (typeof t3 !== "number")
                return t3.$add();
              _this.set$changingElemSize(t3 + 1);
              J.$indexSet$ax(t2, t3, bitOffset);
              isWhite = false;
            }
          }
        }
        if (bitOffset === t1) {
          if (H.boolConversionCheck(J.$eq$(_this.compression, 2)))
            _this._advancePointer$0();
          break;
        }
        for (; !isWhite;) {
          current = _this._nextLesserThan8Bits$1(4);
          if (current >>> 0 !== current || current >= 16)
            return H.ioore(C.List_89P, current);
          entry = C.List_89P[current];
          isT = entry & 1;
          bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
          code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
          if (code === 100) {
            current = _this._nextNBits$1(9);
            if (current >>> 0 !== current || current >= 512)
              return H.ioore(C.List_nLG, current);
            entry = C.List_nLG[current];
            isT = entry & 1;
            bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
            code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            if (bits === 12) {
              _this._updatePointer$1(5);
              current = _this._nextLesserThan8Bits$1(4);
              if (current >>> 0 !== current || current >= 16)
                return H.ioore(C.List_MEg, current);
              entry = C.List_MEg[current];
              bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 7;
              code = C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(4 - bits);
            } else if (bits === 15)
              throw H.wrapException(K.ImageException$("TIFFFaxDecoder2"));
            else {
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(9 - bits);
              if (isT === 0) {
                t2 = _this.currChangingElems;
                t2.toString;
                t3 = _this.changingElemSize;
                if (typeof t3 !== "number")
                  return t3.$add();
                _this.set$changingElemSize(t3 + 1);
                J.$indexSet$ax(t2, t3, bitOffset);
                isWhite = true;
              }
            }
          } else {
            if (code === 200) {
              current = _this._nextLesserThan8Bits$1(2);
              if (current >>> 0 !== current || current >= 4)
                return H.ioore(C.List_292_260_226_226, current);
              entry = C.List_292_260_226_226[current];
              code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
              bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(2 - bits);
              t2 = _this.currChangingElems;
              t2.toString;
              t3 = _this.changingElemSize;
              if (typeof t3 !== "number")
                return t3.$add();
              _this.set$changingElemSize(t3 + 1);
              J.$indexSet$ax(t2, t3, bitOffset);
            } else {
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(4 - bits);
              t2 = _this.currChangingElems;
              t2.toString;
              t3 = _this.changingElemSize;
              if (typeof t3 !== "number")
                return t3.$add();
              _this.set$changingElemSize(t3 + 1);
              J.$indexSet$ax(t2, t3, bitOffset);
            }
            isWhite = true;
          }
        }
        if (bitOffset === t1) {
          if (H.boolConversionCheck(J.$eq$(_this.compression, 2)))
            _this._advancePointer$0();
          break;
        }
      }
      t1 = _this.currChangingElems;
      t1.toString;
      t2 = _this.changingElemSize;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$changingElemSize(t2 + 1);
      J.$indexSet$ax(t1, t2, bitOffset);
    },
    decode2D$5: function(out, compData, startX, height, tiffT4Options) {
      var scanlineStride, b, t2, bitOffset, lineOffset, temp, isWhite, bits, code, entry, b2, b1, a1, a0, currIndex, lines, t3, currIndex0, currIndex1, number, _this = this, _null = null,
        t1 = type$.InputBuffer;
      t1._as(out);
      t1._as(compData);
      H._asInt(startX);
      H._asInt(height);
      H._asInt(tiffT4Options);
      _this.set$data(0, compData);
      _this.compression = 3;
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSNumber_methods._tdivFast$1(t1 + 7, 8);
      b = P.List_List$filled(2, _null, false, type$.nullable_int);
      _this.oneD = tiffT4Options & 1;
      _this.fillBits = tiffT4Options >>> 2 & 1;
      if (!H.boolConversionCheck(J.$eq$(_this._readEOL$0(), 1)))
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder3"));
      _this._decodeNextScanline$3(out, 0, startX);
      for (t2 = J.getInterceptor$asx(b), bitOffset = _null, lineOffset = scanlineStride, temp = bitOffset, isWhite = temp, bits = isWhite, code = bits, entry = code, b2 = entry, b1 = b2, a1 = b1, a0 = a1, currIndex = 0, lines = 1; lines < height; ++lines) {
        if (H.boolConversionCheck(J.$eq$(_this._readEOL$0(), 0))) {
          temp = _this.prevChangingElems;
          _this.set$prevChangingElems(_this.currChangingElems);
          _this.set$currChangingElems(temp);
          _this.lastChangingElement = 0;
          bitOffset = startX;
          a0 = -1;
          isWhite = true;
          currIndex = 0;
          while (true) {
            bitOffset.toString;
            if (!(bitOffset < t1))
              break;
            _this._getNextChangingElement$3(a0, isWhite, b);
            b1 = t2.$index(b, 0);
            b2 = t2.$index(b, 1);
            entry = _this._nextLesserThan8Bits$1(7);
            if (entry >>> 0 !== entry || entry >= 128)
              return H.ioore(C.List_8co, entry);
            t3 = C.List_8co[entry];
            if (typeof t3 !== "number")
              return t3.$and();
            entry = t3 & 255;
            code = entry >>> 3 & 15;
            bits = entry & 7;
            if (code === 0) {
              if (!isWhite) {
                b2.toString;
                _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
              }
              _this._updatePointer$1(7 - bits);
              bitOffset = b2;
              a0 = bitOffset;
            } else if (code === 1) {
              _this._updatePointer$1(7 - bits);
              currIndex0 = currIndex + 1;
              currIndex1 = currIndex0 + 1;
              if (isWhite) {
                bitOffset += _this._decodeWhiteCodeWord$0();
                t3 = _this.currChangingElems;
                t3.toString;
                J.$indexSet$ax(t3, currIndex, bitOffset);
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                t3 = _this.currChangingElems;
                t3.toString;
                J.$indexSet$ax(t3, currIndex0, bitOffset);
              } else {
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                t3 = _this.currChangingElems;
                t3.toString;
                J.$indexSet$ax(t3, currIndex, bitOffset);
                bitOffset += _this._decodeWhiteCodeWord$0();
                t3 = _this.currChangingElems;
                t3.toString;
                J.$indexSet$ax(t3, currIndex0, bitOffset);
              }
              currIndex = currIndex1;
              a0 = bitOffset;
            } else {
              if (code <= 8) {
                b1.toString;
                a1 = b1 + (code - 5);
                t3 = _this.currChangingElems;
                t3.toString;
                currIndex0 = currIndex + 1;
                J.$indexSet$ax(t3, currIndex, a1);
                isWhite = !isWhite;
                if (isWhite)
                  _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
                _this._updatePointer$1(7 - bits);
              } else
                throw H.wrapException(K.ImageException$("TIFFFaxDecoder4"));
              bitOffset = a1;
              currIndex = currIndex0;
              a0 = bitOffset;
            }
          }
          t3 = _this.currChangingElems;
          t3.toString;
          currIndex0 = currIndex + 1;
          J.$indexSet$ax(t3, currIndex, bitOffset);
          _this.changingElemSize = currIndex0;
          currIndex = currIndex0;
        } else
          _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
      }
    },
    decodeT6$5: function(out, compData, startX, height, tiffT6Options) {
      var scanlineStride, b, t2, t3, t4, bits, code, entry, b2, b1, a1, lineOffset, lines, temp, bitOffset, a0, isWhite, currIndex, currIndex0, currIndex1, number, zeros, exit, _this = this, _null = null,
        t1 = type$.InputBuffer;
      t1._as(out);
      t1._as(compData);
      H._asInt(startX);
      H._asInt(height);
      H._asInt(tiffT6Options);
      _this.set$data(0, compData);
      _this.compression = 4;
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSNumber_methods._tdivFast$1(t1 + 7, 8);
      b = P.List_List$filled(2, _null, false, type$.nullable_int);
      t2 = _this.currChangingElems;
      t2.toString;
      _this.changingElemSize = 0;
      _this.changingElemSize = 1;
      t3 = J.getInterceptor$ax(t2);
      t3.$indexSet(t2, 0, t1);
      t4 = _this.changingElemSize;
      if (typeof t4 !== "number")
        return t4.$add();
      _this.set$changingElemSize(t4 + 1);
      t3.$indexSet(t2, t4, t1);
      for (t2 = J.getInterceptor$asx(b), bits = _null, code = bits, entry = code, b2 = entry, b1 = b2, a1 = b1, lineOffset = 0, lines = 0; lines < height; ++lines) {
        temp = _this.prevChangingElems;
        _this.set$prevChangingElems(_this.currChangingElems);
        _this.set$currChangingElems(temp);
        temp.toString;
        _this.lastChangingElement = 0;
        t3 = J.getInterceptor$ax(temp);
        bitOffset = startX;
        a0 = -1;
        isWhite = true;
        currIndex = 0;
        while (true) {
          bitOffset.toString;
          if (!(bitOffset < t1))
            break;
          _this._getNextChangingElement$3(a0, isWhite, b);
          b1 = t2.$index(b, 0);
          b2 = t2.$index(b, 1);
          entry = _this._nextLesserThan8Bits$1(7);
          if (entry >>> 0 !== entry || entry >= 128)
            return H.ioore(C.List_8co, entry);
          t4 = C.List_8co[entry];
          if (typeof t4 !== "number")
            return t4.$and();
          entry = t4 & 255;
          code = entry >>> 3 & 15;
          bits = entry & 7;
          if (code === 0) {
            if (!isWhite) {
              b2.toString;
              _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
            }
            _this._updatePointer$1(7 - bits);
            bitOffset = b2;
            a0 = bitOffset;
          } else if (code === 1) {
            _this._updatePointer$1(7 - bits);
            currIndex0 = currIndex + 1;
            currIndex1 = currIndex0 + 1;
            if (isWhite) {
              bitOffset += _this._decodeWhiteCodeWord$0();
              t3.$indexSet(temp, currIndex, bitOffset);
              number = _this._decodeBlackCodeWord$0();
              _this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset += number;
              t3.$indexSet(temp, currIndex0, bitOffset);
            } else {
              number = _this._decodeBlackCodeWord$0();
              _this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset += number;
              t3.$indexSet(temp, currIndex, bitOffset);
              bitOffset += _this._decodeWhiteCodeWord$0();
              t3.$indexSet(temp, currIndex0, bitOffset);
            }
            currIndex = currIndex1;
            a0 = bitOffset;
          } else if (code <= 8) {
            b1.toString;
            a1 = b1 + (code - 5);
            currIndex0 = currIndex + 1;
            t3.$indexSet(temp, currIndex, a1);
            isWhite = !isWhite;
            if (isWhite)
              _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
            _this._updatePointer$1(7 - bits);
            bitOffset = a1;
            currIndex = currIndex0;
            a0 = bitOffset;
          } else if (code === 11) {
            if (!H.boolConversionCheck(J.$eq$(_this._nextLesserThan8Bits$1(3), 7)))
              throw H.wrapException(K.ImageException$("TIFFFaxDecoder5"));
            for (zeros = 0, exit = false; !exit;) {
              for (; !H.boolConversionCheck(J.$eq$(_this._nextLesserThan8Bits$1(1), 1));)
                ++zeros;
              if (zeros > 5) {
                zeros -= 6;
                if (!isWhite && zeros > 0) {
                  currIndex0 = currIndex + 1;
                  t3.$indexSet(temp, currIndex, bitOffset);
                  currIndex = currIndex0;
                }
                bitOffset += zeros;
                if (zeros > 0)
                  isWhite = true;
                if (H.boolConversionCheck(J.$eq$(_this._nextLesserThan8Bits$1(1), 0))) {
                  if (!isWhite) {
                    currIndex0 = currIndex + 1;
                    t3.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                  }
                  isWhite = true;
                } else {
                  if (isWhite) {
                    currIndex0 = currIndex + 1;
                    t3.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                  }
                  isWhite = false;
                }
                exit = true;
              }
              if (zeros === 5) {
                if (!isWhite) {
                  currIndex0 = currIndex + 1;
                  t3.$indexSet(temp, currIndex, bitOffset);
                  currIndex = currIndex0;
                }
                bitOffset += zeros;
                isWhite = true;
              } else {
                bitOffset += zeros;
                currIndex0 = currIndex + 1;
                t3.$indexSet(temp, currIndex, bitOffset);
                _this._setToBlack$4(out, lineOffset, bitOffset, 1);
                ++bitOffset;
                currIndex = currIndex0;
                isWhite = false;
              }
            }
          } else
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder5 " + code));
        }
        t3.$indexSet(temp, currIndex, bitOffset);
        _this.changingElemSize = currIndex + 1;
        lineOffset += scanlineStride;
      }
    },
    _decodeWhiteCodeWord$0: function() {
      var twoBits, runLength, isWhite, current, entry, bits, t1, _this = this;
      for (twoBits = null, runLength = 0, isWhite = true; isWhite;) {
        current = _this._nextNBits$1(10);
        if (current >>> 0 !== current || current >= 1024)
          return H.ioore(C.List_VSP, current);
        entry = C.List_VSP[current];
        bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
        if (bits === 12) {
          twoBits = _this._nextLesserThan8Bits$1(2);
          current = (current << 2 & 12 | twoBits) >>> 0;
          if (current >= 16)
            return H.ioore(C.List_MEg, current);
          entry = C.List_MEg[current];
          t1 = C.JSInt_methods._shrOtherPositive$1(entry, 1);
          runLength += C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
          _this._updatePointer$1(4 - (t1 & 7));
        } else if (bits === 0)
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder0"));
        else if (bits === 15)
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder1"));
        else {
          runLength += C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
          _this._updatePointer$1(10 - bits);
          if ((entry & 1) === 0)
            isWhite = false;
        }
      }
      return runLength;
    },
    _decodeBlackCodeWord$0: function() {
      var runLength, isWhite, current, entry, t1, code, bits, _this = this;
      for (runLength = 0, isWhite = false; !isWhite;) {
        current = _this._nextLesserThan8Bits$1(4);
        if (current >>> 0 !== current || current >= 16)
          return H.ioore(C.List_89P, current);
        entry = C.List_89P[current];
        t1 = C.JSInt_methods._shrOtherPositive$1(entry, 1);
        code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
        if (code === 100) {
          current = _this._nextNBits$1(9);
          if (current >>> 0 !== current || current >= 512)
            return H.ioore(C.List_nLG, current);
          entry = C.List_nLG[current];
          bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
          t1 = C.JSInt_methods._shrOtherPositive$1(entry, 5);
          if (bits === 12) {
            _this._updatePointer$1(5);
            current = _this._nextLesserThan8Bits$1(4);
            if (current >>> 0 !== current || current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            t1 = C.JSInt_methods._shrOtherPositive$1(entry, 1);
            runLength += C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            _this._updatePointer$1(4 - (t1 & 7));
          } else if (bits === 15)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder2"));
          else {
            runLength += t1 & 2047;
            _this._updatePointer$1(9 - bits);
            if ((entry & 1) === 0)
              isWhite = true;
          }
        } else {
          if (code === 200) {
            current = _this._nextLesserThan8Bits$1(2);
            if (current >>> 0 !== current || current >= 4)
              return H.ioore(C.List_292_260_226_226, current);
            entry = C.List_292_260_226_226[current];
            runLength += C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            _this._updatePointer$1(2 - (C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15));
          } else {
            runLength += code;
            _this._updatePointer$1(4 - (t1 & 15));
          }
          isWhite = true;
        }
      }
      return runLength;
    },
    _readEOL$0: function() {
      var t1, bitsLeft, n, _this = this,
        _s15_ = "TIFFFaxDecoder8";
      if (H.boolConversionCheck(J.$eq$(_this.fillBits, 0))) {
        if (!H.boolConversionCheck(J.$eq$(_this._nextNBits$1(12), 1)))
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder6"));
      } else if (H.boolConversionCheck(J.$eq$(_this.fillBits, 1))) {
        t1 = _this.bitPointer;
        t1.toString;
        if (typeof t1 !== "number")
          return H.iae(t1);
        bitsLeft = 8 - t1;
        if (!H.boolConversionCheck(J.$eq$(_this._nextNBits$1(bitsLeft), 0)))
          throw H.wrapException(K.ImageException$(_s15_));
        if (bitsLeft < 4)
          if (!H.boolConversionCheck(J.$eq$(_this._nextNBits$1(8), 0)))
            throw H.wrapException(K.ImageException$(_s15_));
        for (; n = _this._nextNBits$1(8), n !== 1;)
          if (n !== 0)
            throw H.wrapException(K.ImageException$(_s15_));
      }
      if (H.boolConversionCheck(J.$eq$(_this.oneD, 0)))
        return 1;
      else
        return _this._nextLesserThan8Bits$1(1);
    },
    _getNextChangingElement$3: function(a0, isWhite, ret) {
      var pce, ces, t1, start, i, _this = this;
      H._asIntQ(a0);
      H._asBool(isWhite);
      type$.List_nullable_int._as(ret);
      pce = _this.prevChangingElems;
      ces = _this.changingElemSize;
      t1 = _this.lastChangingElement;
      if (typeof t1 !== "number")
        return t1.$gt();
      start = t1 > 0 ? t1 - 1 : 0;
      start = isWhite ? (start & 4294967294) >>> 0 : (start | 1) >>> 0;
      for (i = start; i < ces; i += 2) {
        pce.toString;
        t1 = J.$index$asx(pce, i);
        t1.toString;
        a0.toString;
        if (t1 > a0) {
          _this.lastChangingElement = i;
          J.$indexSet$ax(ret, 0, t1);
          break;
        }
      }
      t1 = i + 1;
      if (t1 < ces) {
        pce.toString;
        J.$indexSet$ax(ret, 1, J.$index$asx(pce, t1));
      }
    },
    _setToBlack$4: function(buffer, lineOffset, bitOffset, numBits) {
      var bitNum, lastBit, byteNum, shift, maskVal, val, t1, byteNum0, t2;
      type$.InputBuffer._as(buffer);
      bitNum = 8 * H._asInt(lineOffset) + H._asInt(bitOffset);
      lastBit = bitNum + H._asInt(numBits);
      byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3);
      shift = bitNum & 7;
      if (shift > 0) {
        maskVal = C.JSInt_methods.$shl(1, 7 - shift);
        val = buffer.$index(0, byteNum);
        while (true) {
          if (!(maskVal > 0 && bitNum < lastBit))
            break;
          val = (val | maskVal) >>> 0;
          maskVal = maskVal >>> 1;
          ++bitNum;
        }
        buffer.$indexSet(0, byteNum, val);
      }
      byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3);
      for (t1 = lastBit - 7; bitNum < t1; byteNum = byteNum0) {
        byteNum0 = byteNum + 1;
        buffer.$indexSet(0, byteNum, 255);
        bitNum += 8;
      }
      for (; bitNum < lastBit;) {
        byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3);
        t1 = buffer.$index(0, byteNum);
        t2 = C.JSInt_methods.$shl(1, 7 - (bitNum & 7));
        if (typeof t1 !== "number")
          return t1.$or();
        buffer.$indexSet(0, byteNum, (t1 | t2) >>> 0);
        ++bitNum;
      }
    },
    _nextNBits$1: function(bitsToGet) {
      var t1, l, bp, t2, b, next, next2next, bitsLeft, bitsFromNextByte, bitsFromNext2NextByte, bitsFromNextByte0, i1, i2, _this = this;
      H._asInt(bitsToGet);
      t1 = J.get$length$asx(_this.get$data(_this));
      if (typeof t1 !== "number")
        return t1.$sub();
      l = t1 - 1;
      bp = _this.bytePointer;
      t1 = _this.fillOrder;
      t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, 1))) {
        t1 = _this.get$data(_this);
        bp.toString;
        b = J.$index$asx(t1, bp);
        if (bp === l) {
          next = 0;
          next2next = 0;
        } else {
          t1 = bp + 1;
          if (t1 === l) {
            next = J.$index$asx(_this.get$data(_this), t1);
            next2next = 0;
          } else {
            next = J.$index$asx(_this.get$data(_this), t1);
            next2next = J.$index$asx(_this.get$data(_this), bp + 2);
          }
        }
      } else if (H.boolConversionCheck(t2.$eq(t1, 2))) {
        t1 = _this.get$data(_this);
        bp.toString;
        t1 = J.$index$asx(t1, bp);
        if (typeof t1 !== "number")
          return t1.$and();
        b = C.List_VvJ[t1 & 255];
        if (bp === l) {
          next = 0;
          next2next = 0;
        } else {
          t1 = bp + 1;
          if (t1 === l) {
            t1 = J.$index$asx(_this.get$data(_this), t1);
            if (typeof t1 !== "number")
              return t1.$and();
            next = C.List_VvJ[t1 & 255];
            next2next = 0;
          } else {
            t1 = J.$index$asx(_this.get$data(_this), t1);
            if (typeof t1 !== "number")
              return t1.$and();
            next = C.List_VvJ[t1 & 255];
            t1 = J.$index$asx(_this.get$data(_this), bp + 2);
            if (typeof t1 !== "number")
              return t1.$and();
            next2next = C.List_VvJ[t1 & 255];
          }
        }
      } else
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder7"));
      t1 = _this.bitPointer;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      if (bitsFromNextByte > 8) {
        bitsFromNext2NextByte = bitsFromNextByte - 8;
        bitsFromNextByte0 = 8;
      } else {
        bitsFromNextByte0 = bitsFromNextByte;
        bitsFromNext2NextByte = 0;
      }
      t1 = _this.bytePointer;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$bytePointer(t1 + 1);
      if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
        return H.ioore(C.List_knt, bitsLeft);
      t1 = C.List_knt[bitsLeft];
      if (typeof t1 !== "number")
        return H.iae(t1);
      i1 = C.JSInt_methods.$shl((b & t1) >>> 0, bitsFromNextByte);
      if (bitsFromNextByte0 < 0)
        return H.ioore(C.List_knt0, bitsFromNextByte0);
      t1 = C.List_knt0[bitsFromNextByte0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      i2 = C.JSInt_methods._shrReceiverPositive$1((next & t1) >>> 0, 8 - bitsFromNextByte0);
      if (bitsFromNext2NextByte !== 0) {
        i2 = C.JSInt_methods.$shl(i2, bitsFromNext2NextByte);
        if (bitsFromNext2NextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNext2NextByte);
        t1 = C.List_knt0[bitsFromNext2NextByte];
        if (typeof t1 !== "number")
          return H.iae(t1);
        i2 |= C.JSInt_methods._shrReceiverPositive$1((next2next & t1) >>> 0, 8 - bitsFromNext2NextByte);
        t1 = _this.bytePointer;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$bytePointer(t1 + 1);
        _this.bitPointer = bitsFromNext2NextByte;
      } else if (bitsFromNextByte0 === 8) {
        _this.bitPointer = 0;
        t1 = _this.bytePointer;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$bytePointer(t1 + 1);
      } else
        _this.bitPointer = bitsFromNextByte0;
      return (i1 | i2) >>> 0;
    },
    _nextLesserThan8Bits$1: function(bitsToGet) {
      var t1, l, bp, t2, b, next, bitsLeft, bitsFromNextByte, shift, i1, _this = this;
      H._asInt(bitsToGet);
      t1 = J.get$length$asx(_this.get$data(_this));
      if (typeof t1 !== "number")
        return t1.$sub();
      l = t1 - 1;
      bp = _this.bytePointer;
      t1 = _this.fillOrder;
      t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, 1))) {
        t1 = _this.get$data(_this);
        bp.toString;
        b = J.$index$asx(t1, bp);
        next = bp === l ? 0 : J.$index$asx(_this.get$data(_this), bp + 1);
      } else if (H.boolConversionCheck(t2.$eq(t1, 2))) {
        t1 = _this.get$data(_this);
        bp.toString;
        t1 = J.$index$asx(t1, bp);
        if (typeof t1 !== "number")
          return t1.$and();
        b = C.List_VvJ[t1 & 255];
        if (bp === l)
          next = 0;
        else {
          t1 = J.$index$asx(_this.get$data(_this), bp + 1);
          if (typeof t1 !== "number")
            return t1.$and();
          next = C.List_VvJ[t1 & 255];
        }
      } else
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder7"));
      t1 = _this.bitPointer;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      shift = bitsLeft - bitsToGet;
      if (shift >= 0) {
        if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t2 = C.List_knt[bitsLeft];
        if (typeof t2 !== "number")
          return H.iae(t2);
        i1 = C.JSInt_methods._shrReceiverPositive$1((b & t2) >>> 0, shift);
        _this.set$bitPointer(t1 + bitsToGet);
        if (H.boolConversionCheck(J.$eq$(_this.bitPointer, 8))) {
          _this.bitPointer = 0;
          t1 = _this.bytePointer;
          t1.toString;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.set$bytePointer(t1 + 1);
        }
      } else {
        if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t1 = C.List_knt[bitsLeft];
        if (typeof t1 !== "number")
          return H.iae(t1);
        i1 = C.JSInt_methods.$shl((b & t1) >>> 0, -shift);
        if (bitsFromNextByte < 0 || bitsFromNextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNextByte);
        t1 = C.List_knt0[bitsFromNextByte];
        if (typeof t1 !== "number")
          return H.iae(t1);
        i1 = (i1 | C.JSInt_methods._shrReceiverPositive$1((next & t1) >>> 0, 8 - bitsFromNextByte)) >>> 0;
        t1 = _this.bytePointer;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$bytePointer(t1 + 1);
        _this.bitPointer = bitsFromNextByte;
      }
      return i1;
    },
    _updatePointer$1: function(bitsToMoveBack) {
      var t1, i, _this = this;
      H._asInt(bitsToMoveBack);
      t1 = _this.bitPointer;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - bitsToMoveBack;
      if (i < 0) {
        t1 = _this.bytePointer;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$bytePointer(t1 - 1);
        _this.bitPointer = 8 + i;
      } else
        _this.bitPointer = i;
    },
    _advancePointer$0: function() {
      var t1, _this = this;
      if (!H.boolConversionCheck(J.$eq$(_this.bitPointer, 0))) {
        t1 = _this.bytePointer;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$bytePointer(t1 + 1);
        _this.bitPointer = 0;
      }
      return true;
    },
    set$changingElemSize: function(changingElemSize) {
      this.changingElemSize = H._asInt(changingElemSize);
    },
    set$prevChangingElems: function(prevChangingElems) {
      this.prevChangingElems = type$.nullable_List_nullable_int._as(prevChangingElems);
    },
    set$currChangingElems: function(currChangingElems) {
      this.currChangingElems = type$.nullable_List_nullable_int._as(currChangingElems);
    },
    set$bitPointer: function(bitPointer) {
      this.bitPointer = H._asIntQ(bitPointer);
    },
    set$bytePointer: function(bytePointer) {
      this.bytePointer = H._asIntQ(bytePointer);
    }
  };
  U.TiffImage.prototype = {
    get$chromaSubH: function() {
      var t1 = this.__TiffImage_chromaSubH;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("chromaSubH")) : t1;
    },
    set$chromaSubH: function(t1) {
      this.__TiffImage_chromaSubH = H._asInt(t1);
    },
    get$chromaSubV: function() {
      var t1 = this.__TiffImage_chromaSubV;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("chromaSubV")) : t1;
    },
    set$chromaSubV: function(t1) {
      this.__TiffImage_chromaSubV = H._asInt(t1);
    },
    get$tilesX: function() {
      var t1 = this.__TiffImage_tilesX;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("tilesX")) : t1;
    },
    set$tilesX: function(t1) {
      this.__TiffImage_tilesX = H._asInt(t1);
    },
    get$tilesY: function() {
      var t1 = this.__TiffImage_tilesY;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("tilesY")) : t1;
    },
    set$tilesY: function(t1) {
      this.__TiffImage_tilesY = H._asInt(t1);
    },
    get$colorMapRed: function() {
      var t1 = this.__TiffImage_colorMapRed;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("colorMapRed")) : t1;
    },
    set$colorMapRed: function(t1) {
      this.__TiffImage_colorMapRed = H._asInt(t1);
    },
    get$colorMapGreen: function() {
      var t1 = this.__TiffImage_colorMapGreen;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("colorMapGreen")) : t1;
    },
    set$colorMapGreen: function(t1) {
      this.__TiffImage_colorMapGreen = H._asInt(t1);
    },
    get$colorMapBlue: function() {
      var t1 = this.__TiffImage_colorMapBlue;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("colorMapBlue")) : t1;
    },
    set$colorMapBlue: function(t1) {
      this.__TiffImage_colorMapBlue = H._asInt(t1);
    },
    TiffImage$1: function(p) {
      var t1, t2, i, entry, t3, t4, len, t5, l, v, _this = this,
        p3 = Z.InputBuffer$from(p, null, 0),
        numDirEntries = p.readUint16$0();
      for (t1 = _this.tags, t2 = J.getInterceptor$asx(t1), i = 0; i < numDirEntries; ++i) {
        entry = G.TiffEntry$(p.readUint16$0(), p.readUint16$0(), p.readUint32$0(), p3);
        t3 = entry.numValues;
        t4 = entry.get$typeSize();
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 * t4 > 4)
          entry.set$valueOffset(p.readUint32$0());
        else {
          entry.set$valueOffset(p.offset);
          t3 = p.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          p.set$offset(0, t3 + 4);
        }
        t3 = entry.tag;
        t2.$indexSet(t1, t3, entry);
        t4 = J.getInterceptor$(t3);
        if (H.boolConversionCheck(t4.$eq(t3, 256)))
          _this.set$width(0, entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 257)))
          _this.set$height(0, entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 262)))
          _this.set$photometricType(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 259)))
          _this.set$compression(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 258)))
          _this.set$bitsPerSample(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 277)))
          _this.set$samplesPerPixel(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 317)))
          _this.set$predictor(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 339)))
          _this.set$sampleFormat(entry.readValue$0());
        else if (H.boolConversionCheck(t4.$eq(t3, 320))) {
          _this.set$colorMap(entry.readValues$0());
          _this.set$colorMapRed(0);
          t3 = _this.colorMap;
          t3.toString;
          t3 = J.get$length$asx(t3);
          if (typeof t3 !== "number")
            return t3.$tdiv();
          _this.set$colorMapGreen(C.JSNumber_methods._tdivFast$1(t3, 3));
          t3 = _this.get$colorMapGreen();
          if (typeof t3 !== "number")
            return t3.$mul();
          _this.set$colorMapBlue(t3 * 2);
        }
      }
      if (_this.width == null || _this.height == null)
        return;
      if (_this.colorMap != null && H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8))) {
        t3 = _this.colorMap;
        t3.toString;
        len = J.get$length$asx(t3);
        i = 0;
        for (; i < len; ++i) {
          t3 = _this.colorMap;
          t3.toString;
          t4 = J.getInterceptor$asx(t3);
          t5 = t4.$index(t3, i);
          if (typeof t5 !== "number")
            return t5.$shr();
          t4.$indexSet(t3, i, C.JSNumber_methods._shrOtherPositive$1(t5, 8));
        }
      }
      if (H.boolConversionCheck(J.$eq$(_this.photometricType, 0)))
        _this.isWhiteZero = true;
      if (H.boolConversionCheck(_this.hasTag$1(324))) {
        _this.set$tileWidth(_this._readTag$1(322));
        _this.set$tileHeight(_this._readTag$1(323));
        _this.set$tileOffsets(_this._readTagList$1(324));
        _this.set$tileByteCounts(_this._readTagList$1(325));
      } else {
        _this.set$tileWidth(_this._readTag$2(322, _this.width));
        if (!H.boolConversionCheck(_this.hasTag$1(278)))
          _this.set$tileHeight(_this._readTag$2(323, _this.height));
        else {
          l = _this._readTag$1(278);
          if (l === -1)
            _this.set$tileHeight(_this.height);
          else
            _this.tileHeight = l;
        }
        _this.set$tileOffsets(_this._readTagList$1(273));
        _this.set$tileByteCounts(_this._readTagList$1(279));
      }
      t3 = _this.width;
      t3.toString;
      t4 = _this.tileWidth;
      t4.toString;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      _this.set$tilesX(C.JSNumber_methods.$tdiv(t3 + t4 - 1, t4));
      t4 = _this.height;
      t4.toString;
      t3 = _this.tileHeight;
      t3.toString;
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this.set$tilesY(C.JSNumber_methods.$tdiv(t4 + t3 - 1, t3));
      t3 = _this.tileWidth;
      t3.toString;
      t4 = _this.tileHeight;
      t4.toString;
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this.samplesPerPixel;
      if (typeof t5 !== "number")
        return H.iae(t5);
      _this.set$tileSize(t3 * t4 * t5);
      _this.set$fillOrder(_this._readTag$2(266, 1));
      _this.set$t4Options(_this._readTag$1(292));
      _this.set$t6Options(_this._readTag$1(293));
      _this.set$extraSamples(_this._readTag$1(338));
      switch (_this.photometricType) {
        case 0:
        case 1:
          if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 1)) && H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
            _this.imageType = 0;
          else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 4)) && H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
            _this.imageType = 1;
          else {
            t1 = _this.bitsPerSample;
            if (typeof t1 !== "number")
              return t1.$mod();
            if (C.JSNumber_methods.$mod(t1, 8) === 0)
              if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
                _this.imageType = 2;
              else if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 2)))
                _this.imageType = 3;
              else
                _this.imageType = 8;
          }
          break;
        case 2:
          t1 = _this.bitsPerSample;
          if (typeof t1 !== "number")
            return t1.$mod();
          if (C.JSNumber_methods.$mod(t1, 8) === 0)
            if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 3)))
              _this.imageType = 5;
            else if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 4)))
              _this.imageType = 6;
            else
              _this.imageType = 8;
          break;
        case 3:
          if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
            t1 = H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 4)) || H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8)) || H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16));
          else
            t1 = false;
          if (t1)
            _this.imageType = 4;
          break;
        case 4:
          if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 1)) && H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
            _this.imageType = 0;
          break;
        case 6:
          if (H.boolConversionCheck(J.$eq$(_this.compression, 7)) && H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8)) && H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 3)))
            _this.imageType = 5;
          else {
            if (H.boolConversionCheck(_this.hasTag$1(530))) {
              v = t2.$index(t1, 530).readValues$0();
              t1 = J.getInterceptor$asx(v);
              _this.set$chromaSubH(t1.$index(v, 0));
              _this.set$chromaSubV(t1.$index(v, 1));
            } else {
              _this.set$chromaSubH(2);
              _this.set$chromaSubV(2);
            }
            t1 = _this.get$chromaSubH();
            t2 = _this.get$chromaSubV();
            if (typeof t1 !== "number")
              return t1.$mul();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 * t2 === 1)
              _this.imageType = 8;
            else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8)) && H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 3)))
              _this.imageType = 7;
          }
          break;
        default:
          t1 = _this.bitsPerSample;
          if (typeof t1 !== "number")
            return t1.$mod();
          if (C.JSNumber_methods.$mod(t1, 8) === 0)
            _this.imageType = 8;
          break;
      }
    },
    get$isValid: function() {
      return this.width != null && this.height != null;
    },
    decode$1: function(p) {
      var t1, t2, tileY, ti, tileX, _this = this;
      type$.InputBuffer._as(p);
      t1 = _this.width;
      t1.toString;
      t2 = _this.height;
      t2.toString;
      _this.image = U.Image$(t1, t2, C.Channels_1, null, null);
      tileY = 0;
      ti = 0;
      while (true) {
        t1 = _this.get$tilesY();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(tileY < t1))
          break;
        tileX = 0;
        while (true) {
          t1 = _this.get$tilesX();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(tileX < t1))
            break;
          _this._decodeTile$3(p, tileX, tileY);
          ++tileX;
          ++ti;
        }
        ++tileY;
      }
      t1 = _this.image;
      t1.toString;
      return t1;
    },
    hasTag$1: function(tag) {
      return this.tags.containsKey$1(H._asInt(tag));
    },
    _decodeTile$3: function(p, tileX, tileY) {
      var byteCount, bdata, decoder, e, t1, tileIndex, outX, outY, t2, t3, bytesInThisTile, exception, j, count, len, i, t4, t5, data, tile, py, y, px, x, sample, gray, c, alpha, r, g, b, a, _this = this, _null = null;
      type$.InputBuffer._as(p);
      H._asInt(tileX);
      H._asInt(tileY);
      if (H.boolConversionCheck(J.$eq$(_this.imageType, 0))) {
        _this._decodeBilevelTile$3(p, tileX, tileY);
        return;
      }
      t1 = _this.get$tilesX();
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = _this.tileOffsets;
      t1.toString;
      p.set$offset(0, J.$index$asx(t1, tileIndex));
      t1 = _this.tileWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t1 = _this.tileHeight;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outY = tileY * t1;
      t1 = _this.tileByteCounts;
      t1.toString;
      byteCount = J.$index$asx(t1, tileIndex);
      t1 = _this.tileWidth;
      t1.toString;
      t2 = _this.tileHeight;
      t2.toString;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.samplesPerPixel;
      if (typeof t3 !== "number")
        return H.iae(t3);
      bytesInThisTile = t1 * t2 * t3;
      if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
        bytesInThisTile *= 2;
      else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
        bytesInThisTile *= 4;
      bdata = null;
      if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8)) || H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)) || H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)) || H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 64))) {
        if (H.boolConversionCheck(J.$eq$(_this.compression, 1)))
          bdata = p;
        else if (H.boolConversionCheck(J.$eq$(_this.compression, 5))) {
          bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(bytesInThisTile), false, _null, 0);
          decoder = G.LzwDecoder$();
          try {
            decoder.decode$2(Z.InputBuffer$from(p, byteCount, 0), bdata.buffer);
          } catch (exception) {
            e = H.unwrapException(exception);
            P.print(e);
          }
          if (H.boolConversionCheck(J.$eq$(_this.predictor, 2))) {
            j = 0;
            while (true) {
              t1 = _this.tileHeight;
              t1.toString;
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(j < t1))
                break;
              t1 = _this.samplesPerPixel;
              t2 = _this.tileWidth;
              t2.toString;
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (typeof t1 !== "number")
                return t1.$mul();
              count = t1 * (j * t2 + 1);
              for (len = t2 * t1, i = t1; i < len; ++i) {
                t1 = bdata;
                t2 = J.getInterceptor$asx(t1);
                t3 = t2.$index(t1, count);
                t4 = bdata;
                t5 = _this.samplesPerPixel;
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t5 = J.$index$asx(t4, count - t5);
                if (typeof t3 !== "number")
                  return t3.$add();
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t2.$indexSet(t1, count, t3 + t5);
                ++count;
              }
              ++j;
            }
          }
        } else if (H.boolConversionCheck(J.$eq$(_this.compression, 32773))) {
          bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(bytesInThisTile), false, _null, 0);
          _this._decodePackbits$3(p, bytesInThisTile, bdata.buffer);
        } else if (H.boolConversionCheck(J.$eq$(_this.compression, 32946)))
          bdata = Z.InputBuffer$(S.Inflate$(p.toList$2(0, 0, byteCount)).getBytes$0(), false, _null, 0);
        else if (H.boolConversionCheck(J.$eq$(_this.compression, 8))) {
          data = p.toList$2(0, 0, byteCount);
          bdata = Z.InputBuffer$(Z.ZLibDecoder$().decodeBytes$1(data), false, _null, 0);
        } else if (H.boolConversionCheck(J.$eq$(_this.compression, 6))) {
          if (_this.image == null) {
            t1 = _this.width;
            t1.toString;
            t2 = _this.height;
            t2.toString;
            _this.image = U.Image$(t1, t2, C.Channels_1, _null, _null);
          }
          data = p.toList$2(0, 0, byteCount);
          tile = Z.JpegDecoder$().decodeImage$1(data);
          t1 = _this.image;
          t2 = _this.tileWidth;
          t3 = _this.tileHeight;
          t3.toString;
          _this._jpegToImage$6(tile, t1, outX, outY, t2, t3);
          if (_this.hdrImage != null) {
            t1 = _this.image;
            t1.toString;
            _this.hdrImage = F.HdrImage$fromImage(t1);
          }
          return;
        } else
          throw H.wrapException(K.ImageException$("Unsupported Compression Type: " + H.S(_this.compression)));
        py = outY;
        y = 0;
        while (true) {
          t1 = _this.tileHeight;
          t1.toString;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (y < t1) {
            t1 = _this.height;
            t1.toString;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = py < t1;
          } else
            t1 = false;
          if (!t1)
            break;
          px = outX;
          x = 0;
          while (true) {
            t1 = _this.tileWidth;
            t1.toString;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (x < t1) {
              t1 = _this.width;
              t1.toString;
              if (typeof t1 !== "number")
                return H.iae(t1);
              t1 = px < t1;
            } else
              t1 = false;
            if (!t1)
              break;
            if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 1)))
              if (H.boolConversionCheck(J.$eq$(_this.sampleFormat, 3))) {
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                  sample = bdata.readFloat32$0();
                else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 64)))
                  sample = bdata.readFloat64$0();
                else
                  sample = H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)) ? Q.Half_HalfToDouble(bdata.readUint16$0()) : 0;
                t1 = _this.hdrImage;
                if (t1 != null)
                  t1.setRed$3(px, py, sample);
                if (_this.image != null) {
                  gray = J.toInt$0$n(C.JSNumber_methods.clamp$2(sample * 255, 0, 255));
                  if (H.boolConversionCheck(J.$eq$(_this.photometricType, 3)) && _this.colorMap != null) {
                    t1 = _this.colorMap;
                    t1.toString;
                    t2 = _this.get$colorMapRed();
                    if (typeof t2 !== "number")
                      return t2.$add();
                    t2 = J.$index$asx(t1, t2 + gray);
                    t1 = _this.colorMap;
                    t1.toString;
                    t3 = _this.get$colorMapGreen();
                    if (typeof t3 !== "number")
                      return t3.$add();
                    t3 = J.$index$asx(t1, t3 + gray);
                    t1 = _this.colorMap;
                    t1.toString;
                    t4 = _this.get$colorMapBlue();
                    if (typeof t4 !== "number")
                      return t4.$add();
                    c = K.getColor(t2, t3, J.$index$asx(t1, t4 + gray), 255);
                  } else
                    c = K.getColor(gray, gray, gray, 255);
                  _this.image.setPixel$3(px, py, c);
                }
              } else {
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8)))
                  gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                  gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                  gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                else
                  gray = 0;
                t1 = _this.hdrImage;
                if (t1 != null)
                  t1.setRed$3(px, py, gray);
                if (_this.image != null) {
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                    gray = C.JSInt_methods._shrOtherPositive$1(gray, 8);
                  else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                    gray = C.JSInt_methods._shrOtherPositive$1(gray, 24);
                  if (H.boolConversionCheck(J.$eq$(_this.photometricType, 0)))
                    gray = 255 - gray;
                  if (H.boolConversionCheck(J.$eq$(_this.photometricType, 3)) && _this.colorMap != null) {
                    t1 = _this.colorMap;
                    t1.toString;
                    t2 = _this.get$colorMapRed();
                    if (typeof t2 !== "number")
                      return t2.$add();
                    t2 = J.$index$asx(t1, t2 + gray);
                    t1 = _this.colorMap;
                    t1.toString;
                    t3 = _this.get$colorMapGreen();
                    if (typeof t3 !== "number")
                      return t3.$add();
                    t3 = J.$index$asx(t1, t3 + gray);
                    t1 = _this.colorMap;
                    t1.toString;
                    t4 = _this.get$colorMapBlue();
                    if (typeof t4 !== "number")
                      return t4.$add();
                    c = K.getColor(t2, t3, J.$index$asx(t1, t4 + gray), 255);
                  } else
                    c = K.getColor(gray, gray, gray, 255);
                  _this.image.setPixel$3(px, py, c);
                }
              }
            else if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 2))) {
              if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8))) {
                gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                alpha = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
              } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16))) {
                gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                alpha = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
              } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32))) {
                gray = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                alpha = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
              } else {
                gray = 0;
                alpha = 0;
              }
              t1 = _this.hdrImage;
              if (t1 != null) {
                t1.setRed$3(px, py, gray);
                _this.hdrImage.setGreen$3(px, py, alpha);
              }
              if (_this.image != null) {
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                  gray = C.JSInt_methods._shrOtherPositive$1(gray, 8);
                else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                  gray = C.JSInt_methods._shrOtherPositive$1(gray, 24);
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                  alpha = C.JSInt_methods._shrOtherPositive$1(alpha, 8);
                else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                  alpha = C.JSInt_methods._shrOtherPositive$1(alpha, 24);
                c = K.getColor(gray, gray, gray, alpha);
                _this.image.setPixel$3(px, py, c);
              }
            } else if (H.boolConversionCheck(J.$eq$(_this.samplesPerPixel, 3)))
              if (H.boolConversionCheck(J.$eq$(_this.sampleFormat, 3))) {
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32))) {
                  r = bdata.readFloat32$0();
                  g = bdata.readFloat32$0();
                  b = bdata.readFloat32$0();
                } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 64))) {
                  r = bdata.readFloat64$0();
                  g = bdata.readFloat64$0();
                  b = bdata.readFloat64$0();
                } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16))) {
                  r = Q.Half_HalfToDouble(bdata.readUint16$0());
                  g = Q.Half_HalfToDouble(bdata.readUint16$0());
                  b = Q.Half_HalfToDouble(bdata.readUint16$0());
                } else {
                  r = 0;
                  g = 0;
                  b = 0;
                }
                t1 = _this.hdrImage;
                if (t1 != null) {
                  t1.setRed$3(px, py, r);
                  _this.hdrImage.setGreen$3(px, py, g);
                  _this.hdrImage.setBlue$3(px, py, b);
                }
                if (_this.image != null) {
                  c = K.getColor(J.toInt$0$n(C.JSNumber_methods.clamp$2(r * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2(g * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2(b * 255, 0, 255)), 255);
                  _this.image.setPixel$3(px, py, c);
                }
              } else {
                if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8))) {
                  r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                  g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                  b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16))) {
                  r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                  g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                  b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32))) {
                  r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                  g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                  b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                } else {
                  r = 0;
                  g = 0;
                  b = 0;
                }
                t1 = _this.hdrImage;
                if (t1 != null) {
                  t1.setRed$3(px, py, r);
                  _this.hdrImage.setGreen$3(px, py, g);
                  _this.hdrImage.setBlue$3(px, py, b);
                }
                if (_this.image != null) {
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                    r = C.JSInt_methods._shrOtherPositive$1(r, 8);
                  else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                    r = C.JSInt_methods._shrOtherPositive$1(r, 24);
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                    g = C.JSInt_methods._shrOtherPositive$1(g, 8);
                  else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                    g = C.JSInt_methods._shrOtherPositive$1(g, 24);
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                    b = C.JSInt_methods._shrOtherPositive$1(b, 8);
                  else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                    b = C.JSInt_methods._shrOtherPositive$1(b, 24);
                  c = K.getColor(r, g, b, 255);
                  _this.image.setPixel$3(px, py, c);
                }
              }
            else {
              t1 = _this.samplesPerPixel;
              if (typeof t1 !== "number")
                return t1.$ge();
              if (t1 >= 4)
                if (H.boolConversionCheck(J.$eq$(_this.sampleFormat, 3))) {
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32))) {
                    r = bdata.readFloat32$0();
                    g = bdata.readFloat32$0();
                    b = bdata.readFloat32$0();
                    a = bdata.readFloat32$0();
                  } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 64))) {
                    r = bdata.readFloat64$0();
                    g = bdata.readFloat64$0();
                    b = bdata.readFloat64$0();
                    a = bdata.readFloat64$0();
                  } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16))) {
                    r = Q.Half_HalfToDouble(bdata.readUint16$0());
                    g = Q.Half_HalfToDouble(bdata.readUint16$0());
                    b = Q.Half_HalfToDouble(bdata.readUint16$0());
                    a = Q.Half_HalfToDouble(bdata.readUint16$0());
                  } else {
                    r = 0;
                    g = 0;
                    b = 0;
                    a = 0;
                  }
                  t1 = _this.hdrImage;
                  if (t1 != null) {
                    t1.setRed$3(px, py, r);
                    _this.hdrImage.setGreen$3(px, py, g);
                    _this.hdrImage.setBlue$3(px, py, b);
                    _this.hdrImage.setAlpha$3(px, py, a);
                  }
                  if (_this.image != null) {
                    c = K.getColor(J.toInt$0$n(C.JSNumber_methods.clamp$2(r * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2(g * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2(b * 255, 0, 255)), J.toInt$0$n(C.JSNumber_methods.clamp$2(a * 255, 0, 255)));
                    _this.image.setPixel$3(px, py, c);
                  }
                } else {
                  if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 8))) {
                    r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                    g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                    b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                    a = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt8$0() : bdata.readByte$0();
                  } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16))) {
                    r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                    g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                    b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                    a = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt16$0() : bdata.readUint16$0();
                  } else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32))) {
                    r = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                    g = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                    b = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                    a = H.boolConversionCheck(J.$eq$(_this.sampleFormat, 2)) ? bdata.readInt32$0() : bdata.readUint32$0();
                  } else {
                    r = 0;
                    g = 0;
                    b = 0;
                    a = 0;
                  }
                  t1 = _this.hdrImage;
                  if (t1 != null) {
                    t1.setRed$3(px, py, r);
                    _this.hdrImage.setGreen$3(px, py, g);
                    _this.hdrImage.setBlue$3(px, py, b);
                    _this.hdrImage.setAlpha$3(px, py, a);
                  }
                  if (_this.image != null) {
                    if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                      r = C.JSInt_methods._shrOtherPositive$1(r, 8);
                    else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                      r = C.JSInt_methods._shrOtherPositive$1(r, 24);
                    if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                      g = C.JSInt_methods._shrOtherPositive$1(g, 8);
                    else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                      g = C.JSInt_methods._shrOtherPositive$1(g, 24);
                    if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                      b = C.JSInt_methods._shrOtherPositive$1(b, 8);
                    else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                      b = C.JSInt_methods._shrOtherPositive$1(b, 24);
                    if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
                      a = C.JSInt_methods._shrOtherPositive$1(a, 8);
                    else if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 32)))
                      a = C.JSInt_methods._shrOtherPositive$1(a, 24);
                    c = K.getColor(r, g, b, a);
                    _this.image.setPixel$3(px, py, c);
                  }
                }
            }
            ++x;
            ++px;
          }
          ++y;
          ++py;
        }
      } else
        throw H.wrapException(K.ImageException$("Unsupported bitsPerSample: " + H.S(_this.bitsPerSample)));
    },
    _jpegToImage$6: function(tile, image, outX, outY, tileWidth, tileHeight) {
      var y, t1, x;
      type$.Image._as(tile);
      type$.nullable_Image._as(image);
      H._asInt(outX);
      H._asInt(outY);
      H._asIntQ(tileWidth);
      H._asInt(tileHeight);
      for (y = 0; y < tileHeight; ++y) {
        tileWidth.toString;
        t1 = y + outY;
        x = 0;
        for (; x < tileWidth; ++x) {
          image.toString;
          image.setPixel$3(x + outX, t1, tile.getPixel$2(x, y));
        }
      }
    },
    _decodeBilevelTile$3: function(p, tileX, tileY) {
      var bdata, t1, tileIndex, outX, outY, byteCount, t2, t3, bytesInThisTile, j, count, i, t4, t5, exception, data, br, white, black, py, y, px, x, _this = this, _null = null, _4278190080 = 4278190080, _4294967295 = 4294967295;
      type$.InputBuffer._as(p);
      H._asInt(tileX);
      H._asInt(tileY);
      t1 = _this.get$tilesX();
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = _this.tileOffsets;
      t1.toString;
      p.set$offset(0, J.$index$asx(t1, tileIndex));
      t1 = _this.tileWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t1 = _this.tileHeight;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outY = tileY * t1;
      t1 = _this.tileByteCounts;
      t1.toString;
      byteCount = J.$index$asx(t1, tileIndex);
      bdata = null;
      if (H.boolConversionCheck(J.$eq$(_this.compression, 32773))) {
        t1 = _this.tileWidth;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$mod();
        t2 = C.JSNumber_methods.$mod(t1, 8);
        t3 = _this.tileHeight;
        if (t2 === 0) {
          t2 = C.JSNumber_methods._tdivFast$1(t1, 8);
          t3.toString;
          if (typeof t3 !== "number")
            return H.iae(t3);
          bytesInThisTile = t2 * t3;
        } else {
          t2 = C.JSNumber_methods._tdivFast$1(t1, 8);
          t3.toString;
          if (typeof t3 !== "number")
            return H.iae(t3);
          bytesInThisTile = (t2 + 1) * t3;
        }
        t3.toString;
        if (typeof t3 !== "number")
          return H.iae(t3);
        bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(t1 * t3), false, _null, 0);
        _this._decodePackbits$3(p, bytesInThisTile, bdata.buffer);
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 5))) {
        t1 = _this.tileWidth;
        t1.toString;
        t2 = _this.tileHeight;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(t1 * t2), false, _null, 0);
        G.LzwDecoder$().decode$2(Z.InputBuffer$from(p, byteCount, 0), bdata.buffer);
        if (H.boolConversionCheck(J.$eq$(_this.predictor, 2))) {
          j = 0;
          while (true) {
            t1 = _this.height;
            t1.toString;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = _this.samplesPerPixel;
            t2 = _this.width;
            t2.toString;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t1 !== "number")
              return t1.$mul();
            count = t1 * (j * t2 + 1);
            i = t1;
            while (true) {
              t1 = _this.width;
              t1.toString;
              t2 = _this.samplesPerPixel;
              if (typeof t1 !== "number")
                return t1.$mul();
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(i < t1 * t2))
                break;
              t1 = bdata;
              t2 = J.getInterceptor$asx(t1);
              t3 = t2.$index(t1, count);
              t4 = bdata;
              t5 = _this.samplesPerPixel;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = J.$index$asx(t4, count - t5);
              if (typeof t3 !== "number")
                return t3.$add();
              if (typeof t5 !== "number")
                return H.iae(t5);
              t2.$indexSet(t1, count, t3 + t5);
              ++count;
              ++i;
            }
            ++j;
          }
        }
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 2))) {
        t1 = _this.tileWidth;
        t1.toString;
        t2 = _this.tileHeight;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(t1 * t2), false, _null, 0);
        try {
          t1 = _this.fillOrder;
          t2 = _this.tileWidth;
          t2.toString;
          t3 = _this.tileHeight;
          t3.toString;
          t3 = A.TiffFaxDecoder$(t1, t2, t3);
          t2 = bdata;
          t1 = _this.tileHeight;
          t1.toString;
          t3.decode1D$4(t2, p, 0, t1);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 3))) {
        t1 = _this.tileWidth;
        t1.toString;
        t2 = _this.tileHeight;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(t1 * t2), false, _null, 0);
        try {
          t1 = _this.fillOrder;
          t2 = _this.tileWidth;
          t2.toString;
          t3 = _this.tileHeight;
          t3.toString;
          t3 = A.TiffFaxDecoder$(t1, t2, t3);
          t2 = bdata;
          t1 = _this.tileHeight;
          t1.toString;
          t4 = _this.t4Options;
          t4.toString;
          t3.decode2D$5(t2, p, 0, t1, t4);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 4))) {
        t1 = _this.tileWidth;
        t1.toString;
        t2 = _this.tileHeight;
        t2.toString;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        bdata = Z.InputBuffer$(H.NativeUint8List_NativeUint8List(t1 * t2), false, _null, 0);
        try {
          t1 = _this.fillOrder;
          t2 = _this.tileWidth;
          t2.toString;
          t3 = _this.tileHeight;
          t3.toString;
          t3 = A.TiffFaxDecoder$(t1, t2, t3);
          t2 = bdata;
          t1 = _this.tileHeight;
          t1.toString;
          t4 = _this.t6Options;
          t4.toString;
          t3.decodeT6$5(t2, p, 0, t1, t4);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 8))) {
        data = p.toList$2(0, 0, byteCount);
        bdata = Z.InputBuffer$(Z.ZLibDecoder$().decodeBytes$1(data), false, _null, 0);
      } else if (H.boolConversionCheck(J.$eq$(_this.compression, 32946)))
        bdata = Z.InputBuffer$(S.Inflate$(p.toList$2(0, 0, byteCount)).getBytes$0(), false, _null, 0);
      else if (H.boolConversionCheck(J.$eq$(_this.compression, 1)))
        bdata = p;
      else
        throw H.wrapException(K.ImageException$("Unsupported Compression Type: " + H.S(_this.compression)));
      br = A.TiffBitReader$(bdata);
      t1 = H.boolConversionCheck(_this.isWhiteZero);
      white = t1 ? _4278190080 : _4294967295;
      black = t1 ? _4294967295 : _4278190080;
      py = outY;
      y = 0;
      while (true) {
        t1 = _this.tileHeight;
        t1.toString;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(y < t1))
          break;
        px = outX;
        x = 0;
        while (true) {
          t1 = _this.tileWidth;
          t1.toString;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(x < t1))
            break;
          t1 = H.boolConversionCheck(J.$eq$(br.readBits$1(1), 0));
          t2 = _this.image;
          if (t1)
            t2.setPixel$3(px, py, black);
          else
            t2.setPixel$3(px, py, white);
          ++x;
          ++px;
        }
        br.flushByte$0();
        ++y;
        ++py;
      }
    },
    _decodePackbits$3: function(data, arraySize, dst) {
      var t1, srcCount, dstCount, srcCount0, b, t2, i, dstCount0, repeat;
      type$.InputBuffer._as(data);
      H._asInt(arraySize);
      type$.List_int._as(dst);
      for (t1 = J.getInterceptor$ax(dst), srcCount = 0, dstCount = 0; dstCount < arraySize;) {
        srcCount0 = srcCount + 1;
        b = Z.uint8ToInt8(data.$index(0, srcCount));
        if (b >= 0 && b <= 127)
          for (t2 = b + 1, srcCount = srcCount0, i = 0; i < t2; ++i, dstCount = dstCount0, srcCount = srcCount0) {
            dstCount0 = dstCount + 1;
            srcCount0 = srcCount + 1;
            t1.$indexSet(dst, dstCount, data.$index(0, srcCount));
          }
        else {
          t2 = b <= -1 && b >= -127;
          srcCount = srcCount0 + 1;
          if (t2) {
            repeat = data.$index(0, srcCount0);
            for (t2 = -b + 1, i = 0; i < t2; ++i, dstCount = dstCount0) {
              dstCount0 = dstCount + 1;
              t1.$indexSet(dst, dstCount, repeat);
            }
          }
        }
      }
    },
    _readTag$2: function(type, defaultValue) {
      H._asInt(type);
      H._asIntQ(defaultValue);
      if (!H.boolConversionCheck(this.hasTag$1(type)))
        return defaultValue;
      return J.$index$asx(this.tags, type).readValue$0();
    },
    _readTag$1: function(type) {
      return this._readTag$2(type, 0);
    },
    _readTagList$1: function(type) {
      H._asInt(type);
      if (!H.boolConversionCheck(this.hasTag$1(type)))
        return null;
      return J.$index$asx(this.tags, type).readValues$0();
    },
    set$width: function(_, width) {
      this.width = H._asIntQ(width);
    },
    set$height: function(_, height) {
      this.height = H._asIntQ(height);
    },
    set$photometricType: function(photometricType) {
      this.photometricType = H._asIntQ(photometricType);
    },
    set$compression: function(compression) {
      this.compression = H._asInt(compression);
    },
    set$bitsPerSample: function(bitsPerSample) {
      this.bitsPerSample = H._asInt(bitsPerSample);
    },
    set$samplesPerPixel: function(samplesPerPixel) {
      this.samplesPerPixel = H._asInt(samplesPerPixel);
    },
    set$sampleFormat: function(sampleFormat) {
      this.sampleFormat = H._asInt(sampleFormat);
    },
    set$predictor: function(predictor) {
      this.predictor = H._asInt(predictor);
    },
    set$tileWidth: function(tileWidth) {
      this.tileWidth = H._asIntQ(tileWidth);
    },
    set$tileHeight: function(tileHeight) {
      this.tileHeight = H._asIntQ(tileHeight);
    },
    set$tileOffsets: function(tileOffsets) {
      this.tileOffsets = type$.nullable_List_int._as(tileOffsets);
    },
    set$tileByteCounts: function(tileByteCounts) {
      this.tileByteCounts = type$.nullable_List_int._as(tileByteCounts);
    },
    set$tileSize: function(tileSize) {
      H._asIntQ(tileSize);
    },
    set$fillOrder: function(fillOrder) {
      this.fillOrder = H._asIntQ(fillOrder);
    },
    set$t4Options: function(t4Options) {
      this.t4Options = H._asIntQ(t4Options);
    },
    set$t6Options: function(t6Options) {
      this.t6Options = H._asIntQ(t6Options);
    },
    set$extraSamples: function(extraSamples) {
      H._asIntQ(extraSamples);
    },
    set$colorMap: function(colorMap) {
      this.colorMap = type$.nullable_List_int._as(colorMap);
    }
  };
  A.TiffInfo.prototype = {
    set$signature: function(signature) {
      this.signature = H._asIntQ(signature);
    }
  };
  G.LzwDecoder.prototype = {
    decode$2: function(p, out) {
      var outLen, code, t1, t2, oldCode, t3, t4, i, t5, _this = this;
      type$.InputBuffer._as(p);
      type$.List_int._as(out);
      _this.set$_out(out);
      outLen = J.get$length$asx(out);
      _this.set$_outPointer(0);
      _this.set$_data(type$.Uint8List._as(p.buffer));
      _this.set$_dataLength(J.get$length$asx(_this.get$_data()));
      _this.set$_bytePointer(p.offset);
      if (H.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$_data(), 0), 0)) && H.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$_data(), 1), 1)))
        throw H.wrapException(K.ImageException$("Invalid LZW Data"));
      _this._initializeStringTable$0();
      _this._nextBits = _this._nextData = 0;
      code = _this._getNextCode$0();
      t1 = _this._tiff_lzw_decoder$_buffer;
      t2 = J.getInterceptor$asx(t1);
      oldCode = 0;
      while (true) {
        if (code !== 257) {
          t3 = _this.get$_outPointer();
          if (typeof t3 !== "number")
            return t3.$lt();
          t3 = t3 < outLen;
        } else
          t3 = false;
        if (!t3)
          break;
        if (code === 256) {
          _this._initializeStringTable$0();
          code = _this._getNextCode$0();
          _this.set$_bufferLength(0);
          if (code === 257)
            break;
          t3 = _this.get$_out();
          t4 = _this.get$_outPointer();
          if (typeof t4 !== "number")
            return t4.$add();
          _this.set$_outPointer(t4 + 1);
          J.$indexSet$ax(t3, t4, code);
          oldCode = code;
        } else {
          t3 = _this._tableIndex;
          t3.toString;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (code < t3) {
            _this._getString$1(code);
            t3 = _this.get$_bufferLength();
            if (typeof t3 !== "number")
              return t3.$sub();
            i = t3 - 1;
            for (; i >= 0; --i) {
              t3 = _this.get$_out();
              t4 = _this.get$_outPointer();
              if (typeof t4 !== "number")
                return t4.$add();
              _this.set$_outPointer(t4 + 1);
              J.$indexSet$ax(t3, t4, t2.$index(t1, i));
            }
            t3 = _this.get$_bufferLength();
            if (typeof t3 !== "number")
              return t3.$sub();
            _this._addString$2(oldCode, t2.$index(t1, t3 - 1));
          } else {
            _this._getString$1(oldCode);
            t3 = _this.get$_bufferLength();
            if (typeof t3 !== "number")
              return t3.$sub();
            i = t3 - 1;
            for (; i >= 0; --i) {
              t3 = _this.get$_out();
              t4 = _this.get$_outPointer();
              if (typeof t4 !== "number")
                return t4.$add();
              _this.set$_outPointer(t4 + 1);
              J.$indexSet$ax(t3, t4, t2.$index(t1, i));
            }
            t3 = _this.get$_out();
            t4 = _this.get$_outPointer();
            if (typeof t4 !== "number")
              return t4.$add();
            _this.set$_outPointer(t4 + 1);
            t5 = _this.get$_bufferLength();
            if (typeof t5 !== "number")
              return t5.$sub();
            J.$indexSet$ax(t3, t4, t2.$index(t1, t5 - 1));
            t5 = _this.get$_bufferLength();
            if (typeof t5 !== "number")
              return t5.$sub();
            _this._addString$2(oldCode, t2.$index(t1, t5 - 1));
          }
          oldCode = code;
        }
        code = _this._getNextCode$0();
      }
    },
    _addString$2: function(string, newString) {
      var t1, t2, _this = this;
      H._asInt(string);
      H._asInt(newString);
      t1 = _this.get$_table();
      t2 = _this._tableIndex;
      t2.toString;
      J.$indexSet$ax(t1, t2, newString);
      t2 = _this.get$_prefix();
      t1 = _this._tableIndex;
      t1.toString;
      J.$indexSet$ax(t2, t1, string);
      t1 = _this._tableIndex;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$_tableIndex(t1 + 1);
      if (H.boolConversionCheck(J.$eq$(_this._tableIndex, 511)))
        _this._bitsToGet = 10;
      else if (H.boolConversionCheck(J.$eq$(_this._tableIndex, 1023)))
        _this._bitsToGet = 11;
      else if (H.boolConversionCheck(J.$eq$(_this._tableIndex, 2047)))
        _this._bitsToGet = 12;
    },
    _getString$1: function(code) {
      var t1, t2, t3, c, _this = this;
      H._asInt(code);
      _this.set$_bufferLength(0);
      t1 = _this._tiff_lzw_decoder$_buffer;
      t2 = _this.get$_bufferLength();
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$_bufferLength(t2 + 1);
      t3 = J.getInterceptor$ax(t1);
      t3.$indexSet(t1, t2, J.$index$asx(_this.get$_table(), code));
      c = J.$index$asx(_this.get$_prefix(), code);
      for (; c !== 4098;) {
        t2 = _this.get$_bufferLength();
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bufferLength(t2 + 1);
        t3.$indexSet(t1, t2, J.$index$asx(_this.get$_table(), c));
        c = J.$index$asx(_this.get$_prefix(), c);
      }
    },
    _getNextCode$0: function() {
      var t3, _this = this,
        t1 = _this._bytePointer,
        t2 = _this.get$_dataLength();
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2)
        return 257;
      while (true) {
        t1 = _this._nextBits;
        t2 = _this._bitsToGet;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 < t2))
          break;
        t1 = _this._bytePointer;
        t2 = _this.get$_dataLength();
        if (typeof t1 !== "number")
          return t1.$ge();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 >= t2)
          return 257;
        t1 = _this._nextData;
        if (typeof t1 !== "number")
          return t1.$shl();
        t2 = _this.get$_data();
        t3 = _this._bytePointer;
        if (typeof t3 !== "number")
          return t3.$add();
        _this.set$_bytePointer(t3 + 1);
        t3 = J.$index$asx(t2, t3);
        if (typeof t3 !== "number")
          return H.iae(t3);
        _this._nextData = (t1 << 8 >>> 0) + t3 >>> 0;
        t3 = _this._nextBits;
        if (typeof t3 !== "number")
          return t3.$add();
        _this.set$_nextBits(t3 + 8);
      }
      _this.set$_nextBits(t1 - t2);
      t1 = _this._nextData;
      t2 = _this._nextBits;
      if (typeof t1 !== "number")
        return t1.$shr();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.JSNumber_methods.$shr(t1, t2);
      t1 = _this._bitsToGet;
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 = C.JSArray_methods.$index(C.List_511_1023_2047_4095, t1 - 9);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (t2 & t1) >>> 0;
    },
    _initializeStringTable$0: function() {
      var i, _this = this;
      _this.set$_table(H.NativeUint8List_NativeUint8List(4096));
      _this.set$_prefix(H.NativeUint32List_NativeUint32List(4096));
      J.fillRange$3$ax(_this.get$_prefix(), 0, J.get$length$asx(_this.get$_prefix()), 4098);
      for (i = 0; i < 256; ++i)
        J.$indexSet$ax(_this.get$_table(), i, i);
      _this._bitsToGet = 9;
      _this._tableIndex = 258;
    },
    get$_data: function() {
      var t1 = this.__LzwDecoder__data;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_data")) : t1;
    },
    set$_data: function(t1) {
      this.__LzwDecoder__data = type$.Uint8List._as(t1);
    },
    get$_dataLength: function() {
      var t1 = this.__LzwDecoder__dataLength;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_dataLength")) : t1;
    },
    set$_dataLength: function(t1) {
      this.__LzwDecoder__dataLength = H._asInt(t1);
    },
    get$_out: function() {
      var t1 = this.__LzwDecoder__out;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_out")) : t1;
    },
    set$_out: function(t1) {
      this.set$__LzwDecoder__out(type$.List_int._as(t1));
    },
    get$_outPointer: function() {
      var t1 = this.__LzwDecoder__outPointer;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_outPointer")) : t1;
    },
    set$_outPointer: function(t1) {
      this.__LzwDecoder__outPointer = H._asInt(t1);
    },
    get$_table: function() {
      var t1 = this.__LzwDecoder__table;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_table")) : t1;
    },
    set$_table: function(t1) {
      this.__LzwDecoder__table = type$.Uint8List._as(t1);
    },
    get$_prefix: function() {
      var t1 = this.__LzwDecoder__prefix;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_prefix")) : t1;
    },
    set$_prefix: function(t1) {
      this.__LzwDecoder__prefix = type$.Uint32List._as(t1);
    },
    get$_bufferLength: function() {
      var t1 = this.__LzwDecoder__bufferLength;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_bufferLength")) : t1;
    },
    set$_bufferLength: function(t1) {
      this.__LzwDecoder__bufferLength = H._asInt(t1);
    },
    set$_bytePointer: function(_bytePointer) {
      this._bytePointer = H._asInt(_bytePointer);
    },
    set$_nextBits: function(_nextBits) {
      this._nextBits = H._asInt(_nextBits);
    },
    set$__LzwDecoder__out: function(__LzwDecoder__out) {
      this.__LzwDecoder__out = type$.nullable_List_int._as(__LzwDecoder__out);
    },
    set$_tableIndex: function(_tableIndex) {
      this._tableIndex = H._asIntQ(_tableIndex);
    }
  };
  N.TiffDecoder.prototype = {
    isValidFile$1: function(data) {
      return this._tiff_decoder$_readHeader$1(Z.InputBuffer$(type$.List_int._as(data), false, null, 0)) != null;
    },
    decodeImage$1: function(bytes) {
      var t1, _this = this;
      _this.set$_tiff_decoder$_input(Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0));
      _this.set$info(_this._tiff_decoder$_readHeader$1(_this.get$_tiff_decoder$_input()));
      t1 = _this.info;
      if (t1 == null)
        return null;
      return J.$index$asx(t1.images, 0).decode$1(_this.get$_tiff_decoder$_input());
    },
    _tiff_decoder$_readHeader$1: function(p) {
      var p2, img, info, byteOrder, offset, t1, t2, exception, t3, _null = null;
      type$.InputBuffer._as(p);
      info = A.TiffInfo$();
      byteOrder = p.readUint16$0();
      if (byteOrder !== 18761 && byteOrder !== 19789)
        return _null;
      if (byteOrder === 19789)
        p.bigEndian = true;
      else
        p.bigEndian = false;
      info.set$signature(p.readUint16$0());
      if (!H.boolConversionCheck(J.$eq$(info.signature, 42)))
        return _null;
      offset = p.readUint32$0();
      p2 = Z.InputBuffer$from(p, _null, 0);
      p2.offset = offset;
      for (t1 = info.images, t2 = J.getInterceptor$asx(t1); offset !== 0;) {
        img = null;
        try {
          img = U.TiffImage$(p2);
          if (!H.boolConversionCheck(img.get$isValid()))
            break;
        } catch (exception) {
          H.unwrapException(exception);
          break;
        }
        t2.add$1(t1, img);
        if (H.boolConversionCheck(J.$eq$(t2.get$length(t1), 1))) {
          t3 = t2.$index(t1, 0).width;
          t3.toString;
          info.set$width(0, t3);
          t3 = t2.$index(t1, 0).height;
          t3.toString;
          info.set$height(0, t3);
        }
        offset = p2.readUint32$0();
        if (offset !== 0)
          p2.offset = offset;
      }
      return H.boolConversionCheck(t2.get$isNotEmpty(t1)) ? info : _null;
    },
    get$_tiff_decoder$_input: function() {
      var t1 = this.__TiffDecoder__input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_input")) : t1;
    },
    set$_tiff_decoder$_input: function(t1) {
      this.__TiffDecoder__input = type$.InputBuffer._as(t1);
    },
    set$info: function(info) {
      this.info = type$.nullable_TiffInfo._as(info);
    }
  };
  A.VP8.prototype = {
    get$webp: function() {
      return this._webp;
    },
    decodeHeader$0: function() {
      var _this = this,
        t1 = _this.input,
        bits = t1.readUint24$0();
      if ((bits & 1) !== 0)
        return false;
      if ((C.JSInt_methods._shrOtherPositive$1(bits, 1) & 7) > 3)
        return false;
      if ((C.JSInt_methods._shrOtherPositive$1(bits, 4) & 1) === 0)
        return false;
      _this._frameHeader.set$partitionLength(C.JSInt_methods._shrOtherPositive$1(bits, 5));
      if (t1.readUint24$0() !== 2752925)
        return false;
      J.set$width$z(_this.get$webp(), t1.readUint16$0());
      J.set$height$z(_this.get$webp(), t1.readUint16$0());
      return true;
    },
    decode$0: function() {
      var _this = this, _null = null;
      if (!H.boolConversionCheck(_this._getHeaders$0()))
        return _null;
      _this.output = U.Image$(_this.get$webp().width, _this.get$webp().height, C.Channels_1, _null, _null);
      if (!H.boolConversionCheck(_this._initFrame$0()))
        return _null;
      if (!H.boolConversionCheck(_this._parseFrame$0()))
        return _null;
      return _this.output;
    },
    _getHeaders$0: function() {
      var t1, t2, i, t3, _this = this;
      if (!H.boolConversionCheck(_this.decodeHeader$0()))
        return false;
      _this._proba = L.VP8Proba$();
      for (t1 = _this._dqm, t2 = J.getInterceptor$ax(t1), i = 0; i < 4; ++i)
        t2.$indexSet(t1, i, L.VP8QuantMatrix$());
      t1 = _this._picHeader;
      t2 = J.getInterceptor$z(t1);
      t2.set$width(t1, _this.get$webp().width);
      t2.set$height(t1, _this.get$webp().height);
      t2 = _this.get$webp().width;
      if (typeof t2 !== "number")
        return t2.$shr();
      C.JSNumber_methods._shrOtherPositive$1(t2, 8);
      t2 = _this.get$webp().height;
      if (typeof t2 !== "number")
        return t2.$shr();
      C.JSNumber_methods._shrOtherPositive$1(t2, 8);
      _this._cropTop = 0;
      _this.set$_cropLeft(0);
      _this.set$_cropRight(_this.get$webp().width);
      _this.set$_cropBottom(_this.get$webp().height);
      t2 = _this.get$webp().width;
      if (typeof t2 !== "number")
        return t2.$add();
      _this._mbWidth = C.JSNumber_methods._shrOtherPositive$1(t2 + 15, 4);
      t2 = _this.get$webp().height;
      if (typeof t2 !== "number")
        return t2.$add();
      _this._mbHeight = C.JSNumber_methods._shrOtherPositive$1(t2 + 15, 4);
      _this.set$_segment(0);
      t2 = _this.input;
      t3 = _this._frameHeader;
      _this.set$br(B.VP8BitReader$(t2.subset$1(t3.get$partitionLength())));
      J.skip$1$ax(t2, t3.get$partitionLength());
      t1.set$colorspace(_this.get$br().$get$0());
      t1.set$clampType(_this.get$br().$get$0());
      if (!H.boolConversionCheck(_this._parseSegmentHeader$2(_this._segmentHeader, _this._proba)))
        return false;
      if (!H.boolConversionCheck(_this._parseFilterHeader$0()))
        return false;
      if (!H.boolConversionCheck(_this._parsePartitions$1(t2)))
        return false;
      _this._parseQuant$0();
      _this.get$br().$get$0();
      _this._parseProba$0();
      return true;
    },
    _parseSegmentHeader$2: function(hdr, proba) {
      var t1, s, _this = this;
      type$.VP8SegmentHeader._as(hdr);
      type$.nullable_VP8Proba._as(proba);
      t1 = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0));
      hdr.useSegment = t1;
      if (t1) {
        hdr.updateMap = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0));
        if (!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0))) {
          hdr.absoluteDelta = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0));
          for (t1 = hdr.quantizer, s = 0; s < 4; ++s)
            J.$indexSet$ax(t1, s, !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(7) : 0);
          for (t1 = hdr.filterStrength, s = 0; s < 4; ++s)
            J.$indexSet$ax(t1, s, !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(6) : 0);
        }
        if (H.boolConversionCheck(hdr.updateMap))
          for (s = 0; s < 3; ++s) {
            t1 = proba.segments;
            J.$indexSet$ax(t1, s, !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getValue$1(8) : 255);
          }
      } else
        hdr.updateMap = false;
      return true;
    },
    _parseFilterHeader$0: function() {
      var t1, t2, i, _this = this,
        hdr = _this._filterHeader;
      hdr.set$simple(!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)));
      hdr.set$level(_this.get$br().getValue$1(6));
      hdr.set$sharpness(_this.get$br().getValue$1(3));
      hdr.set$useLfDelta(!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)));
      if (H.boolConversionCheck(hdr.get$useLfDelta()))
        if (!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0))) {
          for (t1 = hdr.refLfDelta, t2 = J.getInterceptor$ax(t1), i = 0; i < 4; ++i)
            if (!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)))
              t2.$indexSet(t1, i, _this.get$br().getSignedValue$1(6));
          for (t1 = hdr.modeLfDelta, t2 = J.getInterceptor$ax(t1), i = 0; i < 4; ++i)
            if (!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)))
              t2.$indexSet(t1, i, _this.get$br().getSignedValue$1(6));
        }
      if (H.boolConversionCheck(J.$eq$(hdr.level, 0)))
        t1 = 0;
      else
        t1 = H.boolConversionCheck(hdr.get$simple()) ? 1 : 2;
      _this._filterType = t1;
      return true;
    },
    _parsePartitions$1: function(input) {
      var bufEnd, t1, lastPart, partStart, t2, sz, p, szb, t3, t4, t5, partEnd, _this = this;
      type$.InputBuffer._as(input);
      bufEnd = input.get$length(input);
      t1 = _this.get$br().getValue$1(2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_numPartitions(C.JSInt_methods.$shl(1, t1));
      t1 = _this.get$_numPartitions();
      if (typeof t1 !== "number")
        return t1.$sub();
      lastPart = t1 - 1;
      partStart = lastPart * 3;
      if (bufEnd < partStart)
        return false;
      for (t1 = _this._partitions, t2 = J.getInterceptor$ax(t1), sz = 0, p = 0; p < lastPart; ++p, partStart = partEnd) {
        szb = input.peekBytes$2(3, sz);
        t3 = szb.$index(0, 0);
        t4 = szb.$index(0, 1);
        if (typeof t4 !== "number")
          return t4.$shl();
        if (typeof t3 !== "number")
          return t3.$or();
        t5 = szb.$index(0, 2);
        if (typeof t5 !== "number")
          return t5.$shl();
        partEnd = partStart + ((t3 | t4 << 8 | t5 << 16) >>> 0);
        if (partEnd > bufEnd)
          partEnd = bufEnd;
        t2.$indexSet(t1, p, B.VP8BitReader$(input.subset$2$position(partEnd - partStart, partStart)));
        sz += 3;
      }
      t3 = input.get$position();
      if (typeof t3 !== "number")
        return t3.$add();
      t2.$indexSet(t1, lastPart, B.VP8BitReader$(input.subset$2$position(bufEnd - partStart, t3 + partStart)));
      return partStart < bufEnd;
    },
    _parseQuant$0: function() {
      var t1, t2, t3, t4, i, q, t5, t6, t7, t8, _this = this,
        base_q0 = _this.get$br().getValue$1(7),
        dqy1_dc = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(4) : 0,
        dqy2_dc = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(4) : 0,
        dqy2_ac = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(4) : 0,
        dquv_dc = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(4) : 0,
        dquv_ac = !H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)) ? _this.get$br().getSignedValue$1(4) : 0,
        hdr = _this._segmentHeader;
      for (t1 = _this._dqm, t2 = J.getInterceptor$asx(t1), t3 = hdr.quantizer, t4 = J.getInterceptor$asx(t3), i = 0; i < 4; ++i) {
        if (H.boolConversionCheck(hdr.useSegment)) {
          q = t4.$index(t3, i);
          if (!H.boolConversionCheck(hdr.absoluteDelta))
            q += base_q0;
        } else {
          if (i > 0) {
            t2.$indexSet(t1, i, t2.$index(t1, 0));
            continue;
          }
          q = base_q0;
        }
        t5 = t2.$index(t1, i);
        t5.toString;
        t6 = t5.y1Mat;
        t7 = J.getInterceptor$ax(t6);
        t7.$indexSet(t6, 0, C.JSArray_methods.$index(C.List_8co1, A.VP8__clip(q + dqy1_dc, 127)));
        t7.$indexSet(t6, 1, C.JSArray_methods.$index(C.List_AiM, A.VP8__clip(q, 127)));
        t6 = t5.y2Mat;
        t7 = C.JSArray_methods.$index(C.List_8co1, A.VP8__clip(q + dqy2_dc, 127));
        if (typeof t7 !== "number")
          return t7.$mul();
        t8 = J.getInterceptor$ax(t6);
        t8.$indexSet(t6, 0, t7 * 2);
        t7 = C.JSArray_methods.$index(C.List_AiM, A.VP8__clip(q + dqy2_ac, 127));
        if (typeof t7 !== "number")
          return t7.$mul();
        t8.$indexSet(t6, 1, C.JSNumber_methods._shrOtherPositive$1(t7 * 101581, 16));
        t7 = t8.$index(t6, 1);
        if (typeof t7 !== "number")
          return t7.$lt();
        if (t7 < 8)
          t8.$indexSet(t6, 1, 8);
        t5 = t5.uvMat;
        t6 = J.getInterceptor$ax(t5);
        t6.$indexSet(t5, 0, C.JSArray_methods.$index(C.List_8co1, A.VP8__clip(q + dquv_dc, 117)));
        t6.$indexSet(t5, 1, C.JSArray_methods.$index(C.List_AiM, A.VP8__clip(q + dquv_ac, 127)));
      }
    },
    _parseProba$0: function() {
      var t, b, c, p, v, _this = this,
        proba = _this._proba;
      for (t = 0; t < 4; ++t)
        for (b = 0; b < 8; ++b)
          for (c = 0; c < 3; ++c)
            for (p = 0; p < 11; ++p) {
              v = !H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(J.$index$asx(J.$index$asx(J.$index$asx(C.List_MIe[t], b), c), p)), 0)) ? _this.get$br().getValue$1(8) : J.$index$asx(J.$index$asx(J.$index$asx(C.List_S8N[t], b), c), p);
              J.$indexSet$ax(J.$index$asx(J.$index$asx(J.$index$asx(proba.bands, t), b).probas, c), p, v);
            }
      _this.set$_useSkipProba(!H.boolConversionCheck(J.$eq$(_this.get$br().$get$0(), 0)));
      if (H.boolConversionCheck(_this.get$_useSkipProba()))
        _this.set$_skipP(_this.get$br().getValue$1(8));
    },
    _precomputeFilterStrengths$0: function() {
      var hdr, t2, t3, t4, t5, s, baseLevel, t6, i4x4, info, level, ilevel, _this = this,
        t1 = _this._filterType;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        hdr = _this._filterHeader;
        for (t1 = hdr.refLfDelta, t2 = J.getInterceptor$asx(t1), t3 = hdr.modeLfDelta, t4 = J.getInterceptor$asx(t3), t5 = _this._segmentHeader, s = 0; s < 4; ++s) {
          if (H.boolConversionCheck(t5.useSegment)) {
            baseLevel = J.$index$asx(t5.filterStrength, s);
            if (!H.boolConversionCheck(t5.absoluteDelta)) {
              t6 = hdr.level;
              t6.toString;
              if (typeof baseLevel !== "number")
                return baseLevel.$add();
              if (typeof t6 !== "number")
                return H.iae(t6);
              baseLevel += t6;
            }
          } else
            baseLevel = hdr.level;
          for (i4x4 = 0; i4x4 <= 1; ++i4x4) {
            info = J.$index$asx(J.$index$asx(_this.get$_fStrengths(), s), i4x4);
            if (H.boolConversionCheck(hdr.get$useLfDelta())) {
              baseLevel.toString;
              t6 = t2.$index(t1, 0);
              if (typeof t6 !== "number")
                return H.iae(t6);
              level = baseLevel + t6;
              if (i4x4 !== 0) {
                t6 = t4.$index(t3, 0);
                if (typeof t6 !== "number")
                  return H.iae(t6);
                level += t6;
              }
            } else
              level = baseLevel;
            level.toString;
            if (level < 0)
              level = 0;
            else if (level > 63)
              level = 63;
            if (level > 0) {
              t6 = hdr.get$sharpness();
              if (typeof t6 !== "number")
                return t6.$gt();
              if (t6 > 0) {
                t6 = hdr.get$sharpness();
                if (typeof t6 !== "number")
                  return t6.$gt();
                ilevel = t6 > 4 ? C.JSInt_methods._shrOtherPositive$1(level, 2) : C.JSInt_methods._shrOtherPositive$1(level, 1);
                t6 = hdr.get$sharpness();
                if (typeof t6 !== "number")
                  return H.iae(t6);
                if (ilevel > 9 - t6) {
                  t6 = hdr.get$sharpness();
                  if (typeof t6 !== "number")
                    return H.iae(t6);
                  ilevel = 9 - t6;
                }
              } else
                ilevel = level;
              if (ilevel < 1)
                ilevel = 1;
              info.fInnerLevel = ilevel;
              info.fLimit = 2 * level + ilevel;
              if (level >= 40)
                t6 = 2;
              else
                t6 = level >= 15 ? 1 : 0;
              info.hevThresh = t6;
            } else
              info.fLimit = 0;
            info.fInner = i4x4 !== 0;
          }
        }
      }
    },
    _initFrame$0: function() {
      var _list, i, _i, extra_rows, extra_y, t2, t3, extra_uv, uvWidth, extraPixels, _length, _this = this, _null = null,
        t1 = _this._webp;
      if (t1.get$alphaData() != null)
        _this.set$_alphaData(t1.get$alphaData());
      _list = J.JSArray_JSArray$allocateFixed(4, type$.List_VP8FInfo);
      for (t1 = type$.JSArray_VP8FInfo, i = 0; i < 4; ++i)
        C.JSArray_methods.$indexSet(_list, i, H.setRuntimeTypeInfo([L.VP8FInfo$(), L.VP8FInfo$()], t1));
      _this.set$_fStrengths(_list);
      t1 = _this._mbWidth;
      t1.toString;
      _list = J.JSArray_JSArray$allocateFixed(t1, type$.VP8TopSamples);
      for (_i = 0; _i < t1; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, L.VP8TopSamples$());
      _this.set$_yuvT(_list);
      _this.set$_yuvBlock(H.NativeUint8List_NativeUint8List(832));
      t1 = _this._mbWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_intraT(H.NativeUint8List_NativeUint8List(4 * t1));
      t1 = _this._mbWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_cacheYStride(16 * t1);
      t1 = _this._mbWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_cacheUVStride(8 * t1);
      t1 = _this._filterType;
      t1.toString;
      extra_rows = C.JSArray_methods.$index(C.List_0_2_8, t1);
      t1 = _this._cacheYStride;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      extra_y = extra_rows * t1;
      t2 = C.JSInt_methods._tdivFast$1(extra_rows, 2);
      t3 = _this._cacheUVStride;
      t3.toString;
      if (typeof t3 !== "number")
        return H.iae(t3);
      extra_uv = t2 * t3;
      _this.set$_cacheY(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(16 * t1 + extra_y), false, _null, extra_y));
      t1 = _this._cacheUVStride;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_cacheU(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(8 * t1 + extra_uv), false, _null, extra_uv));
      t1 = _this._cacheUVStride;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.set$_cacheV(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(8 * t1 + extra_uv), false, _null, extra_uv));
      _this.set$_tmpY(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(_this.get$webp().width), false, _null, 0));
      t1 = _this.get$webp().width;
      if (typeof t1 !== "number")
        return t1.$add();
      uvWidth = C.JSNumber_methods._shrOtherPositive$1(t1 + 1, 1);
      _this.set$_tmpU(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(uvWidth), false, _null, 0));
      _this.set$_tmpV(Z.InputBuffer$(H.NativeUint8List_NativeUint8List(uvWidth), false, _null, 0));
      t1 = _this._filterType;
      t1.toString;
      extraPixels = C.JSArray_methods.$index(C.List_0_2_8, t1);
      if (H.boolConversionCheck(J.$eq$(_this._filterType, 2))) {
        _this.set$_tlMbX(0);
        _this.set$_tlMbY(0);
      } else {
        t1 = _this.get$_cropLeft();
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_tlMbX(C.JSNumber_methods._tdivFast$1(t1 - extraPixels, 16));
        t1 = _this._cropTop;
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_tlMbY(C.JSNumber_methods._tdivFast$1(t1 - extraPixels, 16));
        t1 = _this.get$_tlMbX();
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 0)
          _this.set$_tlMbX(0);
        t1 = _this.get$_tlMbY();
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 0)
          _this.set$_tlMbY(0);
      }
      t1 = _this._cropBottom;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._brMbY = C.JSNumber_methods._tdivFast$1(t1 + 15 + extraPixels, 16);
      t1 = _this.get$_cropRight();
      if (typeof t1 !== "number")
        return t1.$add();
      _this._brMbX = C.JSNumber_methods._tdivFast$1(t1 + 15 + extraPixels, 16);
      t1 = _this._brMbX;
      t1.toString;
      t2 = _this._mbWidth;
      t2.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 > t2)
        _this.set$_brMbX(t2);
      t1 = _this._brMbY;
      t1.toString;
      t2 = _this._mbHeight;
      t2.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 > t2)
        _this.set$_brMbY(t2);
      t1 = _this._mbWidth;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      _length = t1 + 1;
      _list = J.JSArray_JSArray$allocateFixed(_length, type$.VP8MB);
      for (_i = 0; _i < _length; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, L.VP8MB$());
      _this.set$_mbInfo(_list);
      t1 = _this._mbWidth;
      t1.toString;
      _list = J.JSArray_JSArray$allocateFixed(t1, type$.VP8MBData);
      for (_i = 0; _i < t1; ++_i)
        C.JSArray_methods.$indexSet(_list, _i, L.VP8MBData$());
      _this.set$_mbData(_list);
      t1 = _this._mbWidth;
      t1.toString;
      _this.set$_fInfo(P.List_List$filled(t1, _null, false, type$.nullable_VP8FInfo));
      _this._precomputeFilterStrengths$0();
      _this.set$_dsp(V.VP8Filter$());
      return true;
    },
    _parseFrame$0: function() {
      var t1, t2, t3, t4, t5, t6, tokenBr, left, _this = this;
      _this._mbY = 0;
      t1 = _this._intraL;
      t2 = J.getInterceptor$asx(t1);
      t3 = _this._partitions;
      t4 = J.getInterceptor$asx(t3);
      while (true) {
        t5 = _this._mbY;
        t6 = _this._brMbY;
        t6.toString;
        if (typeof t5 !== "number")
          return t5.$lt();
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (!(t5 < t6))
          break;
        t6 = _this.get$_numPartitions();
        if (typeof t6 !== "number")
          return t6.$sub();
        tokenBr = t4.$index(t3, (t5 & t6 - 1) >>> 0);
        while (true) {
          t5 = _this._mbX;
          t6 = _this._mbWidth;
          t6.toString;
          if (typeof t5 !== "number")
            return t5.$lt();
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(t5 < t6))
            break;
          if (!H.boolConversionCheck(_this._decodeMB$1(tokenBr)))
            return false;
          t5 = _this._mbX;
          if (typeof t5 !== "number")
            return t5.$add();
          _this.set$_mbX(t5 + 1);
        }
        left = J.$index$asx(_this.get$_mbInfo(), 0);
        left.nzDc = left.nz = 0;
        t2.fillRange$3(t1, 0, t2.get$length(t1), 0);
        _this._mbX = 0;
        if (!H.boolConversionCheck(_this._processRow$0()))
          return false;
        t5 = _this._mbY;
        if (typeof t5 !== "number")
          return t5.$add();
        _this.set$_mbY(t5 + 1);
      }
      return true;
    },
    _processRow$0: function() {
      var t1, t2, useFilter, _this = this;
      _this._reconstructRow$0();
      t1 = _this._filterType;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _this._mbY;
        t2 = _this.get$_tlMbY();
        if (typeof t1 !== "number")
          return t1.$ge();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 >= t2) {
          t1 = _this._mbY;
          t2 = _this._brMbY;
          t2.toString;
          if (typeof t1 !== "number")
            return t1.$le();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = t1 <= t2;
          useFilter = t2;
        } else
          useFilter = false;
      } else
        useFilter = false;
      return _this._finishRow$1(useFilter);
    },
    _reconstructRow$0: function() {
      var t2, block, j, t3, top_yuv, coeffs, bits, topRight, topRight32, p, n, dst, bits_uv, c2, y_out, u_out, _this = this, _null = null,
        mb_y = _this._mbY,
        y_dst = Z.InputBuffer$(_this.get$_yuvBlock(), false, _null, 40),
        u_dst = Z.InputBuffer$(_this.get$_yuvBlock(), false, _null, 584),
        v_dst = Z.InputBuffer$(_this.get$_yuvBlock(), false, _null, 600),
        t1 = mb_y > 0,
        mb_x = 0;
      while (true) {
        t2 = _this._mbWidth;
        t2.toString;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(mb_x < t2))
          break;
        block = J.$index$asx(_this.get$_mbData(), mb_x);
        if (mb_x > 0) {
          for (j = -1; j < 16; ++j) {
            t2 = j * 32;
            y_dst.memcpy$4(t2 - 4, 4, y_dst, t2 + 12);
          }
          for (j = -1; j < 8; ++j) {
            t2 = j * 32;
            t3 = t2 - 4;
            t2 += 4;
            u_dst.memcpy$4(t3, 4, u_dst, t2);
            v_dst.memcpy$4(t3, 4, v_dst, t2);
          }
        } else {
          for (j = 0; j < 16; ++j)
            y_dst.$indexSet(0, j * 32 - 1, 129);
          for (j = 0; j < 8; ++j) {
            t2 = j * 32 - 1;
            u_dst.$indexSet(0, t2, 129);
            v_dst.$indexSet(0, t2, 129);
          }
          if (t1) {
            v_dst.$indexSet(0, -33, 129);
            u_dst.$indexSet(0, -33, 129);
            y_dst.$indexSet(0, -33, 129);
          }
        }
        top_yuv = J.$index$asx(_this.get$_yuvT(), mb_x);
        coeffs = block.coeffs;
        bits = block.nonZeroY;
        if (t1) {
          y_dst.memcpy$3(-32, 16, top_yuv.y);
          u_dst.memcpy$3(-32, 8, top_yuv.u);
          v_dst.memcpy$3(-32, 8, top_yuv.v);
        } else if (mb_x === 0) {
          y_dst.memset$3(-33, 21, 127);
          u_dst.memset$3(-33, 9, 127);
          v_dst.memset$3(-33, 9, 127);
        }
        if (H.boolConversionCheck(block.get$isIntra4x4())) {
          topRight = Z.InputBuffer$from(y_dst, _null, -16);
          topRight32 = topRight.toUint32List$0();
          if (t1) {
            t2 = _this._mbWidth;
            t2.toString;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (mb_x >= t2 - 1)
              topRight.memset$3(0, 4, J.$index$asx(top_yuv.y, 15));
            else
              topRight.memcpy$3(0, 4, J.$index$asx(_this.get$_yuvT(), mb_x + 1).y);
          }
          t2 = topRight32.length;
          if (0 >= t2)
            return H.ioore(topRight32, 0);
          p = topRight32[0];
          if (96 >= t2)
            return H.ioore(topRight32, 96);
          topRight32[96] = p;
          topRight32[64] = p;
          topRight32[32] = p;
          for (t2 = block.imodes, t3 = J.getInterceptor$asx(t2), n = 0; n < 16; ++n, bits = bits << 2 >>> 0) {
            dst = Z.InputBuffer$from(y_dst, _null, C.List_cGl0[n]);
            C.JSArray_methods.$index(C.List_sty, t3.$index(t2, n)).call$1(dst);
            bits.toString;
            _this._doTransform$3(bits, Z.InputBuffer$(coeffs, false, _null, n * 16), dst);
          }
        } else {
          t2 = A.VP8__checkMode(mb_x, mb_y, J.$index$asx(block.imodes, 0));
          t2.toString;
          if (t2 >>> 0 !== t2 || t2 >= 7)
            return H.ioore(C.List_8aB, t2);
          C.List_8aB[t2].call$1(y_dst);
          if (bits !== 0)
            for (n = 0; n < 16; ++n, bits = bits << 2 >>> 0) {
              dst = Z.InputBuffer$from(y_dst, _null, C.List_cGl0[n]);
              bits.toString;
              _this._doTransform$3(bits, Z.InputBuffer$(coeffs, false, _null, n * 16), dst);
            }
        }
        bits_uv = block.get$nonZeroUV();
        t2 = A.VP8__checkMode(mb_x, mb_y, block.uvmode);
        t2.toString;
        if (t2 >>> 0 !== t2 || t2 >= 7)
          return H.ioore(C.List_0W6, t2);
        C.List_0W6[t2].call$1(u_dst);
        C.List_0W6[t2].call$1(v_dst);
        _this._doUVTransform$3(bits_uv, Z.InputBuffer$(coeffs, false, _null, 256), u_dst);
        c2 = Z.InputBuffer$(coeffs, false, _null, 320);
        _this._doUVTransform$3(C.JSInt_methods._shrOtherPositive$1(bits_uv, 8), c2, v_dst);
        t2 = _this._mbHeight;
        t2.toString;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (mb_y < t2 - 1) {
          J.setRange$4$ax(top_yuv.y, 0, 16, y_dst.toUint8List$0(), 480);
          J.setRange$4$ax(top_yuv.u, 0, 8, u_dst.toUint8List$0(), 224);
          J.setRange$4$ax(top_yuv.v, 0, 8, v_dst.toUint8List$0(), 224);
        }
        y_out = mb_x * 16;
        u_out = mb_x * 8;
        for (j = 0; j < 16; ++j) {
          t2 = _this._cacheYStride;
          t2.toString;
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this.get$_cacheY().memcpy$4(y_out + j * t2, 16, y_dst, j * 32);
        }
        for (j = 0; j < 8; ++j) {
          t2 = _this._cacheUVStride;
          t2.toString;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = j * 32;
          _this.get$_cacheU().memcpy$4(u_out + j * t2, 8, u_dst, t3);
          t2 = _this._cacheUVStride;
          t2.toString;
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this.get$_cacheV().memcpy$4(u_out + j * t2, 8, v_dst, t3);
        }
        ++mb_x;
      }
    },
    _doTransform$3: function(bits, src, dst) {
      var t1;
      H._asInt(bits);
      t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      switch (C.JSInt_methods._shrOtherPositive$1(bits, 30)) {
        case 3:
          this.get$_dsp().transform$3(src, dst, false);
          break;
        case 2:
          this.get$_dsp().transformAC3$2(src, dst);
          break;
        case 1:
          this.get$_dsp().transformDC$2(src, dst);
          break;
        default:
          break;
      }
    },
    _doUVTransform$3: function(bits, src, dst) {
      var t1;
      H._asInt(bits);
      t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      if ((bits & 255) !== 0)
        if ((bits & 170) !== 0)
          this.get$_dsp().transformUV$2(src, dst);
        else
          this.get$_dsp().transformDCUV$2(src, dst);
    },
    MACROBLOCK_VPOS$1: function(mb_y) {
      return H._asInt(mb_y) * 16;
    },
    _doFilter$2: function(mbX, mbY) {
      var yBps, t1, yDst, ilevel, limit, t2, uvBps, uDst, vDst, hevThresh, t3, _this = this;
      H._asInt(mbX);
      H._asInt(mbY);
      yBps = _this._cacheYStride;
      t1 = J.$index$asx(_this.get$_fInfo(), mbX);
      t1.toString;
      yDst = Z.InputBuffer$from(_this.get$_cacheY(), null, mbX * 16);
      ilevel = t1.fInnerLevel;
      limit = t1.fLimit;
      if (limit === 0)
        return;
      if (H.boolConversionCheck(J.$eq$(_this._filterType, 1))) {
        if (mbX > 0) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t2.simpleHFilter16$3(yDst, yBps, limit + 4);
        }
        if (H.boolConversionCheck(t1.fInner)) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t2.simpleHFilter16i$3(yDst, yBps, limit);
        }
        if (mbY > 0) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t2.simpleVFilter16$3(yDst, yBps, limit + 4);
        }
        if (H.boolConversionCheck(t1.fInner)) {
          t1 = _this.get$_dsp();
          yBps.toString;
          t1.simpleVFilter16i$3(yDst, yBps, limit);
        }
      } else {
        uvBps = _this._cacheUVStride;
        t2 = mbX * 8;
        uDst = Z.InputBuffer$from(_this.get$_cacheU(), null, t2);
        vDst = Z.InputBuffer$from(_this.get$_cacheV(), null, t2);
        hevThresh = t1.hevThresh;
        if (mbX > 0) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t3 = limit + 4;
          t2.hFilter16$5(yDst, yBps, t3, ilevel, hevThresh);
          t2 = _this.get$_dsp();
          uvBps.toString;
          t2.hFilter8$6(uDst, vDst, uvBps, t3, ilevel, hevThresh);
        }
        if (H.boolConversionCheck(t1.fInner)) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t2.hFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t2 = _this.get$_dsp();
          uvBps.toString;
          ilevel.toString;
          t2.hFilter8i$6(uDst, vDst, uvBps, limit, ilevel, hevThresh);
        }
        if (mbY > 0) {
          t2 = _this.get$_dsp();
          yBps.toString;
          t3 = limit + 4;
          t2.vFilter16$5(yDst, yBps, t3, ilevel, hevThresh);
          t2 = _this.get$_dsp();
          uvBps.toString;
          t2.vFilter8$6(uDst, vDst, uvBps, t3, ilevel, hevThresh);
        }
        if (H.boolConversionCheck(t1.fInner)) {
          t1 = _this.get$_dsp();
          yBps.toString;
          t1.vFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t1 = _this.get$_dsp();
          uvBps.toString;
          ilevel.toString;
          t1.vFilter8i$6(uDst, vDst, uvBps, limit, ilevel, hevThresh);
        }
      }
    },
    _filterRow$0: function() {
      var t1, _this = this,
        mbX = _this.get$_tlMbX();
      while (true) {
        t1 = _this._brMbX;
        t1.toString;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(mbX < t1))
          break;
        _this._doFilter$2(mbX, _this._mbY);
        ++mbX;
      }
    },
    _finishRow$1: function(useFilter) {
      var t1, extraYRows, ySize, t2, uvSize, yDst, uDst, vDst, mbY, t3, yStart, yEnd, t4, deltaY, t5, t6, t7, t8, _this = this, _null = null;
      H._asBool(useFilter);
      t1 = _this._filterType;
      t1.toString;
      extraYRows = C.JSArray_methods.$index(C.List_0_2_8, t1);
      t1 = _this._cacheYStride;
      t1.toString;
      if (typeof t1 !== "number")
        return H.iae(t1);
      ySize = extraYRows * t1;
      t1 = C.JSInt_methods._tdivFast$1(extraYRows, 2);
      t2 = _this._cacheUVStride;
      t2.toString;
      if (typeof t2 !== "number")
        return H.iae(t2);
      uvSize = t1 * t2;
      t2 = -ySize;
      yDst = Z.InputBuffer$from(_this.get$_cacheY(), _null, t2);
      t1 = -uvSize;
      uDst = Z.InputBuffer$from(_this.get$_cacheU(), _null, t1);
      vDst = Z.InputBuffer$from(_this.get$_cacheV(), _null, t1);
      mbY = _this._mbY;
      t3 = _this._brMbY;
      t3.toString;
      if (typeof t3 !== "number")
        return t3.$sub();
      yStart = _this.MACROBLOCK_VPOS$1(mbY);
      yEnd = _this.MACROBLOCK_VPOS$1(mbY + 1);
      if (useFilter)
        _this._filterRow$0();
      if (mbY !== 0) {
        if (typeof yStart !== "number")
          return yStart.$sub();
        yStart -= extraYRows;
        _this.set$_y(Z.InputBuffer$from(yDst, _null, 0));
        _this.set$_u(Z.InputBuffer$from(uDst, _null, 0));
        _this.set$_v(Z.InputBuffer$from(vDst, _null, 0));
      } else {
        _this.set$_y(Z.InputBuffer$from(_this.get$_cacheY(), _null, 0));
        _this.set$_u(Z.InputBuffer$from(_this.get$_cacheU(), _null, 0));
        _this.set$_v(Z.InputBuffer$from(_this.get$_cacheV(), _null, 0));
      }
      t3 = !(mbY >= t3 - 1);
      if (t3) {
        if (typeof yEnd !== "number")
          return yEnd.$sub();
        yEnd -= extraYRows;
      }
      t4 = _this._cropBottom;
      t4.toString;
      if (typeof yEnd !== "number")
        return yEnd.$gt();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (yEnd > t4)
        yEnd = t4;
      _this._a = null;
      if (_this._alphaData != null) {
        if (typeof yStart !== "number")
          return yStart.$lt();
        t4 = yStart < yEnd;
      } else
        t4 = false;
      if (t4) {
        if (typeof yStart !== "number")
          return H.iae(yStart);
        _this.set$_a(_this._decompressAlphaRows$2(yStart, yEnd - yStart));
        if (_this._a == null)
          return false;
      }
      t4 = _this._cropTop;
      t4.toString;
      if (typeof yStart !== "number")
        return yStart.$lt();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (yStart < t4) {
        deltaY = t4 - yStart;
        t5 = _this.get$_y();
        t6 = t5.offset;
        t7 = _this._cacheYStride;
        t7.toString;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t6 !== "number")
          return t6.$add();
        J.set$offset$z(t5, t6 + t7 * deltaY);
        t7 = _this.get$_u();
        t6 = t7.offset;
        t5 = _this._cacheUVStride;
        t5.toString;
        t8 = C.JSInt_methods._shrOtherPositive$1(deltaY, 1);
        if (typeof t5 !== "number")
          return t5.$mul();
        if (typeof t6 !== "number")
          return t6.$add();
        J.set$offset$z(t7, t6 + t5 * t8);
        t5 = _this.get$_v();
        t6 = t5.offset;
        t7 = _this._cacheUVStride;
        t7.toString;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t6 !== "number")
          return t6.$add();
        J.set$offset$z(t5, t6 + t7 * t8);
        t5 = _this._a;
        if (t5 != null) {
          t6 = t5.offset;
          t7 = _this.get$webp().width;
          if (typeof t7 !== "number")
            return t7.$mul();
          if (typeof t6 !== "number")
            return t6.$add();
          J.set$offset$z(t5, t6 + t7 * deltaY);
        }
        yStart = t4;
      }
      if (yStart < yEnd) {
        t4 = _this.get$_y();
        t5 = t4.offset;
        t6 = _this.get$_cropLeft();
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        J.set$offset$z(t4, t5 + t6);
        t6 = _this.get$_u();
        t5 = t6.offset;
        t4 = _this.get$_cropLeft();
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 1);
        if (typeof t5 !== "number")
          return t5.$add();
        J.set$offset$z(t6, t5 + t4);
        t4 = _this.get$_v();
        t5 = t4.offset;
        t6 = _this.get$_cropLeft();
        if (typeof t6 !== "number")
          return t6.$shr();
        t6 = C.JSNumber_methods._shrOtherPositive$1(t6, 1);
        if (typeof t5 !== "number")
          return t5.$add();
        J.set$offset$z(t4, t5 + t6);
        t4 = _this._a;
        if (t4 != null) {
          t5 = t4.offset;
          t6 = _this.get$_cropLeft();
          if (typeof t5 !== "number")
            return t5.$add();
          if (typeof t6 !== "number")
            return H.iae(t6);
          J.set$offset$z(t4, t5 + t6);
        }
        t4 = _this._cropTop;
        t4.toString;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = _this.get$_cropRight();
        t6 = _this.get$_cropLeft();
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        _this._put$3(yStart - t4, t5 - t6, yEnd - yStart);
      }
      if (t3) {
        t3 = _this.get$_cacheY();
        t4 = _this._cacheYStride;
        t4.toString;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3.memcpy$4(t2, ySize, yDst, 16 * t4);
        t4 = _this.get$_cacheU();
        t2 = _this._cacheUVStride;
        t2.toString;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t4.memcpy$4(t1, uvSize, uDst, 8 * t2);
        t2 = _this.get$_cacheV();
        t4 = _this._cacheUVStride;
        t4.toString;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.memcpy$4(t1, uvSize, vDst, 8 * t4);
      }
      return true;
    },
    _put$3: function(mbY, mbW, mbH) {
      H._asInt(mbY);
      H._asInt(mbW);
      H._asInt(mbH);
      if (mbW <= 0 || mbH <= 0)
        return false;
      this._emitFancyRGB$3(mbY, mbW, mbH);
      this._emitAlphaRGB$3(mbY, mbW, mbH);
      return true;
    },
    _clip8$1: function(v) {
      var d;
      H._asInt(v);
      if ((v & -4194304) >>> 0 === 0)
        d = C.JSInt_methods._shrOtherPositive$1(v, 14);
      else
        d = v < 0 ? 0 : 255;
      return d;
    },
    _yuvToR$2: function(y, v) {
      return this._clip8$1(19077 * H._asInt(y) + 26149 * H._asInt(v) + -3644112);
    },
    _yuvToG$3: function(y, u, v) {
      return this._clip8$1(19077 * H._asInt(y) - 6419 * H._asInt(u) - 13320 * H._asInt(v) + 2229552);
    },
    _yuvToB$2: function(y, u) {
      return this._clip8$1(19077 * H._asInt(y) + 33050 * H._asInt(u) + -4527440);
    },
    _yuvToRgb$4: function(y, u, v, rgb) {
      H._asInt(y);
      H._asInt(u);
      H._asInt(v);
      type$.InputBuffer._as(rgb);
      rgb.$indexSet(0, 0, this._yuvToR$2(y, v));
      rgb.$indexSet(0, 1, this._yuvToG$3(y, u, v));
      rgb.$indexSet(0, 2, this._yuvToB$2(y, u));
    },
    _yuvToRgba$4: function(y, u, v, rgba) {
      H._asInt(y);
      H._asInt(u);
      H._asInt(v);
      type$.InputBuffer._as(rgba);
      this._yuvToRgb$4(y, u, v, rgba);
      rgba.$indexSet(0, 3, 255);
    },
    _upsample$9: function(topY, bottomY, topU, topV, curU, curV, topDst, bottomDst, len) {
      var t2, LOAD_UV, lastPixelPair, tl_uv, l_uv, uv0, t3, x, t_uv, uv, avg, diag_12, diag_03, uv1, t4, t5, t6, _this = this, _null = null,
        t1 = type$.InputBuffer;
      t1._as(topY);
      t2 = type$.nullable_InputBuffer;
      t2._as(bottomY);
      t1._as(topU);
      t1._as(topV);
      t1._as(curU);
      t1._as(curV);
      t1._as(topDst);
      t2._as(bottomDst);
      H._asInt(len);
      LOAD_UV = new A.VP8__upsample_LOAD_UV();
      t2 = len - 1;
      lastPixelPair = C.JSInt_methods._shrOtherPositive$1(t2, 1);
      tl_uv = LOAD_UV.call$2(topU.$index(0, 0), topV.$index(0, 0));
      l_uv = LOAD_UV.call$2(curU.$index(0, 0), curV.$index(0, 0));
      uv0 = C.JSInt_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
      _this._yuvToRgba$4(topY.$index(0, 0), uv0 & 255, uv0 >>> 16, topDst);
      t1 = bottomY != null;
      if (t1) {
        uv0 = C.JSInt_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
        t3 = bottomY.$index(0, 0);
        bottomDst.toString;
        _this._yuvToRgba$4(t3, uv0 & 255, uv0 >>> 16, bottomDst);
      }
      for (x = 1; x <= lastPixelPair; ++x, l_uv = uv, tl_uv = t_uv) {
        t_uv = LOAD_UV.call$2(topU.$index(0, x), topV.$index(0, x));
        uv = LOAD_UV.call$2(curU.$index(0, x), curV.$index(0, x));
        avg = tl_uv + t_uv + l_uv + uv + 524296;
        diag_12 = C.JSInt_methods._shrOtherPositive$1(avg + 2 * (t_uv + l_uv), 3);
        diag_03 = C.JSInt_methods._shrOtherPositive$1(avg + 2 * (tl_uv + uv), 3);
        uv0 = C.JSInt_methods._shrOtherPositive$1(diag_12 + tl_uv, 1);
        uv1 = C.JSInt_methods._shrOtherPositive$1(diag_03 + t_uv, 1);
        t3 = 2 * x;
        t4 = t3 - 1;
        t5 = t4 * 4;
        _this._yuvToRgba$4(topY.$index(0, t4), uv0 & 255, uv0 >>> 16, Z.InputBuffer$from(topDst, _null, t5));
        t6 = t3 - 0;
        _this._yuvToRgba$4(topY.$index(0, t6), uv1 & 255, uv1 >>> 16, Z.InputBuffer$from(topDst, _null, t6 * 4));
        if (t1) {
          uv0 = C.JSInt_methods._shrOtherPositive$1(diag_03 + l_uv, 1);
          uv1 = C.JSInt_methods._shrOtherPositive$1(diag_12 + uv, 1);
          t4 = bottomY.$index(0, t4);
          bottomDst.toString;
          _this._yuvToRgba$4(t4, uv0 & 255, uv0 >>> 16, Z.InputBuffer$from(bottomDst, _null, t5));
          _this._yuvToRgba$4(bottomY.$index(0, t3), uv1 & 255, uv1 >>> 16, Z.InputBuffer$from(bottomDst, _null, t3 * 4));
        }
      }
      if ((len & 1) === 0) {
        uv0 = C.JSInt_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
        t3 = t2 * 4;
        _this._yuvToRgba$4(topY.$index(0, t2), uv0 & 255, uv0 >>> 16, Z.InputBuffer$from(topDst, _null, t3));
        if (t1) {
          uv0 = C.JSInt_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
          t1 = bottomY.$index(0, t2);
          bottomDst.toString;
          _this._yuvToRgba$4(t1, uv0 & 255, uv0 >>> 16, Z.InputBuffer$from(bottomDst, _null, t3));
        }
      }
    },
    _emitAlphaRGB$3: function(mbY, mbW, mbH) {
      var t1, stride, alpha, numRows, startY, t2, dst, y, x, _this = this;
      H._asInt(mbY);
      H._asInt(mbW);
      H._asInt(mbH);
      if (_this._a == null)
        return;
      t1 = _this.get$webp().width;
      if (typeof t1 !== "number")
        return t1.$mul();
      stride = t1 * 4;
      t1 = _this._a;
      t1.toString;
      alpha = Z.InputBuffer$from(t1, null, 0);
      if (mbY === 0) {
        numRows = mbH - 1;
        startY = mbY;
      } else {
        startY = mbY - 1;
        t1 = alpha.offset;
        t2 = _this.get$webp().width;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        alpha.set$offset(0, t1 - t2);
        numRows = mbH;
      }
      dst = Z.InputBuffer$(_this.output.getBytes$0(), false, null, startY * stride + 3);
      t1 = _this._cropTop;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = _this._cropBottom;
      if (t1 + mbY + mbH === t2) {
        t2.toString;
        if (typeof t2 !== "number")
          return t2.$sub();
        numRows = t2 - t1 - startY;
      }
      for (y = 0; y < numRows; ++y) {
        for (x = 0; x < mbW; ++x)
          dst.$indexSet(0, 4 * x, alpha.$index(0, x) & 255);
        t1 = alpha.offset;
        t2 = _this.get$webp().width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        alpha.set$offset(0, t1 + t2);
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        dst.set$offset(0, t2 + stride);
      }
    },
    _emitFancyRGB$3: function(mbY, mbW, mbH) {
      var t1, t2, dst, curY, curU, curV, yEnd, uvW, stride, topU, topV, numLinesOut, y, t3, t4, _this = this, _null = null;
      H._asInt(mbY);
      H._asInt(mbW);
      H._asInt(mbH);
      t1 = _this.output.getBytes$0();
      t2 = _this.get$webp().width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      dst = Z.InputBuffer$(t1, false, _null, mbY * t2 * 4);
      curY = Z.InputBuffer$from(_this.get$_y(), _null, 0);
      curU = Z.InputBuffer$from(_this.get$_u(), _null, 0);
      curV = Z.InputBuffer$from(_this.get$_v(), _null, 0);
      yEnd = mbY + mbH;
      uvW = C.JSInt_methods._shrOtherPositive$1(mbW + 1, 1);
      t2 = _this.get$webp().width;
      if (typeof t2 !== "number")
        return t2.$mul();
      stride = t2 * 4;
      topU = Z.InputBuffer$from(_this.get$_tmpU(), _null, 0);
      topV = Z.InputBuffer$from(_this.get$_tmpV(), _null, 0);
      if (mbY === 0) {
        _this._upsample$9(curY, _null, curU, curV, curU, curV, dst, _null, mbW);
        numLinesOut = mbH;
      } else {
        _this._upsample$9(_this.get$_tmpY(), curY, topU, topV, curU, curV, Z.InputBuffer$from(dst, _null, -stride), dst, mbW);
        numLinesOut = mbH + 1;
      }
      topU.set$buffer(0, curU.buffer);
      topV.set$buffer(0, curV.buffer);
      for (t1 = 2 * stride, t2 = -stride, y = mbY; y += 2, y < yEnd;) {
        topU.set$offset(0, curU.offset);
        topV.set$offset(0, curV.offset);
        t3 = curU.offset;
        t4 = _this._cacheUVStride;
        t4.toString;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        curU.set$offset(0, t3 + t4);
        t4 = curV.offset;
        t3 = _this._cacheUVStride;
        t3.toString;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        curV.set$offset(0, t4 + t3);
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        dst.set$offset(0, t3 + t1);
        t3 = curY.offset;
        t4 = _this._cacheYStride;
        t4.toString;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$add();
        curY.set$offset(0, t3 + 2 * t4);
        t4 = _this._cacheYStride;
        t4.toString;
        _this._upsample$9(Z.InputBuffer$from(curY, _null, J.$negate$in(t4)), curY, topU, topV, curU, curV, Z.InputBuffer$from(dst, _null, t2), dst, mbW);
      }
      t1 = curY.offset;
      t2 = _this._cacheYStride;
      t2.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      curY.set$offset(0, t1 + t2);
      t1 = _this._cropTop;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = _this._cropBottom;
      t2.toString;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 + yEnd < t2) {
        _this.get$_tmpY().memcpy$3(0, mbW, curY);
        _this.get$_tmpU().memcpy$3(0, uvW, curU);
        _this.get$_tmpV().memcpy$3(0, uvW, curV);
        --numLinesOut;
      } else if ((yEnd & 1) === 0)
        _this._upsample$9(curY, _null, curU, curV, curU, curV, Z.InputBuffer$from(dst, _null, stride), _null, mbW);
      return numLinesOut;
    },
    _decompressAlphaRows$2: function(row, numRows) {
      var width, height, t1, _this = this;
      H._asInt(row);
      H._asInt(numRows);
      width = _this.get$webp().width;
      height = _this.get$webp().height;
      if (row < 0 || numRows <= 0 || row + numRows > height)
        return null;
      if (row === 0) {
        _this.set$_alphaPlane(H.NativeUint8List_NativeUint8List(width * height));
        t1 = _this._alphaData;
        t1.toString;
        _this.set$_alpha(S.WebPAlpha$(t1, width, height));
      }
      if (!H.boolConversionCheck(_this.get$_alpha().isAlphaDecoded))
        if (!H.boolConversionCheck(_this.get$_alpha().decode$3(row, numRows, _this.get$_alphaPlane())))
          return null;
      return Z.InputBuffer$(_this.get$_alphaPlane(), false, null, row * width);
    },
    _decodeMB$1: function(tokenBr) {
      var left, t1, t2, mb, block, skip, t3, _this = this;
      type$.nullable_VP8BitReader._as(tokenBr);
      left = J.$index$asx(_this.get$_mbInfo(), 0);
      t1 = _this.get$_mbInfo();
      t2 = _this._mbX;
      if (typeof t2 !== "number")
        return H.iae(t2);
      mb = J.$index$asx(t1, 1 + t2);
      block = J.$index$asx(_this.get$_mbData(), _this._mbX);
      if (H.boolConversionCheck(_this._segmentHeader.updateMap)) {
        if (H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(J.$index$asx(_this._proba.segments, 0)), 0)))
          t1 = _this.get$br().getBit$1(J.$index$asx(_this._proba.segments, 1));
        else {
          t1 = _this.get$br().getBit$1(J.$index$asx(_this._proba.segments, 2));
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = 2 + t1;
        }
        _this.set$_segment(t1);
      }
      skip = H.boolConversionCheck(_this.get$_useSkipProba()) && !H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(_this.get$_skipP()), 0));
      _this._parseIntraMode$0();
      if (!skip)
        skip = _this._parseResiduals$2(mb, tokenBr);
      else {
        left.nz = mb.nz = 0;
        if (!H.boolConversionCheck(block.get$isIntra4x4()))
          left.nzDc = mb.nzDc = 0;
        block.nonZeroY = 0;
        block.set$nonZeroUV(0);
      }
      t1 = _this._filterType;
      t1.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _this.get$_fInfo();
        t2 = _this._mbX;
        t3 = J.$index$asx(_this.get$_fStrengths(), _this.get$_segment());
        J.$indexSet$ax(t1, t2, J.$index$asx(t3, H.boolConversionCheck(block.get$isIntra4x4()) ? 1 : 0));
        t1 = J.$index$asx(_this.get$_fInfo(), _this._mbX);
        t1.toString;
        t1.fInner = H.boolConversionCheck(t1.fInner) || !skip;
      }
      return true;
    },
    _parseResiduals$2: function(mb, tokenBr) {
      var bands, q, block, dst, leftMb, t1, dc, t2, t3, nz, dc0, i, acProba, first, tnz, lnz, nonZeroY, y, l, nzCoeffs, x, outLeftNz, outTopNz, nonZeroUV, ch, _this = this;
      type$.VP8MB._as(mb);
      type$.nullable_VP8BitReader._as(tokenBr);
      bands = _this._proba.bands;
      q = J.$index$asx(_this._dqm, _this.get$_segment());
      block = J.$index$asx(_this.get$_mbData(), _this._mbX);
      dst = Z.InputBuffer$(block.coeffs, false, null, 0);
      leftMb = J.$index$asx(_this.get$_mbInfo(), 0);
      dst.memset$3(0, dst.get$length(dst), 0);
      t1 = J.getInterceptor$asx(bands);
      if (!H.boolConversionCheck(block.get$isIntra4x4())) {
        dc = Z.InputBuffer$(H.NativeInt16List_NativeInt16List(16), false, null, 0);
        t2 = mb.nzDc;
        t3 = leftMb.nzDc;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        nz = _this._getCoeffs$6(tokenBr, t1.$index(bands, 1), t2 + t3, q.y2Mat, 0, dc);
        mb.nzDc = leftMb.nzDc = nz > 0 ? 1 : 0;
        if (nz > 1)
          _this._transformWHT$2(dc, dst);
        else {
          t2 = dc.$index(0, 0);
          if (typeof t2 !== "number")
            return t2.$add();
          dc0 = C.JSNumber_methods._shrOtherPositive$1(t2 + 3, 3);
          for (i = 0; i < 256; i += 16)
            dst.$indexSet(0, i, dc0);
        }
        acProba = t1.$index(bands, 0);
        first = 1;
      } else {
        acProba = t1.$index(bands, 3);
        first = 0;
      }
      t2 = mb.nz;
      if (typeof t2 !== "number")
        return t2.$and();
      tnz = t2 & 15;
      t2 = leftMb.nz;
      if (typeof t2 !== "number")
        return t2.$and();
      lnz = t2 & 15;
      for (nonZeroY = 0, y = 0; y < 4; ++y) {
        l = lnz & 1;
        for (nzCoeffs = 0, x = 0; x < 4; ++x) {
          nz = _this._getCoeffs$6(tokenBr, acProba, l + (tnz & 1), q.y1Mat, first, dst);
          l = nz > first ? 1 : 0;
          tnz = tnz >>> 1 | l << 7;
          nzCoeffs = _this._nzCodeBits$3(nzCoeffs, nz, !H.boolConversionCheck(J.$eq$(dst.$index(0, 0), 0)) ? 1 : 0);
          t2 = dst.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          dst.set$offset(0, t2 + 16);
        }
        tnz = tnz >>> 4;
        lnz = lnz >>> 1 | l << 7;
        nonZeroY = (nonZeroY << 8 | nzCoeffs) >>> 0;
      }
      outLeftNz = lnz >>> 4;
      for (outTopNz = tnz, nonZeroUV = 0, ch = 0; ch < 4; ch += 2) {
        t2 = mb.nz;
        t3 = 4 + ch;
        if (typeof t2 !== "number")
          return t2.$shr();
        tnz = C.JSNumber_methods._shrOtherPositive$1(t2, t3);
        t2 = leftMb.nz;
        if (typeof t2 !== "number")
          return t2.$shr();
        lnz = C.JSNumber_methods._shrOtherPositive$1(t2, t3);
        for (nzCoeffs = 0, y = 0; y < 2; ++y) {
          l = lnz & 1;
          for (x = 0; x < 2; ++x) {
            nz = _this._getCoeffs$6(tokenBr, t1.$index(bands, 2), l + (tnz & 1), q.uvMat, 0, dst);
            l = nz > 0 ? 1 : 0;
            tnz = tnz >>> 1 | l << 3;
            nzCoeffs = _this._nzCodeBits$3(nzCoeffs, nz, !H.boolConversionCheck(J.$eq$(dst.$index(0, 0), 0)) ? 1 : 0);
            t2 = dst.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            dst.set$offset(0, t2 + 16);
          }
          tnz = tnz >>> 2;
          lnz = lnz >>> 1 | l << 5;
        }
        nonZeroUV = (nonZeroUV | C.JSInt_methods._shlPositive$1(nzCoeffs, 4 * ch)) >>> 0;
        outTopNz = (outTopNz | C.JSInt_methods._shlPositive$1(tnz << 4 >>> 0, ch)) >>> 0;
        outLeftNz = (outLeftNz | C.JSInt_methods._shlPositive$1(lnz & 240, ch)) >>> 0;
      }
      mb.nz = outTopNz;
      leftMb.nz = outLeftNz;
      block.nonZeroY = nonZeroY;
      block.set$nonZeroUV(nonZeroUV);
      if ((nonZeroUV & 43690) === 0)
        q.toString;
      return (nonZeroY | nonZeroUV) >>> 0 === 0;
    },
    _transformWHT$2: function(src, out) {
      var tmp, i, t2, t3, t4, a0, t5, t6, a1, a2, a3, oi, dc,
        t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(out);
      tmp = H.NativeInt32List_NativeInt32List(16);
      for (t1 = tmp.length, i = 0; i < 4; ++i) {
        t2 = src.$index(0, i);
        t3 = 12 + i;
        t4 = src.$index(0, t3);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        a0 = t2 + t4;
        t4 = 4 + i;
        t2 = src.$index(0, t4);
        t5 = 8 + i;
        t6 = src.$index(0, t5);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        a1 = t2 + t6;
        t6 = src.$index(0, t4);
        t2 = src.$index(0, t5);
        if (typeof t6 !== "number")
          return t6.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        a2 = t6 - t2;
        t2 = src.$index(0, i);
        t6 = src.$index(0, t3);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        a3 = t2 - t6;
        if (i >= t1)
          return H.ioore(tmp, i);
        tmp[i] = a0 + a1;
        if (t5 >= t1)
          return H.ioore(tmp, t5);
        tmp[t5] = a0 - a1;
        tmp[t4] = a3 + a2;
        if (t3 >= t1)
          return H.ioore(tmp, t3);
        tmp[t3] = a3 - a2;
      }
      for (oi = 0, i = 0; i < 4; ++i) {
        t2 = i * 4;
        if (t2 >= t1)
          return H.ioore(tmp, t2);
        t3 = tmp[t2];
        if (typeof t3 !== "number")
          return t3.$add();
        dc = t3 + 3;
        t3 = 3 + t2;
        if (t3 >= t1)
          return H.ioore(tmp, t3);
        t3 = tmp[t3];
        if (typeof t3 !== "number")
          return H.iae(t3);
        a0 = dc + t3;
        t4 = 1 + t2;
        if (t4 >= t1)
          return H.ioore(tmp, t4);
        t4 = tmp[t4];
        t2 = 2 + t2;
        if (t2 >= t1)
          return H.ioore(tmp, t2);
        t2 = tmp[t2];
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        a1 = t4 + t2;
        a2 = t4 - t2;
        a3 = dc - t3;
        out.$indexSet(0, oi, C.JSInt_methods._shrOtherPositive$1(a0 + a1, 3));
        out.$indexSet(0, oi + 16, C.JSInt_methods._shrOtherPositive$1(a3 + a2, 3));
        out.$indexSet(0, oi + 32, C.JSInt_methods._shrOtherPositive$1(a0 - a1, 3));
        out.$indexSet(0, oi + 48, C.JSInt_methods._shrOtherPositive$1(a3 - a2, 3));
        oi += 64;
      }
    },
    _nzCodeBits$3: function(nz_coeffs, nz, dc_nz) {
      var t1;
      H._asInt(nz_coeffs);
      H._asInt(nz);
      H._asInt(dc_nz);
      if (nz > 3)
        t1 = 3;
      else
        t1 = nz > 1 ? 2 : dc_nz;
      return (nz_coeffs << 2 | t1) >>> 0;
    },
    _getLargeValue$2: function(br, p) {
      var t1, v, t2, bit1, cat, tab, len, i;
      type$.VP8BitReader._as(br);
      type$.List_int._as(p);
      t1 = J.getInterceptor$asx(p);
      if (H.boolConversionCheck(J.$eq$(br.getBit$1(t1.$index(p, 3)), 0)))
        if (H.boolConversionCheck(J.$eq$(br.getBit$1(t1.$index(p, 4)), 0)))
          v = 2;
        else {
          t1 = br.getBit$1(t1.$index(p, 5));
          if (typeof t1 !== "number")
            return H.iae(t1);
          v = 3 + t1;
        }
      else if (H.boolConversionCheck(J.$eq$(br.getBit$1(t1.$index(p, 6)), 0)))
        if (H.boolConversionCheck(J.$eq$(br.getBit$1(t1.$index(p, 7)), 0))) {
          t1 = br.getBit$1(159);
          if (typeof t1 !== "number")
            return H.iae(t1);
          v = 5 + t1;
        } else {
          t1 = br.getBit$1(165);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = br.getBit$1(145);
          if (typeof t2 !== "number")
            return H.iae(t2);
          v = 7 + 2 * t1 + t2;
        }
      else {
        bit1 = br.getBit$1(t1.$index(p, 8));
        cat = 2 * bit1 + br.getBit$1(t1.$index(p, 9 + bit1));
        if (cat < 0 || cat >= 4)
          return H.ioore(C.List_sao, cat);
        tab = C.List_sao[cat];
        for (t1 = J.getInterceptor$asx(tab), len = t1.get$length(tab), v = 0, i = 0; i < len; ++i) {
          t2 = br.getBit$1(t1.$index(tab, i));
          if (typeof t2 !== "number")
            return H.iae(t2);
          v += v + t2;
        }
        v += 3 + C.JSInt_methods.$shl(8, cat);
      }
      return v;
    },
    _getCoeffs$6: function(br, prob, ctx, dq, n, out) {
      var t1, p, t2, t3, n0, p_ctx, t4, v, t5;
      type$.nullable_VP8BitReader._as(br);
      type$.List_VP8BandProbas._as(prob);
      H._asInt(ctx);
      type$.List_int._as(dq);
      H._asInt(n);
      type$.InputBuffer._as(out);
      t1 = J.getInterceptor$asx(prob);
      p = J.$index$asx(t1.$index(prob, n).probas, ctx);
      for (t2 = J.getInterceptor$asx(dq); n < 16; n = n0) {
        br.toString;
        if (H.boolConversionCheck(J.$eq$(br.getBit$1(J.$index$asx(p, 0)), 0)))
          return n;
        for (; t3 = J.getInterceptor$asx(p), H.boolConversionCheck(J.$eq$(br.getBit$1(t3.$index(p, 1)), 0));) {
          ++n;
          if (n < 0 || n >= 17)
            return H.ioore(C.List_F1L3, n);
          p = J.$index$asx(t1.$index(prob, C.List_F1L3[n]).probas, 0);
          if (n === 16)
            return 16;
        }
        n0 = n + 1;
        if (n0 < 0 || n0 >= 17)
          return H.ioore(C.List_F1L3, n0);
        p_ctx = t1.$index(prob, C.List_F1L3[n0]).probas;
        t4 = J.getInterceptor$asx(p_ctx);
        if (H.boolConversionCheck(J.$eq$(br.getBit$1(t3.$index(p, 2)), 0))) {
          p = t4.$index(p_ctx, 1);
          v = 1;
        } else {
          v = this._getLargeValue$2(br, p);
          p = t4.$index(p_ctx, 2);
        }
        if (n < 0 || n >= 16)
          return H.ioore(C.List_cGl1, n);
        t3 = C.List_cGl1[n];
        t4 = br.getSigned$1(v);
        t5 = t2.$index(dq, n > 0 ? 1 : 0);
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        out.$indexSet(0, t3, t4 * t5);
      }
      return 16;
    },
    _parseIntraMode$0: function() {
      var ti, $top, left, block, ymode, modes, mi, y, x, t2, prob, t3, b, i, t4, mi0, _this = this,
        t1 = _this._mbX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      ti = 4 * t1;
      $top = _this._intraT;
      left = _this._intraL;
      block = J.$index$asx(_this.get$_mbData(), _this._mbX);
      block.set$isIntra4x4(J.$eq$(_this.get$br().getBit$1(145), 0));
      if (!H.boolConversionCheck(block.get$isIntra4x4())) {
        if (!H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(156), 0)))
          ymode = !H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(128), 0)) ? 1 : 3;
        else
          ymode = !H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(163), 0)) ? 2 : 0;
        J.$indexSet$ax(block.imodes, 0, ymode);
        $top.toString;
        C.NativeUint8List_methods.fillRange$3($top, ti, ti + 4, ymode);
        C.NativeUint8List_methods.fillRange$3(left, 0, 4, ymode);
      } else {
        modes = block.imodes;
        for (t1 = left.length, mi = 0, y = 0; y < 4; ++y, mi = mi0) {
          if (y >= t1)
            return H.ioore(left, y);
          ymode = left[y];
          for (x = 0; x < 4; ++x) {
            t2 = ti + x;
            if (t2 < 0 || t2 >= $top.length)
              return H.ioore($top, t2);
            prob = J.$index$asx(C.JSArray_methods.$index(C.List_799, $top[t2]), ymode);
            t3 = J.getInterceptor$asx(prob);
            b = _this.get$br().getBit$1(t3.$index(prob, 0));
            if (b >>> 0 !== b || b >= 18)
              return H.ioore(C.List_Y3m, b);
            i = C.List_Y3m[b];
            for (; i > 0;) {
              t4 = _this.get$br().getBit$1(t3.$index(prob, i));
              if (typeof t4 !== "number")
                return H.iae(t4);
              i = C.JSArray_methods.$index(C.List_Y3m, 2 * i + t4);
            }
            ymode = -i;
            $top[t2] = ymode;
          }
          mi0 = mi + 4;
          $top.toString;
          C.NativeUint8List_methods.setRange$4(modes, mi, mi0, $top, ti);
          left[y] = ymode;
        }
      }
      if (H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(142), 0)))
        t1 = 0;
      else if (H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(114), 0)))
        t1 = 2;
      else
        t1 = !H.boolConversionCheck(J.$eq$(_this.get$br().getBit$1(183), 0)) ? 1 : 3;
      block.uvmode = t1;
    },
    get$br: function() {
      var t1 = this.__VP8_br;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("br")) : t1;
    },
    set$br: function(t1) {
      this.__VP8_br = type$.VP8BitReader._as(t1);
    },
    get$_dsp: function() {
      var t1 = this.__VP8__dsp;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_dsp")) : t1;
    },
    set$_dsp: function(t1) {
      this.__VP8__dsp = type$.VP8Filter._as(t1);
    },
    get$_cropLeft: function() {
      var t1 = this.__VP8__cropLeft;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_cropLeft")) : t1;
    },
    set$_cropLeft: function(t1) {
      this.__VP8__cropLeft = H._asInt(t1);
    },
    get$_cropRight: function() {
      var t1 = this.__VP8__cropRight;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_cropRight")) : t1;
    },
    set$_cropRight: function(t1) {
      this.__VP8__cropRight = H._asInt(t1);
    },
    get$_tlMbX: function() {
      var t1 = this.__VP8__tlMbX;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_tlMbX")) : t1;
    },
    set$_tlMbX: function(t1) {
      this.__VP8__tlMbX = H._asInt(t1);
    },
    get$_tlMbY: function() {
      var t1 = this.__VP8__tlMbY;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_tlMbY")) : t1;
    },
    set$_tlMbY: function(t1) {
      this.__VP8__tlMbY = H._asInt(t1);
    },
    get$_numPartitions: function() {
      var t1 = this.__VP8__numPartitions;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_numPartitions")) : t1;
    },
    set$_numPartitions: function(t1) {
      this.__VP8__numPartitions = H._asInt(t1);
    },
    get$_useSkipProba: function() {
      var t1 = this.__VP8__useSkipProba;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_useSkipProba")) : t1;
    },
    set$_useSkipProba: function(t1) {
      this.__VP8__useSkipProba = H._asBool(t1);
    },
    get$_skipP: function() {
      var t1 = this.__VP8__skipP;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_skipP")) : t1;
    },
    set$_skipP: function(t1) {
      this.__VP8__skipP = H._asInt(t1);
    },
    get$_segment: function() {
      var t1 = this.__VP8__segment;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_segment")) : t1;
    },
    set$_segment: function(t1) {
      this.__VP8__segment = H._asInt(t1);
    },
    get$_yuvT: function() {
      var t1 = this.__VP8__yuvT;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_yuvT")) : t1;
    },
    set$_yuvT: function(t1) {
      this.set$__VP8__yuvT(type$.List_VP8TopSamples._as(t1));
    },
    set$_mbInfo: function(t1) {
      this.set$__VP8__mbInfo(type$.List_VP8MB._as(t1));
    },
    get$_mbInfo: function() {
      var t1 = this.__VP8__mbInfo;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_mbInfo")) : t1;
    },
    get$_fInfo: function() {
      var t1 = this.__VP8__fInfo;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_fInfo")) : t1;
    },
    set$_fInfo: function(t1) {
      this.set$__VP8__fInfo(type$.List_nullable_VP8FInfo._as(t1));
    },
    get$_yuvBlock: function() {
      var t1 = this.__VP8__yuvBlock;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_yuvBlock")) : t1;
    },
    set$_yuvBlock: function(t1) {
      this.__VP8__yuvBlock = type$.Uint8List._as(t1);
    },
    get$_cacheY: function() {
      var t1 = this.__VP8__cacheY;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_cacheY")) : t1;
    },
    set$_cacheY: function(t1) {
      this.__VP8__cacheY = type$.InputBuffer._as(t1);
    },
    get$_cacheU: function() {
      var t1 = this.__VP8__cacheU;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_cacheU")) : t1;
    },
    set$_cacheU: function(t1) {
      this.__VP8__cacheU = type$.InputBuffer._as(t1);
    },
    get$_cacheV: function() {
      var t1 = this.__VP8__cacheV;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_cacheV")) : t1;
    },
    set$_cacheV: function(t1) {
      this.__VP8__cacheV = type$.InputBuffer._as(t1);
    },
    get$_tmpY: function() {
      var t1 = this.__VP8__tmpY;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_tmpY")) : t1;
    },
    set$_tmpY: function(t1) {
      this.__VP8__tmpY = type$.InputBuffer._as(t1);
    },
    get$_tmpU: function() {
      var t1 = this.__VP8__tmpU;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_tmpU")) : t1;
    },
    set$_tmpU: function(t1) {
      this.__VP8__tmpU = type$.InputBuffer._as(t1);
    },
    get$_tmpV: function() {
      var t1 = this.__VP8__tmpV;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_tmpV")) : t1;
    },
    set$_tmpV: function(t1) {
      this.__VP8__tmpV = type$.InputBuffer._as(t1);
    },
    get$_y: function() {
      var t1 = this.__VP8__y;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_y")) : t1;
    },
    set$_y: function(t1) {
      this.__VP8__y = type$.InputBuffer._as(t1);
    },
    get$_u: function() {
      var t1 = this.__VP8__u;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_u")) : t1;
    },
    set$_u: function(t1) {
      this.__VP8__u = type$.InputBuffer._as(t1);
    },
    get$_v: function() {
      var t1 = this.__VP8__v;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_v")) : t1;
    },
    set$_v: function(t1) {
      this.__VP8__v = type$.InputBuffer._as(t1);
    },
    get$_mbData: function() {
      var t1 = this.__VP8__mbData;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_mbData")) : t1;
    },
    set$_mbData: function(t1) {
      this.set$__VP8__mbData(type$.List_VP8MBData._as(t1));
    },
    get$_fStrengths: function() {
      var t1 = this.__VP8__fStrengths;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_fStrengths")) : t1;
    },
    set$_fStrengths: function(t1) {
      this.set$__VP8__fStrengths(type$.List_List_VP8FInfo._as(t1));
    },
    get$_alpha: function() {
      var t1 = this.__VP8__alpha;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_alpha")) : t1;
    },
    set$_alpha: function(t1) {
      this.__VP8__alpha = type$.WebPAlpha._as(t1);
    },
    get$_alphaPlane: function() {
      var t1 = this.__VP8__alphaPlane;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_alphaPlane")) : t1;
    },
    set$_alphaPlane: function(t1) {
      this.__VP8__alphaPlane = type$.Uint8List._as(t1);
    },
    set$_cropBottom: function(_cropBottom) {
      this._cropBottom = H._asIntQ(_cropBottom);
    },
    set$_brMbX: function(_brMbX) {
      this._brMbX = H._asIntQ(_brMbX);
    },
    set$_brMbY: function(_brMbY) {
      this._brMbY = H._asIntQ(_brMbY);
    },
    set$_intraT: function(_intraT) {
      this._intraT = type$.nullable_Uint8List._as(_intraT);
    },
    set$__VP8__yuvT: function(__VP8__yuvT) {
      this.__VP8__yuvT = type$.nullable_List_VP8TopSamples._as(__VP8__yuvT);
    },
    set$__VP8__mbInfo: function(__VP8__mbInfo) {
      this.__VP8__mbInfo = type$.nullable_List_VP8MB._as(__VP8__mbInfo);
    },
    set$__VP8__fInfo: function(__VP8__fInfo) {
      this.__VP8__fInfo = type$.nullable_List_nullable_VP8FInfo._as(__VP8__fInfo);
    },
    set$_cacheYStride: function(_cacheYStride) {
      this._cacheYStride = H._asIntQ(_cacheYStride);
    },
    set$_cacheUVStride: function(_cacheUVStride) {
      this._cacheUVStride = H._asIntQ(_cacheUVStride);
    },
    set$_a: function(_a) {
      this._a = type$.nullable_InputBuffer._as(_a);
    },
    set$_mbX: function(_mbX) {
      this._mbX = H._asInt(_mbX);
    },
    set$_mbY: function(_mbY) {
      this._mbY = H._asInt(_mbY);
    },
    set$__VP8__mbData: function(__VP8__mbData) {
      this.__VP8__mbData = type$.nullable_List_VP8MBData._as(__VP8__mbData);
    },
    set$__VP8__fStrengths: function(__VP8__fStrengths) {
      this.__VP8__fStrengths = type$.nullable_List_List_VP8FInfo._as(__VP8__fStrengths);
    },
    set$_alphaData: function(_alphaData) {
      this._alphaData = type$.nullable_InputBuffer._as(_alphaData);
    }
  };
  A.VP8__upsample_LOAD_UV.prototype = {
    call$2: function(u, v) {
      return (H._asInt(u) | H._asInt(v) << 16) >>> 0;
    },
    $signature: 27
  };
  B.VP8BitReader.prototype = {
    get$_range: function() {
      var t1 = this.__VP8BitReader__range;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_range")) : t1;
    },
    set$_range: function(t1) {
      this.__VP8BitReader__range = H._asInt(t1);
    },
    get$_vp8_bit_reader$_value: function() {
      var t1 = this.__VP8BitReader__value;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_value")) : t1;
    },
    set$_vp8_bit_reader$_value: function(t1) {
      this.__VP8BitReader__value = H._asInt(t1);
    },
    get$_bits: function() {
      var t1 = this.__VP8BitReader__bits;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_bits")) : t1;
    },
    set$_bits: function(t1) {
      this.__VP8BitReader__bits = H._asInt(t1);
    },
    VP8BitReader$1: function(input) {
      this.set$_range(254);
      this.set$_vp8_bit_reader$_value(0);
      this.set$_bits(-8);
    },
    getValue$1: function(bits) {
      var v, bits0, t1;
      H._asInt(bits);
      for (v = 0; bits0 = bits - 1, bits > 0; bits = bits0) {
        t1 = this.getBit$1(128);
        if (typeof t1 !== "number")
          return t1.$shl();
        v = (v | C.JSNumber_methods.$shl(t1, bits0)) >>> 0;
      }
      return v;
    },
    getSigned$1: function(v) {
      var t1, bit;
      H._asInt(v);
      t1 = this.get$_range();
      if (typeof t1 !== "number")
        return t1.$shr();
      bit = this._bitUpdate$1(C.JSNumber_methods._shrOtherPositive$1(t1, 1));
      this._shift$0();
      return bit !== 0 ? -v : v;
    },
    getSignedValue$1: function(bits) {
      var value = this.getValue$1(H._asInt(bits));
      return H.boolConversionCheck(J.$eq$(this.$get$0(), 1)) ? -value : value;
    },
    $get$0: function() {
      return this.getValue$1(1);
    },
    getBit$1: function(prob) {
      var t1, bit, _this = this;
      H._asInt(prob);
      t1 = _this.get$_range();
      if (typeof t1 !== "number")
        return t1.$mul();
      bit = _this._bitUpdate$1(C.JSNumber_methods._shrOtherPositive$1(t1 * prob, 8));
      t1 = _this.get$_range();
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 126)
        _this._shift$0();
      return bit;
    },
    _bitUpdate$1: function(split) {
      var t1, pos, t2, _this = this;
      H._asInt(split);
      t1 = _this.get$_bits();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        _this._loadNewBytes$0();
      pos = _this.get$_bits();
      t1 = _this.get$_vp8_bit_reader$_value();
      if (typeof t1 !== "number")
        return t1.$shr();
      if (C.JSNumber_methods.$shr(t1, pos) > split) {
        t1 = _this.get$_range();
        t2 = split + 1;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_range(t1 - t2);
        t1 = _this.get$_vp8_bit_reader$_value();
        t2 = C.JSInt_methods.$shl(t2, pos);
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$_vp8_bit_reader$_value(t1 - t2);
        return 1;
      } else {
        _this.set$_range(split);
        return 0;
      }
    },
    _shift$0: function() {
      var t1, _this = this,
        shift = C.JSArray_methods.$index(C.List_8co0, _this.get$_range());
      _this.set$_range(C.JSArray_methods.$index(C.List_wmc, _this.get$_range()));
      t1 = _this.get$_bits();
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$_bits(t1 - shift);
    },
    _loadNewBytes$0: function() {
      var bits, _this = this,
        t1 = _this.input,
        t2 = J.get$length$asx(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= 1) {
        bits = t1.readByte$0();
        t1 = _this.get$_vp8_bit_reader$_value();
        if (typeof t1 !== "number")
          return t1.$shl();
        _this.set$_vp8_bit_reader$_value((bits | t1 << 8) >>> 0);
        t1 = _this.get$_bits();
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_bits(t1 + 8);
      } else
        _this._loadFinalBytes$0();
    },
    _loadFinalBytes$0: function() {
      var t2, _this = this,
        t1 = _this.input;
      if (!H.boolConversionCheck(t1.get$isEOS())) {
        t1 = t1.readByte$0();
        t2 = _this.get$_vp8_bit_reader$_value();
        if (typeof t2 !== "number")
          return t2.$shl();
        if (typeof t1 !== "number")
          return t1.$or();
        _this.set$_vp8_bit_reader$_value((t1 | t2 << 8) >>> 0);
        t2 = _this.get$_bits();
        if (typeof t2 !== "number")
          return t2.$add();
        _this.set$_bits(t2 + 8);
      } else if (!H.boolConversionCheck(_this._eof)) {
        t1 = _this.get$_vp8_bit_reader$_value();
        if (typeof t1 !== "number")
          return t1.$shl();
        _this.set$_vp8_bit_reader$_value(t1 << 8 >>> 0);
        t1 = _this.get$_bits();
        if (typeof t1 !== "number")
          return t1.$add();
        _this.set$_bits(t1 + 8);
        _this._eof = true;
      }
    }
  };
  V.VP8Filter.prototype = {
    VP8Filter$0: function() {
      V.VP8Filter__initTables();
    },
    simpleVFilter16$3: function(p, stride, thresh) {
      var p2, i, t1;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        t1 = p.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + i);
        if (H.boolConversionCheck(this._needsFilter$3(p2, stride, thresh)))
          this._doFilter2$2(p2, stride);
      }
    },
    simpleHFilter16$3: function(p, stride, thresh) {
      var p2, i, t1;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        t1 = p.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + i * stride);
        if (H.boolConversionCheck(this._needsFilter$3(p2, 1, thresh)))
          this._doFilter2$2(p2, 1);
      }
    },
    simpleVFilter16i$3: function(p, stride, thresh) {
      var p2, t1, k, t2;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (t1 = 4 * stride, k = 3; k > 0; --k) {
        t2 = p2.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        p2.set$offset(0, t2 + t1);
        this.simpleVFilter16$3(p2, stride, thresh);
      }
    },
    simpleHFilter16i$3: function(p, stride, thresh) {
      var p2, k, t1;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + 4);
        this.simpleHFilter16$3(p2, stride, thresh);
      }
    },
    vFilter16$5: function(p, stride, thresh, ithresh, hev_thresh) {
      this._filterLoop26$7(type$.InputBuffer._as(p), H._asInt(stride), 1, 16, H._asInt(thresh), H._asIntQ(ithresh), H._asInt(hev_thresh));
    },
    hFilter16$5: function(p, stride, thresh, ithresh, hev_thresh) {
      this._filterLoop26$7(type$.InputBuffer._as(p), 1, H._asInt(stride), 16, H._asInt(thresh), H._asIntQ(ithresh), H._asInt(hev_thresh));
    },
    vFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var p2, t1, k, t2;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      H._asIntQ(ithresh);
      H._asInt(hev_thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (t1 = 4 * stride, k = 3; k > 0; --k) {
        t2 = p2.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        p2.set$offset(0, t2 + t1);
        ithresh.toString;
        this._filterLoop24$7(p2, stride, 1, 16, thresh, ithresh, hev_thresh);
      }
    },
    hFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var p2, k, t1;
      type$.InputBuffer._as(p);
      H._asInt(stride);
      H._asInt(thresh);
      H._asIntQ(ithresh);
      H._asInt(hev_thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + 4);
        ithresh.toString;
        this._filterLoop24$7(p2, 1, stride, 16, thresh, ithresh, hev_thresh);
      }
    },
    vFilter8$6: function(u, v, stride, thresh, ithresh, hev_thresh) {
      var t1 = type$.InputBuffer;
      t1._as(u);
      t1._as(v);
      H._asInt(stride);
      H._asInt(thresh);
      H._asIntQ(ithresh);
      H._asInt(hev_thresh);
      this._filterLoop26$7(u, stride, 1, 8, thresh, ithresh, hev_thresh);
      this._filterLoop26$7(v, stride, 1, 8, thresh, ithresh, hev_thresh);
    },
    hFilter8$6: function(u, v, stride, thresh, ithresh, hev_thresh) {
      var t1 = type$.InputBuffer;
      t1._as(u);
      t1._as(v);
      H._asInt(stride);
      H._asInt(thresh);
      H._asIntQ(ithresh);
      H._asInt(hev_thresh);
      this._filterLoop26$7(u, 1, stride, 8, thresh, ithresh, hev_thresh);
      this._filterLoop26$7(v, 1, stride, 8, thresh, ithresh, hev_thresh);
    },
    vFilter8i$6: function(u, v, stride, thresh, ithresh, hev_thresh) {
      var u2, v2,
        t1 = type$.InputBuffer;
      t1._as(u);
      t1._as(v);
      H._asInt(stride);
      H._asInt(thresh);
      H._asInt(ithresh);
      H._asInt(hev_thresh);
      t1 = 4 * stride;
      u2 = Z.InputBuffer$from(u, null, t1);
      v2 = Z.InputBuffer$from(v, null, t1);
      this._filterLoop24$7(u2, stride, 1, 8, thresh, ithresh, hev_thresh);
      this._filterLoop24$7(v2, stride, 1, 8, thresh, ithresh, hev_thresh);
    },
    hFilter8i$6: function(u, v, stride, thresh, ithresh, hev_thresh) {
      var u2, v2,
        t1 = type$.InputBuffer;
      t1._as(u);
      t1._as(v);
      H._asInt(stride);
      H._asInt(thresh);
      H._asInt(ithresh);
      H._asInt(hev_thresh);
      u2 = Z.InputBuffer$from(u, null, 4);
      v2 = Z.InputBuffer$from(v, null, 4);
      this._filterLoop24$7(u2, 1, stride, 8, thresh, ithresh, hev_thresh);
      this._filterLoop24$7(v2, 1, stride, 8, thresh, ithresh, hev_thresh);
    },
    _filterLoop26$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var p2, size0, t1, _this = this;
      type$.InputBuffer._as(p);
      H._asInt(hstride);
      H._asInt(vstride);
      H._asInt(size);
      H._asInt(thresh);
      H._asIntQ(ithresh);
      H._asInt(hev_thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (H.boolConversionCheck(_this._needsFilter2$4(p2, hstride, thresh, ithresh)))
          if (H.boolConversionCheck(_this._hev$3(p2, hstride, hev_thresh)))
            _this._doFilter2$2(p2, hstride);
          else
            _this._doFilter6$2(p2, hstride);
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + vstride);
      }
    },
    _filterLoop24$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var p2, size0, t1, _this = this;
      type$.InputBuffer._as(p);
      H._asInt(hstride);
      H._asInt(vstride);
      H._asInt(size);
      H._asInt(thresh);
      H._asInt(ithresh);
      H._asInt(hev_thresh);
      p2 = Z.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (H.boolConversionCheck(_this._needsFilter2$4(p2, hstride, thresh, ithresh)))
          if (H.boolConversionCheck(_this._hev$3(p2, hstride, hev_thresh)))
            _this._doFilter2$2(p2, hstride);
          else
            _this._doFilter4$2(p2, hstride);
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.set$offset(0, t1 + vstride);
      }
    },
    _doFilter2$2: function(p, step) {
      var p1, t1, p0, q0, q1, t2, a, t3, a1, a2;
      type$.InputBuffer._as(p);
      H._asInt(step);
      p1 = p.$index(0, -2 * step);
      t1 = -step;
      p0 = p.$index(0, t1);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      t2 = J.$index$asx($.$get$VP8Filter_sclip1(), 1020 + p1 - q1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      a = 3 * (q0 - p0) + t2;
      t2 = $.$get$VP8Filter_sclip2();
      t3 = Z.shiftR(a + 4, 3);
      if (typeof t3 !== "number")
        return H.iae(t3);
      a1 = J.$index$asx(t2, 112 + t3);
      t3 = $.$get$VP8Filter_sclip2();
      t2 = Z.shiftR(a + 3, 3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      a2 = J.$index$asx(t3, 112 + t2);
      p.$indexSet(0, t1, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p0 + a2));
      p.$indexSet(0, 0, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q0 - a1));
    },
    _doFilter4$2: function(p, step) {
      var t1, p1, t2, p0, q0, q1, a, t3, t4, a1, a2, a3;
      type$.InputBuffer._as(p);
      H._asInt(step);
      t1 = -2 * step;
      p1 = p.$index(0, t1);
      t2 = -step;
      p0 = p.$index(0, t2);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      a = 3 * (q0 - p0);
      t3 = $.$get$VP8Filter_sclip2();
      t4 = Z.shiftR(a + 4, 3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      a1 = J.$index$asx(t3, 112 + t4);
      t4 = $.$get$VP8Filter_sclip2();
      t3 = Z.shiftR(a + 3, 3);
      if (typeof t3 !== "number")
        return H.iae(t3);
      a2 = J.$index$asx(t4, 112 + t3);
      a3 = Z.shiftR(a1 + 1, 1);
      p.$indexSet(0, t1, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p1 + a3));
      p.$indexSet(0, t2, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p0 + a2));
      p.$indexSet(0, 0, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q0 - a1));
      p.$indexSet(0, step, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q1 - a3));
    },
    _doFilter6$2: function(p, step) {
      var t1, p2, t2, p1, t3, p0, q0, q1, t4, q2, t5, t6, t7, a, a1, a2, a3;
      type$.InputBuffer._as(p);
      H._asInt(step);
      t1 = -3 * step;
      p2 = p.$index(0, t1);
      t2 = -2 * step;
      p1 = p.$index(0, t2);
      t3 = -step;
      p0 = p.$index(0, t3);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      t4 = 2 * step;
      q2 = p.$index(0, t4);
      t5 = $.$get$VP8Filter_sclip1();
      t6 = J.getInterceptor$asx(t5);
      t7 = t6.$index(t5, 1020 + p1 - q1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      a = t6.$index(t5, 1020 + 3 * (q0 - p0) + t7);
      a1 = Z.shiftR(27 * a + 63, 7);
      a2 = Z.shiftR(18 * a + 63, 7);
      a3 = Z.shiftR(9 * a + 63, 7);
      p.$indexSet(0, t1, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p2 + a3));
      p.$indexSet(0, t2, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p1 + a2));
      p.$indexSet(0, t3, J.$index$asx($.$get$VP8Filter_clip1(), 255 + p0 + a1));
      p.$indexSet(0, 0, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q0 - a1));
      p.$indexSet(0, step, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q1 - a2));
      p.$indexSet(0, t4, J.$index$asx($.$get$VP8Filter_clip1(), 255 + q2 - a3));
    },
    _hev$3: function(p, step, thresh) {
      var p1, p0, q0, q1, t1;
      type$.InputBuffer._as(p);
      H._asInt(step);
      H._asInt(thresh);
      p1 = p.$index(0, -2 * step);
      p0 = p.$index(0, -step);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + p1 - p0);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (!(t1 > thresh)) {
        t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + q1 - q0);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > thresh;
      } else
        t1 = true;
      return t1;
    },
    _needsFilter$3: function(p, step, thresh) {
      var p1, p0, q0, q1, t1, t2;
      type$.InputBuffer._as(p);
      H._asInt(step);
      H._asInt(thresh);
      p1 = p.$index(0, -2 * step);
      p0 = p.$index(0, -step);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + p0 - q0);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.$index$asx($.$get$VP8Filter_abs1(), 255 + p1 - q1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return 2 * t1 + t2 <= thresh;
    },
    _needsFilter2$4: function(p, step, t, it) {
      var p3, p2, p1, p0, q0, q1, q2, q3, t1, t2, t3;
      type$.InputBuffer._as(p);
      H._asInt(step);
      H._asInt(t);
      H._asIntQ(it);
      p3 = p.$index(0, -4 * step);
      p2 = p.$index(0, -3 * step);
      p1 = p.$index(0, -2 * step);
      p0 = p.$index(0, -step);
      q0 = p.$index(0, 0);
      q1 = p.$index(0, step);
      q2 = p.$index(0, 2 * step);
      q3 = p.$index(0, 3 * step);
      t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + p0 - q0);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = 255 + p1;
      t3 = J.$index$asx($.$get$VP8Filter_abs1(), t2 - q1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (2 * t1 + t3 > t)
        return false;
      t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + p3 - p2);
      it.toString;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= it) {
        t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + p2 - p1);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= it) {
          t1 = J.$index$asx($.$get$VP8Filter_abs0(), t2 - p0);
          if (typeof t1 !== "number")
            return t1.$le();
          if (t1 <= it) {
            t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + q3 - q2);
            if (typeof t1 !== "number")
              return t1.$le();
            if (t1 <= it) {
              t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + q2 - q1);
              if (typeof t1 !== "number")
                return t1.$le();
              if (t1 <= it) {
                t1 = J.$index$asx($.$get$VP8Filter_abs0(), 255 + q1 - q0);
                if (typeof t1 !== "number")
                  return t1.$le();
                t1 = t1 <= it;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    transformOne$2: function(src, dst) {
      var $C, si, tmp, i, t2, t3, t4, a, b, t5, c, d, tmp0, di, dc, _35468 = 35468, _85627 = 85627,
        t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      $C = H.NativeInt32List_NativeInt32List(16);
      for (t1 = $C.length, si = 0, tmp = 0, i = 0; i < 4; ++i) {
        t2 = src.$index(0, si);
        t3 = si + 8;
        t4 = src.$index(0, t3);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        a = t2 + t4;
        t4 = src.$index(0, si);
        t3 = src.$index(0, t3);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        b = t4 - t3;
        t3 = si + 4;
        t4 = V.VP8Filter__mul(src.$index(0, t3), _35468);
        t2 = si + 12;
        t5 = V.VP8Filter__mul(src.$index(0, t2), _85627);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        c = t4 - t5;
        t3 = V.VP8Filter__mul(src.$index(0, t3), _85627);
        t2 = V.VP8Filter__mul(src.$index(0, t2), _35468);
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        d = t3 + t2;
        tmp0 = tmp + 1;
        if (tmp >= t1)
          return H.ioore($C, tmp);
        $C[tmp] = a + d;
        tmp = tmp0 + 1;
        if (tmp0 >= t1)
          return H.ioore($C, tmp0);
        $C[tmp0] = b + c;
        tmp0 = tmp + 1;
        if (tmp >= t1)
          return H.ioore($C, tmp);
        $C[tmp] = b - c;
        tmp = tmp0 + 1;
        if (tmp0 >= t1)
          return H.ioore($C, tmp0);
        $C[tmp0] = a - d;
        ++si;
      }
      for (di = 0, tmp = 0, i = 0; i < 4; ++i) {
        if (tmp >= t1)
          return H.ioore($C, tmp);
        t2 = $C[tmp];
        if (typeof t2 !== "number")
          return t2.$add();
        dc = t2 + 4;
        t2 = tmp + 8;
        if (t2 >= t1)
          return H.ioore($C, t2);
        t2 = $C[t2];
        if (typeof t2 !== "number")
          return H.iae(t2);
        a = dc + t2;
        b = dc - t2;
        t2 = tmp + 4;
        if (t2 >= t1)
          return H.ioore($C, t2);
        t3 = V.VP8Filter__mul($C[t2], _35468);
        t4 = tmp + 12;
        if (t4 >= t1)
          return H.ioore($C, t4);
        t5 = V.VP8Filter__mul($C[t4], _85627);
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        c = t3 - t5;
        t2 = V.VP8Filter__mul($C[t2], _85627);
        t4 = V.VP8Filter__mul($C[t4], _35468);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        d = t2 + t4;
        V.VP8Filter__store(dst, di, 0, 0, a + d);
        V.VP8Filter__store(dst, di, 1, 0, b + c);
        V.VP8Filter__store(dst, di, 2, 0, b - c);
        V.VP8Filter__store(dst, di, 3, 0, a - d);
        ++tmp;
        di += 32;
      }
    },
    transform$3: function(src, dst, doTwo) {
      var t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      H._asBool(doTwo);
      this.transformOne$2(src, dst);
      if (doTwo)
        this.transformOne$2(Z.InputBuffer$from(src, null, 16), Z.InputBuffer$from(dst, null, 4));
    },
    transformUV$2: function(src, dst) {
      var t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      this.transform$3(src, dst, true);
      this.transform$3(Z.InputBuffer$from(src, null, 32), Z.InputBuffer$from(dst, null, 128), true);
    },
    transformDC$2: function(src, dst) {
      var DC, j, i,
        t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      t1 = src.$index(0, 0);
      if (typeof t1 !== "number")
        return t1.$add();
      DC = t1 + 4;
      for (j = 0; j < 4; ++j)
        for (i = 0; i < 4; ++i)
          V.VP8Filter__store(dst, 0, i, j, DC);
    },
    transformDCUV$2: function(src, dst) {
      var _this = this, _null = null,
        t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      if (!H.boolConversionCheck(J.$eq$(src.$index(0, 0), 0)))
        _this.transformDC$2(src, dst);
      if (!H.boolConversionCheck(J.$eq$(src.$index(0, 16), 0)))
        _this.transformDC$2(Z.InputBuffer$from(src, _null, 16), Z.InputBuffer$from(dst, _null, 4));
      if (!H.boolConversionCheck(J.$eq$(src.$index(0, 32), 0)))
        _this.transformDC$2(Z.InputBuffer$from(src, _null, 32), Z.InputBuffer$from(dst, _null, 128));
      if (!H.boolConversionCheck(J.$eq$(src.$index(0, 48), 0)))
        _this.transformDC$2(Z.InputBuffer$from(src, _null, 48), Z.InputBuffer$from(dst, _null, 132));
    },
    transformAC3$2: function(src, dst) {
      var a, c4, d4, c1, d1,
        t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      t1 = src.$index(0, 0);
      if (typeof t1 !== "number")
        return t1.$add();
      a = t1 + 4;
      c4 = V.VP8Filter__mul(src.$index(0, 4), 35468);
      d4 = V.VP8Filter__mul(src.$index(0, 4), 85627);
      c1 = V.VP8Filter__mul(src.$index(0, 1), 35468);
      d1 = V.VP8Filter__mul(src.$index(0, 1), 85627);
      V.VP8Filter__store2(dst, 0, a + d4, d1, c1);
      V.VP8Filter__store2(dst, 1, a + c4, d1, c1);
      V.VP8Filter__store2(dst, 2, a - c4, d1, c1);
      V.VP8Filter__store2(dst, 3, a - d4, d1, c1);
    }
  };
  L.VP8FrameHeader.prototype = {
    get$partitionLength: function() {
      var t1 = this.__VP8FrameHeader_partitionLength;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("partitionLength")) : t1;
    },
    set$partitionLength: function(t1) {
      this.__VP8FrameHeader_partitionLength = H._asInt(t1);
    }
  };
  L.VP8PictureHeader.prototype = {
    set$width: function(_, width) {
      H._asIntQ(width);
    },
    set$height: function(_, height) {
      H._asIntQ(height);
    },
    set$colorspace: function(colorspace) {
      H._asIntQ(colorspace);
    },
    set$clampType: function(clampType) {
      H._asIntQ(clampType);
    }
  };
  L.VP8SegmentHeader.prototype = {};
  L.VP8BandProbas.prototype = {};
  L.VP8Proba.prototype = {
    VP8Proba$0: function() {
      var t1 = this.segments,
        t2 = J.getInterceptor$asx(t1);
      t2.fillRange$3(t1, 0, t2.get$length(t1), 255);
    }
  };
  L.VP8FilterHeader.prototype = {
    get$simple: function() {
      var t1 = this.__VP8FilterHeader_simple;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("simple")) : t1;
    },
    set$simple: function(t1) {
      this.__VP8FilterHeader_simple = H._asBool(t1);
    },
    get$sharpness: function() {
      var t1 = this.__VP8FilterHeader_sharpness;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("sharpness")) : t1;
    },
    set$sharpness: function(t1) {
      this.__VP8FilterHeader_sharpness = H._asInt(t1);
    },
    get$useLfDelta: function() {
      var t1 = this.__VP8FilterHeader_useLfDelta;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("useLfDelta")) : t1;
    },
    set$useLfDelta: function(t1) {
      this.__VP8FilterHeader_useLfDelta = H._asBool(t1);
    },
    set$level: function(level) {
      this.level = H._asIntQ(level);
    }
  };
  L.VP8FInfo.prototype = {};
  L.VP8MB.prototype = {};
  L.VP8QuantMatrix.prototype = {};
  L.VP8MBData.prototype = {
    get$isIntra4x4: function() {
      var t1 = this.__VP8MBData_isIntra4x4;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("isIntra4x4")) : t1;
    },
    set$isIntra4x4: function(t1) {
      this.__VP8MBData_isIntra4x4 = H._asBool(t1);
    },
    get$nonZeroUV: function() {
      var t1 = this.__VP8MBData_nonZeroUV;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("nonZeroUV")) : t1;
    },
    set$nonZeroUV: function(t1) {
      this.__VP8MBData_nonZeroUV = H._asInt(t1);
    }
  };
  L.VP8TopSamples.prototype = {};
  S.VP8L.prototype = {
    decodeHeader$0: function() {
      var t2, t3, t4,
        t1 = this.br;
      if (t1.readBits$1(8) !== 47)
        return false;
      t2 = this.webp;
      t2.format = 2;
      t3 = t1.readBits$1(14);
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = J.getInterceptor$z(t2);
      t4.set$width(t2, t3 + 1);
      t3 = t1.readBits$1(14);
      if (typeof t3 !== "number")
        return t3.$add();
      t4.set$height(t2, t3 + 1);
      t2.hasAlpha = !H.boolConversionCheck(J.$eq$(t1.readBits$1(1), 0));
      if (t1.readBits$1(3) !== 0)
        return false;
      return true;
    },
    decode$0: function() {
      var t1, t2, t3, _this = this, _null = null;
      _this._lastPixel = 0;
      if (!H.boolConversionCheck(_this.decodeHeader$0()))
        return _null;
      t1 = _this.webp;
      _this._decodeImageStream$3(t1.width, t1.height, true);
      _this._allocateInternalBuffers32b$0();
      _this.image = U.Image$(t1.width, t1.height, C.Channels_1, _null, _null);
      t2 = _this._pixels;
      t2.toString;
      t3 = t1.width;
      t1 = t1.height;
      if (!H.boolConversionCheck(_this._decodeImageData$5(t2, t3, t1, t1, _this.get$_processRows())))
        return _null;
      return _this.image;
    },
    _allocateInternalBuffers32b$0: function() {
      var pixels32, _this = this,
        t1 = _this.webp,
        t2 = t1.width;
      t1 = t1.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = t2 * t1 + t2;
      pixels32 = H.NativeUint32List_NativeUint32List(t1 + t2 * 16);
      _this._pixels = pixels32;
      _this.set$_pixels8(P.Uint8List_Uint8List$view(C.NativeUint32List_methods.get$buffer(pixels32), 0, null));
      _this._argbCache = t1;
      return true;
    },
    _allocateInternalBuffers8b$0: function() {
      var totalNumPixels, _this = this,
        t1 = _this.webp,
        t2 = t1.width;
      t1 = t1.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return H.iae(t1);
      totalNumPixels = t2 * t1;
      _this._argbCache = 0;
      _this.set$_pixels8(H.NativeUint8List_NativeUint8List(totalNumPixels + (4 - C.JSInt_methods.$mod(totalNumPixels, 4))));
      _this.set$_pixels(P.Uint32List_Uint32List$view(J.get$buffer$x(_this.get$_pixels8()), 0));
      return true;
    },
    _readTransform$1: function(transformSize) {
      var t1, type, t2, t3, transform, ok, numColors, bits, _this = this;
      type$.List_int._as(transformSize);
      t1 = _this.br;
      type = t1.readBits$1(2);
      t2 = _this._transformsSeen;
      t3 = C.JSInt_methods.$shl(1, type);
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & t3) >>> 0 !== 0)
        return false;
      _this._transformsSeen = (t2 | t3) >>> 0;
      transform = R.VP8LTransform$();
      J.add$1$ax(_this._transforms, transform);
      transform.type = type;
      t2 = J.getInterceptor$asx(transformSize);
      transform.set$xsize(t2.$index(transformSize, 0));
      transform.set$ysize(t2.$index(transformSize, 1));
      switch (type) {
        case 0:
        case 1:
          t1 = t1.readBits$1(3);
          if (typeof t1 !== "number")
            return t1.$add();
          transform.set$bits(t1 + 2);
          transform.set$data(0, _this._decodeImageStream$3(S.VP8L__subSampleSize(transform.xsize, transform.bits), S.VP8L__subSampleSize(transform.ysize, transform.bits), false));
          ok = true;
          break;
        case 3:
          t1 = t1.readBits$1(8);
          if (typeof t1 !== "number")
            return t1.$add();
          numColors = t1 + 1;
          if (numColors > 16)
            bits = 0;
          else if (numColors > 4)
            bits = 1;
          else {
            t1 = numColors > 2 ? 2 : 3;
            bits = t1;
          }
          t2.$indexSet(transformSize, 0, S.VP8L__subSampleSize(transform.xsize, bits));
          transform.bits = bits;
          transform.set$data(0, _this._decodeImageStream$3(numColors, 1, false));
          ok = _this._expandColorMap$2(numColors, transform);
          break;
        case 2:
          ok = true;
          break;
        default:
          throw H.wrapException(K.ImageException$("Invalid WebP tranform type: " + H.S(type)));
      }
      return ok;
    },
    _decodeImageStream$3: function(xsize, ysize, isLevel0) {
      var t1, t2, transformYsize, transformXsize, sizes, t3, colorCacheBits, numBits, data, _this = this;
      H._asInt(xsize);
      H._asInt(ysize);
      H._asBool(isLevel0);
      if (isLevel0) {
        for (t1 = _this.br, t2 = type$.JSArray_int, transformYsize = ysize, transformXsize = xsize; !H.boolConversionCheck(J.$eq$(t1.readBits$1(1), 0));) {
          sizes = H.setRuntimeTypeInfo([transformXsize, transformYsize], t2);
          if (!H.boolConversionCheck(_this._readTransform$1(sizes)))
            throw H.wrapException(K.ImageException$("Invalid Transform"));
          t3 = sizes.length;
          if (0 >= t3)
            return H.ioore(sizes, 0);
          transformXsize = sizes[0];
          if (1 >= t3)
            return H.ioore(sizes, 1);
          transformYsize = sizes[1];
        }
        isLevel0 = true;
      } else {
        transformYsize = ysize;
        transformXsize = xsize;
      }
      t1 = _this.br;
      if (!H.boolConversionCheck(J.$eq$(t1.readBits$1(1), 0))) {
        colorCacheBits = t1.readBits$1(4);
        if (!(colorCacheBits >= 1 && colorCacheBits <= 11))
          throw H.wrapException(K.ImageException$("Invalid Color Cache"));
      } else
        colorCacheBits = 0;
      if (!H.boolConversionCheck(_this._readHuffmanCodes$4(transformXsize, transformYsize, colorCacheBits, isLevel0)))
        throw H.wrapException(K.ImageException$("Invalid Huffman Codes"));
      if (colorCacheBits > 0) {
        _this._colorCacheSize = C.JSInt_methods.$shl(1, colorCacheBits);
        _this._colorCache = Y.VP8LColorCache$(colorCacheBits);
      } else
        _this._colorCacheSize = 0;
      t1 = _this.webp;
      t1.width = transformXsize;
      t1.height = transformYsize;
      numBits = _this._huffmanSubsampleBits;
      _this.set$_huffmanXsize(S.VP8L__subSampleSize(transformXsize, numBits));
      _this._huffmanMask = numBits === 0 ? 4294967295 : C.JSInt_methods.$shl(1, numBits) - 1;
      if (isLevel0) {
        _this._lastPixel = 0;
        return null;
      }
      data = H.NativeUint32List_NativeUint32List(transformXsize * transformYsize);
      if (!H.boolConversionCheck(_this._decodeImageData$5(data, transformXsize, transformYsize, transformYsize, null)))
        throw H.wrapException(K.ImageException$("Failed to decode image data."));
      _this._lastPixel = 0;
      return data;
    },
    _decodeImageData$5: function(data, width, height, lastRow, processFunc) {
      var t1, row, col, htreeGroup, src, srcEnd, srcLast, colorCacheLimit, colorCache, mask, t2, t3, lastCached, t4, t5, code, red, c, $length, distSymbol, dist, i, _this = this;
      type$.Uint32List._as(data);
      H._asInt(width);
      H._asInt(height);
      H._asInt(lastRow);
      type$.nullable_void_Function_int._as(processFunc);
      t1 = _this._lastPixel;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      row = C.JSNumber_methods.$tdiv(t1, width);
      col = C.JSNumber_methods.$mod(t1, width);
      htreeGroup = _this._getHtreeGroupForPos$2(col, row);
      src = _this._lastPixel;
      srcEnd = width * height;
      srcLast = width * lastRow;
      t1 = _this._colorCacheSize;
      if (typeof t1 !== "number")
        return H.iae(t1);
      colorCacheLimit = 280 + t1;
      colorCache = t1 > 0 ? _this._colorCache : null;
      mask = _this._huffmanMask;
      t1 = data.length;
      t2 = _this.br;
      t3 = processFunc != null;
      lastCached = src;
      while (true) {
        if (!(!H.boolConversionCheck(t2.get$isEOS()) && src < srcLast))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        t2.fillBitWindow$0();
        t4 = htreeGroup.htrees;
        t5 = J.getInterceptor$asx(t4);
        code = t5.$index(t4, 0).readSymbol$1(t2);
        if (code < 256) {
          red = t5.$index(t4, 1).readSymbol$1(t2);
          t2.fillBitWindow$0();
          c = K.getColor(red, code, t5.$index(t4, 2).readSymbol$1(t2), t5.$index(t4, 3).readSymbol$1(t2));
          if (src < 0 || src >= t1)
            return H.ioore(data, src);
          data[src] = c;
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t3)
              processFunc.call$1(row);
            if (colorCache != null)
              for (; lastCached < src;) {
                if (lastCached < 0)
                  return H.ioore(data, lastCached);
                colorCache.insert$1(0, data[lastCached]);
                ++lastCached;
              }
            col = 0;
          }
        } else if (code < 280) {
          $length = _this._getCopyLength$1(code - 256);
          distSymbol = t5.$index(t4, 4).readSymbol$1(t2);
          t2.fillBitWindow$0();
          dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
          if (src < dist || srcEnd - src < $length)
            return false;
          else {
            for (i = 0; i < $length; ++i) {
              t4 = src + i;
              t5 = src + (i - dist);
              if (t5 < 0 || t5 >= t1)
                return H.ioore(data, t5);
              t5 = data[t5];
              if (t4 < 0 || t4 >= t1)
                return H.ioore(data, t4);
              data[t4] = t5;
            }
            src += $length;
          }
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t3)
              processFunc.call$1(row);
          }
          if (src < srcLast) {
            if ((col & mask) >>> 0 !== 0)
              htreeGroup = _this._getHtreeGroupForPos$2(col, row);
            if (colorCache != null)
              for (; lastCached < src;) {
                if (lastCached < 0 || lastCached >= t1)
                  return H.ioore(data, lastCached);
                colorCache.insert$1(0, data[lastCached]);
                ++lastCached;
              }
          }
        } else if (code < colorCacheLimit) {
          for (; lastCached < src;) {
            colorCache.toString;
            if (lastCached < 0 || lastCached >= t1)
              return H.ioore(data, lastCached);
            colorCache.insert$1(0, data[lastCached]);
            ++lastCached;
          }
          C.NativeUint32List_methods.$indexSet(data, src, colorCache.lookup$1(code - 280));
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t3)
              processFunc.call$1(row);
            for (; lastCached < src;) {
              if (lastCached < 0 || lastCached >= t1)
                return H.ioore(data, lastCached);
              colorCache.insert$1(0, data[lastCached]);
              ++lastCached;
            }
            col = 0;
          }
        } else
          return false;
      }
      if (t3)
        processFunc.call$1(row);
      if (H.boolConversionCheck(t2.get$isEOS()) && src < srcEnd)
        return false;
      _this._lastPixel = src;
      return true;
    },
    _is8bOptimizable$0: function() {
      var i, htrees, t2,
        t1 = this._colorCacheSize;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return false;
      i = 0;
      while (true) {
        t1 = this._numHtreeGroups;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        htrees = J.$index$asx(this._htreeGroups, i).htrees;
        t1 = J.getInterceptor$asx(htrees);
        t2 = t1.$index(htrees, 1).numNodes;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 1)
          return false;
        t2 = t1.$index(htrees, 2).numNodes;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 1)
          return false;
        t1 = t1.$index(htrees, 3).numNodes;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 1)
          return false;
        ++i;
      }
      return true;
    },
    _extractAlphaRows$1: function(row) {
      var t1, numRows, t2, t3, width, cachePixs, di, src, i, _this = this;
      H._asInt(row);
      t1 = _this._lastRow;
      if (typeof t1 !== "number")
        return H.iae(t1);
      numRows = row - t1;
      if (numRows <= 0)
        return;
      t2 = _this.webp;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return t3.$mul();
      _this._applyInverseTransforms$2(numRows, t3 * t1);
      width = t2.width;
      cachePixs = width * numRows;
      t2 = _this._lastRow;
      if (typeof t2 !== "number")
        return H.iae(t2);
      di = width * t2;
      t2 = _this._pixels;
      t2.toString;
      t1 = _this._argbCache;
      t1.toString;
      src = Z.InputBuffer$(t2, false, null, t1);
      for (i = 0; i < cachePixs; ++i) {
        t1 = _this._opaque;
        t1.toString;
        t2 = src.$index(0, i);
        if (typeof t2 !== "number")
          return t2.$shr();
        J.$indexSet$ax(t1, di + i, C.JSNumber_methods._shrOtherPositive$1(t2, 8) & 255);
      }
      _this._lastRow = row;
    },
    _decodeAlphaData$3: function(width, height, lastRow) {
      var t1, row, col, htreeGroup, pos, end, last, mask, t2, t3, code, $length, distSymbol, dist, i, _this = this;
      H._asInt(width);
      H._asInt(height);
      H._asInt(lastRow);
      t1 = _this._lastPixel;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      row = C.JSNumber_methods.$tdiv(t1, width);
      col = C.JSNumber_methods.$mod(t1, width);
      htreeGroup = _this._getHtreeGroupForPos$2(col, row);
      pos = _this._lastPixel;
      end = width * height;
      last = width * lastRow;
      mask = _this._huffmanMask;
      t1 = _this.br;
      while (true) {
        if (!(!H.boolConversionCheck(t1.get$isEOS()) && pos < last))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        t1.fillBitWindow$0();
        t2 = htreeGroup.htrees;
        t3 = J.getInterceptor$asx(t2);
        code = t3.$index(t2, 0).readSymbol$1(t1);
        if (code < 256) {
          J.$indexSet$ax(_this.get$_pixels8(), pos, code);
          ++pos;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0)
              _this._extractPalettedAlphaRows$1(row);
            col = 0;
          }
        } else if (code < 280) {
          $length = _this._getCopyLength$1(code - 256);
          distSymbol = t3.$index(t2, 4).readSymbol$1(t1);
          t1.fillBitWindow$0();
          dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
          if (pos >= dist && end - pos >= $length)
            for (i = 0; i < $length; ++i) {
              t2 = pos + i;
              J.$indexSet$ax(_this.get$_pixels8(), t2, J.$index$asx(_this.get$_pixels8(), t2 - dist));
            }
          else {
            _this._lastPixel = pos;
            return true;
          }
          pos += $length;
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0)
              _this._extractPalettedAlphaRows$1(row);
          }
          if (pos < last && (col & mask) >>> 0 !== 0)
            htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        } else
          return false;
      }
      _this._extractPalettedAlphaRows$1(row);
      _this._lastPixel = pos;
      return true;
    },
    _extractPalettedAlphaRows$1: function(row) {
      var t1, numRows, t2, t3, pIn, _this = this;
      H._asInt(row);
      t1 = _this._lastRow;
      if (typeof t1 !== "number")
        return H.iae(t1);
      numRows = row - t1;
      t1 = _this.get$_pixels8();
      t2 = _this.webp.width;
      t3 = _this._lastRow;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      pIn = Z.InputBuffer$(t1, false, null, t2 * t3);
      if (numRows > 0)
        _this._applyInverseTransformsAlpha$2(numRows, pIn);
      _this._lastRow = row;
    },
    _applyInverseTransformsAlpha$2: function(numRows, rows) {
      var startRow, t1, t2, rowsOut, _this = this;
      H._asInt(numRows);
      type$.InputBuffer._as(rows);
      startRow = _this._lastRow;
      t1 = _this._opaque;
      t1.toString;
      t2 = _this._ioWidth;
      t2.toString;
      if (typeof t2 !== "number")
        return t2.$mul();
      rowsOut = Z.InputBuffer$(t1, false, null, t2 * startRow);
      J.$index$asx(_this._transforms, 0).colorIndexInverseTransformAlpha$4(startRow, startRow + numRows, rows, rowsOut);
    },
    _processRows$1: function(row) {
      var t1, t2, t3, numRows, dy, pi, y, x, c, r, g, b, a, _this = this;
      H._asInt(row);
      t1 = _this.webp;
      t2 = t1.width;
      t3 = _this._lastRow;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      numRows = row - t3;
      if (numRows <= 0)
        return;
      _this._applyInverseTransforms$2(numRows, t2 * t3);
      t2 = _this._argbCache;
      t2.toString;
      dy = _this._lastRow;
      pi = t2;
      y = 0;
      for (; y < numRows; ++y, ++dy) {
        x = 0;
        while (true) {
          t2 = t1.width;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(x < t2))
            break;
          t2 = _this._pixels;
          t2.toString;
          c = J.$index$asx(t2, pi);
          r = K.getRed(c);
          g = K.getGreen(c);
          b = K.getBlue(c);
          a = K.getAlpha(c);
          t2 = _this.image;
          t2.toString;
          t2.setPixel$3(x, dy, K.getColor(r, g, b, a));
          ++x;
          ++pi;
        }
      }
      _this._lastRow = row;
    },
    _applyInverseTransforms$2: function(numRows, rows) {
      var t1, t2, n, t3, startRow, endRow, t4, t5, rowsIn, n0, transform, _this = this;
      H._asInt(numRows);
      H._asInt(rows);
      t1 = _this._transforms;
      t2 = J.getInterceptor$asx(t1);
      n = t2.get$length(t1);
      t3 = _this.webp.width;
      if (typeof t3 !== "number")
        return t3.$mul();
      startRow = _this._lastRow;
      endRow = startRow + numRows;
      t4 = _this._argbCache;
      t4.toString;
      t5 = _this._pixels;
      t5.toString;
      J.setRange$4$ax(t5, t4, t4 + t3 * numRows, t5, rows);
      for (rowsIn = rows; n0 = n - 1, n > 0; rowsIn = t4, n = n0) {
        transform = t2.$index(t1, n0);
        t3 = _this._pixels;
        t3.toString;
        transform.inverseTransform$6(startRow, endRow, t3, rowsIn, t3, t4);
      }
    },
    _readHuffmanCodes$4: function(xsize, ysize, colorCacheBits, allowRecursion) {
      var t1, huffmanPrecision, huffmanXsize, huffmanYsize, huffmanPixs, huffmanImage, numHtreeGroups, i, group, htreeGroups, _i, j, alphabetSize, _this = this;
      H._asInt(xsize);
      H._asInt(ysize);
      H._asInt(colorCacheBits);
      if (H._asBool(allowRecursion) && !H.boolConversionCheck(J.$eq$(_this.br.readBits$1(1), 0))) {
        t1 = _this.br.readBits$1(3);
        if (typeof t1 !== "number")
          return t1.$add();
        huffmanPrecision = t1 + 2;
        huffmanXsize = S.VP8L__subSampleSize(xsize, huffmanPrecision);
        huffmanYsize = S.VP8L__subSampleSize(ysize, huffmanPrecision);
        huffmanPixs = huffmanXsize * huffmanYsize;
        huffmanImage = _this._decodeImageStream$3(huffmanXsize, huffmanYsize, false);
        _this._huffmanSubsampleBits = huffmanPrecision;
        for (numHtreeGroups = 1, i = 0; i < huffmanPixs; ++i) {
          if (i >= huffmanImage.length)
            return H.ioore(huffmanImage, i);
          t1 = huffmanImage[i];
          if (typeof t1 !== "number")
            return t1.$shr();
          group = C.JSNumber_methods._shrOtherPositive$1(t1, 8) & 65535;
          huffmanImage[i] = group;
          if (group >= numHtreeGroups)
            numHtreeGroups = group + 1;
        }
      } else {
        huffmanImage = null;
        numHtreeGroups = 1;
      }
      htreeGroups = J.JSArray_JSArray$allocateFixed(numHtreeGroups, type$.HTreeGroup);
      for (_i = 0; _i < numHtreeGroups; ++_i)
        C.JSArray_methods.$indexSet(htreeGroups, _i, B.HTreeGroup$());
      for (t1 = colorCacheBits > 0, i = 0; i < numHtreeGroups; ++i)
        for (j = 0; j < 5; ++j) {
          alphabetSize = C.List_yTu[j];
          if (j === 0 && t1)
            alphabetSize += C.JSInt_methods.$shl(1, colorCacheBits);
          if (i >= htreeGroups.length)
            return H.ioore(htreeGroups, i);
          if (!H.boolConversionCheck(_this._readHuffmanCode$2(alphabetSize, J.$index$asx(htreeGroups[i].htrees, j))))
            return false;
        }
      _this._huffmanImage = huffmanImage;
      _this._numHtreeGroups = numHtreeGroups;
      _this.set$_htreeGroups(htreeGroups);
      return true;
    },
    _readHuffmanCode$2: function(alphabetSize, tree) {
      var t1, t2, symbols, codes, codeLengths, numSymbols, ok, codeLengthCodeLengths, numCodes, i;
      H._asInt(alphabetSize);
      type$.HuffmanTree._as(tree);
      t1 = this.br;
      if (t1.readBits$1(1) !== 0) {
        t2 = type$.JSArray_int;
        symbols = H.setRuntimeTypeInfo([0, 0], t2);
        codes = H.setRuntimeTypeInfo([0, 0], t2);
        codeLengths = H.setRuntimeTypeInfo([0, 0], t2);
        t2 = t1.readBits$1(1);
        if (typeof t2 !== "number")
          return t2.$add();
        numSymbols = t2 + 1;
        C.JSArray_methods.$indexSet(symbols, 0, t1.readBits$1(t1.readBits$1(1) === 0 ? 1 : 8));
        C.JSArray_methods.$indexSet(codes, 0, 0);
        t2 = numSymbols - 1;
        C.JSArray_methods.$indexSet(codeLengths, 0, t2);
        if (numSymbols === 2) {
          C.JSArray_methods.$indexSet(symbols, 1, t1.readBits$1(8));
          C.JSArray_methods.$indexSet(codes, 1, 1);
          C.JSArray_methods.$indexSet(codeLengths, 1, t2);
        }
        ok = tree.buildExplicit$5(codeLengths, codes, symbols, alphabetSize, numSymbols);
      } else {
        codeLengthCodeLengths = H.NativeInt32List_NativeInt32List(19);
        t2 = t1.readBits$1(4);
        if (typeof t2 !== "number")
          return t2.$add();
        numCodes = t2 + 4;
        if (numCodes > 19)
          return false;
        codeLengths = H.NativeInt32List_NativeInt32List(alphabetSize);
        for (i = 0; i < numCodes; ++i)
          C.NativeInt32List_methods.$indexSet(codeLengthCodeLengths, C.List_uSC0[i], t1.readBits$1(3));
        ok = this._readHuffmanCodeLengths$3(codeLengthCodeLengths, alphabetSize, codeLengths);
        if (ok)
          ok = tree.buildImplicit$2(codeLengths, alphabetSize);
      }
      return ok;
    },
    _readHuffmanCodeLengths$3: function(codeLengthCodeLengths, numSymbols, codeLengths) {
      var tree, t2, max_symbol, symbol, prev_code_len, max_symbol0, code_len, symbol0, slot, extra_bits, repeat_offset, t3, repeat, $length, repeat0,
        t1 = type$.List_int;
      t1._as(codeLengthCodeLengths);
      H._asInt(numSymbols);
      t1._as(codeLengths);
      tree = B.HuffmanTree$();
      if (!H.boolConversionCheck(tree.buildImplicit$2(codeLengthCodeLengths, 19)))
        return false;
      t1 = this.br;
      if (!H.boolConversionCheck(J.$eq$(t1.readBits$1(1), 0))) {
        t2 = t1.readBits$1(3);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1.readBits$1(2 + 2 * t2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        max_symbol = 2 + t2;
        if (max_symbol > numSymbols)
          return false;
      } else
        max_symbol = numSymbols;
      for (t2 = J.getInterceptor$ax(codeLengths), symbol = 0, prev_code_len = 8; symbol < numSymbols; max_symbol = max_symbol0) {
        max_symbol0 = max_symbol - 1;
        if (max_symbol === 0)
          break;
        t1.fillBitWindow$0();
        code_len = tree.readSymbol$1(t1);
        if (code_len < 16) {
          symbol0 = symbol + 1;
          t2.$indexSet(codeLengths, symbol, code_len);
          if (code_len !== 0)
            prev_code_len = code_len;
          symbol = symbol0;
        } else {
          slot = code_len - 16;
          if (slot >= 3)
            return H.ioore(C.List_2_3_7, slot);
          extra_bits = C.List_2_3_7[slot];
          repeat_offset = C.List_3_3_11[slot];
          t3 = t1.readBits$1(extra_bits);
          if (typeof t3 !== "number")
            return t3.$add();
          repeat = t3 + repeat_offset;
          if (symbol + repeat > numSymbols)
            return false;
          else {
            $length = code_len === 16 ? prev_code_len : 0;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, symbol = symbol0) {
              symbol0 = symbol + 1;
              t2.$indexSet(codeLengths, symbol, $length);
            }
          }
        }
      }
      return true;
    },
    _getCopyDistance$1: function(distanceSymbol) {
      var extraBits, offset, t1;
      H._asInt(distanceSymbol);
      if (distanceSymbol < 4)
        return distanceSymbol + 1;
      extraBits = C.JSInt_methods._shrOtherPositive$1(distanceSymbol - 2, 1);
      offset = C.JSInt_methods._shlPositive$1(2 + (distanceSymbol & 1), extraBits);
      t1 = this.br.readBits$1(extraBits);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return offset + t1 + 1;
    },
    _getCopyLength$1: function(lengthSymbol) {
      return this._getCopyDistance$1(H._asInt(lengthSymbol));
    },
    _planeCodeToDistance$2: function(xsize, planeCode) {
      var t1, distCode, dist;
      H._asInt(xsize);
      H._asInt(planeCode);
      if (planeCode > 120)
        return planeCode - 120;
      else {
        t1 = planeCode - 1;
        if (t1 < 0)
          return H.ioore(C.List_AYZ, t1);
        distCode = C.List_AYZ[t1];
        dist = C.JSInt_methods._shrOtherPositive$1(distCode, 4) * xsize + (8 - (distCode & 15));
        return dist >= 1 ? dist : 1;
      }
    },
    _expandColorMap$2: function(numColors, transform) {
      var t1, finalNumColors, newColorMap, data, newData, len, t2, i, t3, t4;
      H._asInt(numColors);
      type$.VP8LTransform._as(transform);
      t1 = transform.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      finalNumColors = C.JSInt_methods._shlPositive$1(1, C.JSInt_methods._shrReceiverPositive$1(8, t1));
      newColorMap = H.NativeUint32List_NativeUint32List(finalNumColors);
      t1 = transform.data;
      t1.toString;
      data = P.Uint8List_Uint8List$view(J.get$buffer$x(t1), 0, null);
      newData = P.Uint8List_Uint8List$view(C.NativeUint32List_methods.get$buffer(newColorMap), 0, null);
      t1 = transform.data;
      t1.toString;
      C.NativeUint32List_methods.$indexSet(newColorMap, 0, J.$index$asx(t1, 0));
      len = 4 * numColors;
      for (t1 = data.length, t2 = newData.length, i = 4; i < len; ++i) {
        if (i >= t1)
          return H.ioore(data, i);
        t3 = data[i];
        t4 = i - 4;
        if (t4 >= t2)
          return H.ioore(newData, t4);
        t4 = newData[t4];
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = t3 + t4 & 255;
      }
      for (len = 4 * finalNumColors; i < len; ++i) {
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = 0;
      }
      transform.data = newColorMap;
      return true;
    },
    _getMetaIndex$5: function(image, xsize, bits, x, y) {
      var t1;
      type$.nullable_Uint32List._as(image);
      H._asInt(xsize);
      H._asInt(bits);
      H._asInt(x);
      H._asInt(y);
      if (bits === 0)
        return 0;
      image.toString;
      t1 = xsize * C.JSInt_methods.$shr(y, bits) + C.JSInt_methods.$shr(x, bits);
      if (t1 < 0 || t1 >= image.length)
        return H.ioore(image, t1);
      return image[t1];
    },
    _getHtreeGroupForPos$2: function(x, y) {
      var metaIndex, _this = this;
      H._asInt(x);
      H._asInt(y);
      metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, x, y);
      return J.$index$asx(_this._htreeGroups, metaIndex);
    },
    get$_pixels8: function() {
      var t1 = this.__VP8L__pixels8;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_pixels8")) : t1;
    },
    set$_pixels8: function(t1) {
      this.__VP8L__pixels8 = type$.Uint8List._as(t1);
    },
    set$_huffmanXsize: function(_huffmanXsize) {
      this._huffmanXsize = H._asInt(_huffmanXsize);
    },
    set$_htreeGroups: function(_htreeGroups) {
      this._htreeGroups = type$.List_HTreeGroup._as(_htreeGroups);
    },
    set$_pixels: function(_pixels) {
      this._pixels = type$.nullable_Uint32List._as(_pixels);
    }
  };
  S.InternalVP8L.prototype = {
    get$transforms: function() {
      return this._transforms;
    },
    get$pixels: function() {
      return this._pixels;
    },
    set$opaque: function(value) {
      this._opaque = type$.nullable_Uint8List._as(value);
    },
    set$ioWidth: function(width) {
      this._ioWidth = H._asIntQ(width);
    },
    set$ioHeight: function(height) {
      H._asIntQ(height);
    },
    decodeImageData$5: function(data, width, height, lastRow, processFunc) {
      return this._decodeImageData$5(type$.Uint32List._as(data), H._asInt(width), H._asInt(height), H._asInt(lastRow), type$.void_Function_int._as(processFunc));
    },
    decodeImageStream$3: function(xsize, ysize, isLevel0) {
      return this._decodeImageStream$3(H._asInt(xsize), H._asInt(ysize), H._asBool(isLevel0));
    },
    allocateInternalBuffers32b$0: function() {
      return this._allocateInternalBuffers32b$0();
    },
    allocateInternalBuffers8b$0: function() {
      return this._allocateInternalBuffers8b$0();
    },
    decodeAlphaData$3: function(width, height, lastRow) {
      return this._decodeAlphaData$3(H._asInt(width), H._asInt(height), H._asInt(lastRow));
    },
    is8bOptimizable$0: function() {
      return this._is8bOptimizable$0();
    },
    extractAlphaRows$1: function(row) {
      return this._extractAlphaRows$1(H._asInt(row));
    }
  };
  A.VP8LBitReader.prototype = {
    VP8LBitReader$1: function(_input) {
      var t1, _this = this;
      _this.set$_buffer8(P.Uint8List_Uint8List$view(J.get$buffer$x(_this._vp8l_bit_reader$_buffer), 0, null));
      t1 = _this._vp8l_bit_reader$_input;
      J.$indexSet$ax(_this.get$_buffer8(), 0, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 1, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 2, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 3, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 4, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 5, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 6, t1.readByte$0());
      J.$indexSet$ax(_this.get$_buffer8(), 7, t1.readByte$0());
    },
    prefetchBits$0: function() {
      var t2, t3, t4, b2, _this = this,
        t1 = _this.bitPos;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 32) {
        t1 = _this._vp8l_bit_reader$_buffer;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.$index(t1, 0);
        t4 = _this.bitPos;
        if (typeof t3 !== "number")
          return t3.$shr();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = C.JSNumber_methods.$shr(t3, t4);
        t1 = t2.$index(t1, 1);
        t2 = C.JSArray_methods.$index(C.List_DKo, _this.bitPos);
        if (typeof t1 !== "number")
          return t1.$and();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this.bitPos;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = C.JSArray_methods.$index(C.List_DKo, 32 - t3);
        if (typeof t3 !== "number")
          return t3.$add();
        b2 = t4 + ((t1 & t2) >>> 0) * (t3 + 1);
      } else {
        t2 = _this._vp8l_bit_reader$_buffer;
        t3 = J.getInterceptor$asx(t2);
        if (t1 === 32)
          b2 = t3.$index(t2, 1);
        else {
          t1 = t3.$index(t2, 1);
          t2 = _this.bitPos;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t1 !== "number")
            return t1.$shr();
          b2 = C.JSNumber_methods.$shr(t1, t2 - 32);
        }
      }
      return b2;
    },
    get$isEOS: function() {
      if (H.boolConversionCheck(this._vp8l_bit_reader$_input.get$isEOS())) {
        var t1 = this.bitPos;
        if (typeof t1 !== "number")
          return t1.$ge();
        t1 = t1 >= 64;
      } else
        t1 = false;
      return t1;
    },
    fillBitWindow$0: function() {
      var t1 = this.bitPos;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 32)
        this._shiftBytes$0();
    },
    readBits$1: function(numBits) {
      var t1, t2, t3, _this = this;
      H._asInt(numBits);
      if (!H.boolConversionCheck(_this.get$isEOS()) && numBits < 25) {
        t1 = _this.prefetchBits$0();
        if (numBits < 0 || numBits >= 33)
          return H.ioore(C.List_DKo, numBits);
        t2 = C.List_DKo[numBits];
        if (typeof t1 !== "number")
          return t1.$and();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this.bitPos;
        if (typeof t3 !== "number")
          return t3.$add();
        _this.set$bitPos(t3 + numBits);
        _this._shiftBytes$0();
        return (t1 & t2) >>> 0;
      } else
        throw H.wrapException(K.ImageException$("Not enough data in input."));
    },
    _shiftBytes$0: function() {
      var t4, b, t5, _this = this,
        t1 = _this._vp8l_bit_reader$_input,
        t2 = _this._vp8l_bit_reader$_buffer,
        t3 = J.getInterceptor$asx(t2);
      while (true) {
        t4 = _this.bitPos;
        if (typeof t4 !== "number")
          return t4.$ge();
        if (!(t4 >= 8 && !H.boolConversionCheck(t1.get$isEOS())))
          break;
        b = t1.readByte$0();
        t4 = t3.$index(t2, 0);
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 8);
        t5 = t3.$index(t2, 1);
        if (typeof t5 !== "number")
          return t5.$and();
        t3.$indexSet(t2, 0, t4 + (t5 & 255) * 16777216);
        t5 = t3.$index(t2, 1);
        if (typeof t5 !== "number")
          return t5.$shr();
        t3.$indexSet(t2, 1, C.JSNumber_methods._shrOtherPositive$1(t5, 8));
        t5 = t3.$index(t2, 1);
        if (typeof t5 !== "number")
          return t5.$or();
        t3.$indexSet(t2, 1, (t5 | b * 16777216) >>> 0);
        t5 = _this.bitPos;
        if (typeof t5 !== "number")
          return t5.$sub();
        _this.set$bitPos(t5 - 8);
      }
    },
    get$_buffer8: function() {
      var t1 = this.__VP8LBitReader__buffer8;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_buffer8")) : t1;
    },
    set$_buffer8: function(t1) {
      this.__VP8LBitReader__buffer8 = type$.Uint8List._as(t1);
    },
    set$bitPos: function(bitPos) {
      this.bitPos = H._asInt(bitPos);
    }
  };
  Y.VP8LColorCache.prototype = {
    insert$1: function(_, argb) {
      var t1;
      H._asInt(argb);
      t1 = this.hashShift;
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(this.colors, C.JSInt_methods._shrReceiverPositive$1(argb * 506832829 >>> 0, t1), argb);
    },
    lookup$1: function(key) {
      return J.$index$asx(this.colors, H._asInt(key));
    }
  };
  R.VP8LTransform.prototype = {
    inverseTransform$6: function(rowStart, rowEnd, inData, rowsIn, outData, rowsOut) {
      var t1, width, start, t2, inStride, src, _this = this;
      H._asInt(rowStart);
      H._asInt(rowEnd);
      t1 = type$.Uint32List;
      t1._as(inData);
      H._asInt(rowsIn);
      t1._as(outData);
      H._asInt(rowsOut);
      width = _this.xsize;
      switch (_this.type) {
        case 2:
          _this.addGreenToBlueAndRed$3(outData, rowsOut, rowsOut + (rowEnd - rowStart) * width);
          break;
        case 0:
          _this.predictorInverseTransform$4(rowStart, rowEnd, outData, rowsOut);
          if (rowEnd !== _this.ysize) {
            start = rowsOut - width;
            C.NativeUint32List_methods.setRange$4(outData, start, start + width, inData, rowsOut + (rowEnd - rowStart - 1) * width);
          }
          break;
        case 1:
          _this.colorSpaceInverseTransform$4(rowStart, rowEnd, outData, rowsOut);
          break;
        case 3:
          if (rowsIn === rowsOut) {
            t1 = _this.bits;
            if (typeof t1 !== "number")
              return t1.$gt();
            t1 = t1 > 0;
          } else
            t1 = false;
          if (t1) {
            t1 = rowEnd - rowStart;
            t2 = S.InternalVP8L_subSampleSize(width, _this.bits);
            if (typeof t2 !== "number")
              return H.iae(t2);
            inStride = t1 * t2;
            src = rowsOut + t1 * width - inStride;
            C.NativeUint32List_methods.setRange$4(outData, src, src + inStride, inData, rowsOut);
            _this.colorIndexInverseTransform$6(rowStart, rowEnd, inData, src, outData, rowsOut);
          } else
            _this.colorIndexInverseTransform$6(rowStart, rowEnd, inData, rowsIn, outData, rowsOut);
          break;
      }
    },
    colorIndexInverseTransformAlpha$4: function(yStart, yEnd, src, dst) {
      var t1, bitsPerPixel, width, colorMap, countMask, bit_mask, y, packed_pixels, x, index;
      H._asInt(yStart);
      H._asInt(yEnd);
      t1 = type$.InputBuffer;
      t1._as(src);
      t1._as(dst);
      t1 = this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsPerPixel = C.JSInt_methods._shrReceiverPositive$1(8, t1);
      width = this.xsize;
      colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods.$shl(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; y < yEnd; ++y)
          for (packed_pixels = 0, x = 0; x < width; ++x) {
            if ((x & countMask) >>> 0 === 0) {
              packed_pixels = R.VP8LTransform__getAlphaIndex(src.$index(0, 0));
              t1 = src.offset;
              if (typeof t1 !== "number")
                return t1.$add();
              src.set$offset(0, t1 + 1);
            }
            t1 = (packed_pixels & bit_mask) >>> 0;
            if (t1 < 0 || t1 >= colorMap.length)
              return H.ioore(colorMap, t1);
            dst.$indexSet(0, 0, R.VP8LTransform__getAlphaValue(colorMap[t1]));
            t1 = dst.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            dst.set$offset(0, t1 + 1);
            packed_pixels = C.JSInt_methods._shrOtherPositive$1(packed_pixels, bitsPerPixel);
          }
      } else
        for (y = yStart; y < yEnd; ++y)
          for (x = 0; x < width; ++x) {
            index = R.VP8LTransform__getAlphaIndex(src.$index(0, 0));
            t1 = src.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            src.set$offset(0, t1 + 1);
            if (index >>> 0 !== index || index >= colorMap.length)
              return H.ioore(colorMap, index);
            dst.$indexSet(0, 0, R.VP8LTransform__getAlphaValue(colorMap[index]));
            t1 = dst.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            dst.set$offset(0, t1 + 1);
          }
    },
    colorIndexInverseTransform$6: function(yStart, yEnd, inData, src, outData, dst) {
      var t1, bitsPerPixel, width, colorMap, countMask, bit_mask, y, packed_pixels, x, src0, dst0, t2;
      H._asInt(yStart);
      H._asInt(yEnd);
      t1 = type$.Uint32List;
      t1._as(inData);
      H._asInt(src);
      t1._as(outData);
      H._asInt(dst);
      t1 = this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsPerPixel = C.JSInt_methods._shrReceiverPositive$1(8, t1);
      width = this.xsize;
      colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods.$shl(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (t1 = inData.length, y = yStart; y < yEnd; ++y)
          for (packed_pixels = 0, x = 0; x < width; ++x, dst = dst0) {
            if ((x & countMask) >>> 0 === 0) {
              src0 = src + 1;
              if (src < 0 || src >= t1)
                return H.ioore(inData, src);
              packed_pixels = R.VP8LTransform__getARGBIndex(inData[src]);
              src = src0;
            }
            dst0 = dst + 1;
            t2 = (packed_pixels & bit_mask) >>> 0;
            if (t2 < 0 || t2 >= colorMap.length)
              return H.ioore(colorMap, t2);
            C.NativeUint32List_methods.$indexSet(outData, dst, R.VP8LTransform__getARGBValue(colorMap[t2]));
            packed_pixels = C.JSInt_methods._shrOtherPositive$1(packed_pixels, bitsPerPixel);
          }
      } else
        for (t1 = inData.length, y = yStart; y < yEnd; ++y)
          for (x = 0; x < width; ++x, dst = dst0, src = src0) {
            dst0 = dst + 1;
            colorMap.toString;
            src0 = src + 1;
            if (src < 0 || src >= t1)
              return H.ioore(inData, src);
            C.NativeUint32List_methods.$indexSet(outData, dst, R.VP8LTransform__getARGBValue(C.NativeUint32List_methods.$index(colorMap, R.VP8LTransform__getARGBIndex(inData[src]))));
          }
    },
    colorSpaceInverseTransform$4: function(yStart, yEnd, outData, data) {
      var width, t1, mask, tilesPerRow, predRow, y, m, pred, x, t2, pred0, _this = this;
      H._asInt(yStart);
      H._asInt(yEnd);
      type$.Uint32List._as(outData);
      H._asInt(data);
      width = _this.xsize;
      t1 = _this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      mask = C.JSInt_methods.$shl(1, t1) - 1;
      tilesPerRow = S.InternalVP8L_subSampleSize(width, t1);
      t1 = _this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      predRow = C.JSInt_methods.$shr(yStart, t1) * tilesPerRow;
      for (t1 = outData.length, y = yStart; y < yEnd;) {
        m = R._VP8LMultipliers$();
        for (pred = predRow, x = 0; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t2 = _this.data;
            t2.toString;
            pred0 = pred + 1;
            m.set$colorCode(J.$index$asx(t2, pred));
            pred = pred0;
          }
          t2 = data + x;
          if (t2 < 0 || t2 >= t1)
            return H.ioore(outData, t2);
          C.NativeUint32List_methods.$indexSet(outData, t2, m.transformColor$2(outData[t2], true));
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
          predRow += tilesPerRow;
      }
    },
    predictorInverseTransform$4: function(yStart, yEnd, outData, data) {
      var width, t1, t2, x, t3, mask, tilesPerRow, predModeBase, y, predModeSrc, predFunc, predModeSrc0, t4, _this = this;
      H._asInt(yStart);
      H._asInt(yEnd);
      type$.Uint32List._as(outData);
      H._asInt(data);
      width = _this.xsize;
      if (yStart === 0) {
        t1 = data - 1;
        t2 = outData.length;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(outData, t1);
        R.VP8LTransform__addPixelsEq(outData, data, R.VP8LTransform__predictor0(outData, outData[t1], 0));
        for (x = 1; x < width; ++x) {
          t1 = data + x;
          t3 = t1 - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(outData, t3);
          R.VP8LTransform__addPixelsEq(outData, t1, R.VP8LTransform__predictor1(outData, outData[t3], 0));
        }
        data += width;
        ++yStart;
      }
      t1 = _this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      mask = C.JSInt_methods.$shl(1, t1) - 1;
      tilesPerRow = S.InternalVP8L_subSampleSize(width, t1);
      t1 = _this.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      predModeBase = C.JSInt_methods.$shr(yStart, t1) * tilesPerRow;
      for (t1 = outData.length, t2 = J.getInterceptor$asx($.VP8LTransform_PREDICTORS), y = yStart; y < yEnd;) {
        t3 = data - 1;
        if (t3 < 0 || t3 >= t1)
          return H.ioore(outData, t3);
        R.VP8LTransform__addPixelsEq(outData, data, R.VP8LTransform__predictor2(outData, outData[t3], data - width));
        t3 = _this.data;
        t3.toString;
        predModeSrc = predModeBase + 1;
        t3 = J.$index$asx(t3, predModeBase);
        if (typeof t3 !== "number")
          return t3.$shr();
        predFunc = t2.$index($.VP8LTransform_PREDICTORS, C.JSNumber_methods._shrOtherPositive$1(t3, 8) & 15);
        for (x = 1; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t3 = _this.data;
            t3.toString;
            predModeSrc0 = predModeSrc + 1;
            t3 = J.$index$asx(t3, predModeSrc);
            if (typeof t3 !== "number")
              return t3.$shr();
            predFunc = t2.$index($.VP8LTransform_PREDICTORS, C.JSNumber_methods._shrOtherPositive$1(t3, 8) & 15);
            predModeSrc = predModeSrc0;
          }
          t3 = data + x;
          t4 = t3 - 1;
          if (t4 < 0 || t4 >= t1)
            return H.ioore(outData, t4);
          R.VP8LTransform__addPixelsEq(outData, t3, predFunc.call$3(outData, outData[t4], t3 - width));
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
          predModeBase += tilesPerRow;
      }
    },
    addGreenToBlueAndRed$3: function(pixels, data, dataEnd) {
      var t1, argb, green, data0;
      type$.Uint32List._as(pixels);
      H._asInt(data);
      H._asInt(dataEnd);
      for (t1 = pixels.length; data < dataEnd; data = data0) {
        if (data < 0 || data >= t1)
          return H.ioore(pixels, data);
        argb = pixels[data];
        green = C.JSInt_methods._shrOtherPositive$1(argb, 8) & 255;
        data0 = data + 1;
        pixels[data] = (argb & 4278255360 | (argb & 16711935) + (green << 16 | green) & 16711935) >>> 0;
      }
    },
    set$xsize: function(xsize) {
      this.xsize = H._asInt(xsize);
    },
    set$ysize: function(ysize) {
      this.ysize = H._asInt(ysize);
    },
    set$data: function(_, data) {
      this.data = type$.nullable_Uint32List._as(data);
    },
    set$bits: function(bits) {
      this.bits = H._asInt(bits);
    }
  };
  R._VP8LMultipliers.prototype = {
    get$greenToRed: function() {
      return J.$index$asx(this.data, 0);
    },
    get$greenToBlue: function() {
      return J.$index$asx(this.data, 1);
    },
    get$redToBlue: function() {
      return J.$index$asx(this.data, 2);
    },
    set$colorCode: function(colorCode) {
      var t1, t2;
      H._asInt(colorCode);
      t1 = this.data;
      t2 = J.getInterceptor$ax(t1);
      t2.$indexSet(t1, 0, C.JSInt_methods._shrOtherPositive$1(colorCode, 0) & 255);
      t2.$indexSet(t1, 1, C.JSInt_methods._shrOtherPositive$1(colorCode, 8) & 255);
      t2.$indexSet(t1, 2, C.JSInt_methods._shrOtherPositive$1(colorCode, 16) & 255);
    },
    transformColor$2: function(argb, inverse) {
      var green, red, newBlue, newRed, t1, t2, _this = this;
      H._asInt(argb);
      H._asBool(inverse);
      green = C.JSInt_methods._shrOtherPositive$1(argb, 8) & 255;
      red = C.JSInt_methods._shrOtherPositive$1(argb, 16) & 255;
      newBlue = argb & 255;
      if (inverse) {
        newRed = red + _this.colorTransformDelta$2(_this.get$greenToRed(), green) >>> 0 & 255;
        t1 = _this.colorTransformDelta$2(_this.get$greenToBlue(), green);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = _this.colorTransformDelta$2(_this.get$redToBlue(), newRed);
        if (typeof t2 !== "number")
          return H.iae(t2);
        newBlue = (newBlue + t1 >>> 0) + t2 >>> 0 & 255;
      } else {
        t1 = _this.colorTransformDelta$2(_this.get$greenToRed(), green);
        if (typeof t1 !== "number")
          return H.iae(t1);
        newRed = red - t1 & 255;
        t1 = _this.colorTransformDelta$2(_this.get$greenToBlue(), green);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = _this.colorTransformDelta$2(_this.get$redToBlue(), red);
        if (typeof t2 !== "number")
          return H.iae(t2);
        newBlue = newBlue - t1 - t2 & 255;
      }
      return (argb & 4278255360 | newRed << 16 | newBlue) >>> 0;
    },
    colorTransformDelta$2: function(colorPred, color) {
      H._asInt(colorPred);
      H._asInt(color);
      return C.JSInt_methods._shrOtherPositive$1(Z.int32ToUint32(Z.uint8ToInt8(colorPred) * Z.uint8ToInt8(color)), 5);
    }
  };
  S.WebPAlpha.prototype = {
    WebPAlpha$3: function(input, width, height) {
      var t2, t3, _this = this,
        t1 = _this.input,
        b = t1.readByte$0();
      _this.method = b & 3;
      _this.filter = C.JSInt_methods._shrOtherPositive$1(b, 2) & 3;
      _this.preProcessing = C.JSInt_methods._shrOtherPositive$1(b, 4) & 3;
      _this.rsrv = C.JSInt_methods._shrOtherPositive$1(b, 6) & 3;
      if (H.boolConversionCheck(_this.get$isValid()))
        if (H.boolConversionCheck(J.$eq$(_this.method, 0))) {
          t2 = _this.width;
          t3 = _this.height;
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1 = J.get$length$asx(t1);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (t1 < t2 * t3)
            _this.rsrv = 1;
        } else if (H.boolConversionCheck(J.$eq$(_this.method, 1))) {
          if (!H.boolConversionCheck(_this._decodeAlphaHeader$0()))
            _this.rsrv = 1;
        } else
          _this.rsrv = 1;
    },
    get$isValid: function() {
      var _this = this,
        t1 = _this.method;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (!(t1 < 0))
        if (!(t1 > 1)) {
          t1 = _this.filter;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (!(t1 >= 4)) {
            t1 = _this.preProcessing;
            if (typeof t1 !== "number")
              return t1.$gt();
            t1 = t1 > 1 || !H.boolConversionCheck(J.$eq$(_this.rsrv, 0));
          } else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    decode$3: function(row, numRows, output) {
      var unfilterFunc, t1, offset, t2, t3, _this = this;
      H._asInt(row);
      H._asInt(numRows);
      type$.Uint8List._as(output);
      if (!H.boolConversionCheck(_this.get$isValid()))
        return false;
      unfilterFunc = C.JSArray_methods.$index(C.List_HHa, _this.filter);
      if (H.boolConversionCheck(J.$eq$(_this.method, 0))) {
        t1 = _this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        offset = row * t1;
        t2 = _this.input;
        t3 = t2.buffer;
        t2 = t2.get$position();
        if (typeof t2 !== "number")
          return t2.$add();
        C.NativeUint8List_methods.setRange$4(output, offset, numRows * t1, t3, t2 + offset);
      } else if (!H.boolConversionCheck(_this._decodeAlphaImageStream$2(row + numRows, output)))
        return false;
      if (unfilterFunc != null) {
        t1 = _this.width;
        unfilterFunc.call$6(t1, _this.height, t1, row, numRows, output);
      }
      if (H.boolConversionCheck(J.$eq$(_this.preProcessing, 1)))
        if (!H.boolConversionCheck(_this._dequantizeLevels$5(output, _this.width, _this.height, row, numRows)))
          return false;
      if (row + numRows === _this.height)
        _this.isAlphaDecoded = true;
      return true;
    },
    _dequantizeLevels$5: function(data, width, height, row, num_rows) {
      type$.Uint8List._as(data);
      H._asInt(width);
      H._asInt(height);
      H._asInt(row);
      H._asInt(num_rows);
      if (width <= 0 || height <= 0 || row < 0 || num_rows < 0 || row + num_rows > height)
        return false;
      return true;
    },
    _decodeAlphaImageStream$2: function(lastRow, output) {
      var t1, t2, _this = this;
      H._asInt(lastRow);
      type$.Uint8List._as(output);
      _this.get$_vp8l().set$opaque(output);
      if (H.boolConversionCheck(_this._use8bDecode))
        t1 = _this.get$_vp8l().decodeAlphaData$3(_this.get$_vp8l().webp.width, _this.get$_vp8l().webp.height, lastRow);
      else {
        t1 = _this.get$_vp8l();
        t2 = _this.get$_vp8l().get$pixels();
        t2.toString;
        t2 = t1.decodeImageData$5(t2, _this.get$_vp8l().webp.width, _this.get$_vp8l().webp.height, lastRow, _this.get$_vp8l().get$extractAlphaRows());
        t1 = t2;
      }
      return t1;
    },
    _decodeAlphaHeader$0: function() {
      var t2, _this = this,
        webp = D.WebPInfo$(),
        t1 = _this.width;
      webp.set$width(0, t1);
      t2 = _this.height;
      webp.set$height(0, t2);
      _this.set$_vp8l(S.InternalVP8L$(_this.input, webp));
      _this.get$_vp8l().set$ioWidth(t1);
      _this.get$_vp8l().set$ioHeight(t2);
      _this.get$_vp8l().decodeImageStream$3(webp.width, webp.height, true);
      if (H.boolConversionCheck(J.$eq$(J.get$length$asx(_this.get$_vp8l().get$transforms()), 1)) && H.boolConversionCheck(J.$eq$(J.$index$asx(_this.get$_vp8l().get$transforms(), 0).type, 3)) && H.boolConversionCheck(_this.get$_vp8l().is8bOptimizable$0())) {
        _this._use8bDecode = true;
        _this.get$_vp8l().allocateInternalBuffers8b$0();
      } else {
        _this._use8bDecode = false;
        _this.get$_vp8l().allocateInternalBuffers32b$0();
      }
      return true;
    },
    get$_vp8l: function() {
      var t1 = this.__WebPAlpha__vp8l;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_vp8l")) : t1;
    },
    set$_vp8l: function(t1) {
      this.__WebPAlpha__vp8l = type$.InternalVP8L._as(t1);
    }
  };
  X.WebPFrame.prototype = {
    set$clearFrame: function(t1) {
      H._asBool(t1);
    },
    WebPFrame$2: function(input, size) {
      var _this = this,
        b = input.readByte$0();
      _this._reserved = 0;
      _this.set$clearFrame((b & 1) !== 0);
      _this.set$_framePosition(input.get$position());
      _this.set$_frameSize(size - 16);
    },
    get$isValid: function() {
      return J.$eq$(this._reserved, 0);
    },
    get$_framePosition: function() {
      var t1 = this.__WebPFrame__framePosition;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_framePosition")) : t1;
    },
    set$_framePosition: function(t1) {
      this.__WebPFrame__framePosition = H._asInt(t1);
    },
    get$_frameSize: function() {
      var t1 = this.__WebPFrame__frameSize;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_frameSize")) : t1;
    },
    set$_frameSize: function(t1) {
      this.__WebPFrame__frameSize = H._asInt(t1);
    }
  };
  X.InternalWebPFrame.prototype = {
    get$framePosition: function() {
      return this.get$_framePosition();
    },
    get$frameSize: function() {
      return this.get$_frameSize();
    }
  };
  B.HuffmanTree.prototype = {
    get$tree: function() {
      var t1 = this.__HuffmanTree_tree;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("tree")) : t1;
    },
    set$tree: function(t1) {
      this.__HuffmanTree_tree = type$.Int32List._as(t1);
    },
    HuffmanTree$1: function(numLeaves) {
      this._init$1(numLeaves);
    },
    _init$1: function(numLeaves) {
      var t1, t2, _this = this;
      H._asInt(numLeaves);
      if (numLeaves === 0)
        return false;
      t1 = (numLeaves << 1 >>> 0) - 1;
      _this.maxNodes = t1;
      _this.set$tree(H.NativeInt32List_NativeInt32List(t1 << 1 >>> 0));
      J.$indexSet$ax(_this.get$tree(), 1, -1);
      _this.numNodes = 1;
      t1 = _this.lutBits;
      t2 = J.getInterceptor$asx(t1);
      t2.fillRange$3(t1, 0, t2.get$length(t1), 255);
      return true;
    },
    buildImplicit$2: function(codeLengths, codeLengthsSize) {
      var t1, numSymbols, rootSymbol, symbol, t2, codes, t3, _this = this;
      type$.List_int._as(codeLengths);
      H._asInt(codeLengthsSize);
      for (t1 = J.getInterceptor$asx(codeLengths), numSymbols = 0, rootSymbol = 0, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        t2 = t1.$index(codeLengths, symbol);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 0) {
          ++numSymbols;
          rootSymbol = symbol;
        }
      }
      if (!H.boolConversionCheck(_this._init$1(numSymbols)))
        return false;
      if (numSymbols === 1) {
        if (rootSymbol < 0 || rootSymbol >= codeLengthsSize)
          return false;
        return _this._addSymbol$3(rootSymbol, 0, 0);
      }
      codes = H.NativeInt32List_NativeInt32List(codeLengthsSize);
      if (!H.boolConversionCheck(_this._huffmanCodeLengthsToCodes$3(codeLengths, codeLengthsSize, codes)))
        return false;
      for (t2 = codes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        t3 = t1.$index(codeLengths, symbol);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          if (symbol >= t2)
            return H.ioore(codes, symbol);
          if (!H.boolConversionCheck(_this._addSymbol$3(symbol, codes[symbol], t1.$index(codeLengths, symbol))))
            return false;
        }
      }
      return _this._isFull$0();
    },
    buildExplicit$5: function(codeLengths, codes, symbols, maxSymbol, numSymbols) {
      var t2, t3, i, t4, _this = this,
        t1 = type$.List_int;
      t1._as(codeLengths);
      t1._as(codes);
      t1._as(symbols);
      H._asInt(maxSymbol);
      H._asInt(numSymbols);
      if (!H.boolConversionCheck(_this._init$1(numSymbols)))
        return false;
      for (t1 = J.getInterceptor$asx(codes), t2 = J.getInterceptor$asx(symbols), t3 = J.getInterceptor$asx(codeLengths), i = 0; i < numSymbols; ++i)
        if (!H.boolConversionCheck(J.$eq$(t1.$index(codes, i), -1))) {
          t4 = t2.$index(symbols, i);
          if (typeof t4 !== "number")
            return t4.$lt();
          if (!(t4 < 0)) {
            t4 = t2.$index(symbols, i);
            if (typeof t4 !== "number")
              return t4.$ge();
            t4 = t4 >= maxSymbol;
          } else
            t4 = true;
          if (t4)
            return _this._isFull$0();
          if (!H.boolConversionCheck(_this._addSymbol$3(t2.$index(symbols, i), t1.$index(codes, i), t3.$index(codeLengths, i))))
            return _this._isFull$0();
        }
      return _this._isFull$0();
    },
    readSymbol$1: function(br) {
      var bits, newBitPos, lut_ix, lut_bits, t1, node, _this = this;
      type$.VP8LBitReader._as(br);
      bits = br.prefetchBits$0();
      newBitPos = br.bitPos;
      lut_ix = bits & 127;
      lut_bits = J.$index$asx(_this.lutBits, lut_ix);
      if (lut_bits <= 7) {
        t1 = br.bitPos;
        if (typeof t1 !== "number")
          return t1.$add();
        br.set$bitPos(t1 + lut_bits);
        return J.$index$asx(_this.lutSymbol, lut_ix);
      }
      t1 = J.$index$asx(_this.lutJump, lut_ix);
      if (typeof t1 !== "number")
        return H.iae(t1);
      node = 0 + t1;
      newBitPos += 7;
      bits = C.JSInt_methods._shrOtherPositive$1(bits, 7);
      do {
        node = _this._nextNode$2(node, bits & 1);
        bits = bits >>> 1;
        ++newBitPos;
      } while (H.boolConversionCheck(_this._nodeIsNotLeaf$1(node)));
      br.bitPos = newBitPos;
      return _this._nodeSymbol$1(node);
    },
    _addSymbol$3: function(symbol, code, codeLength) {
      var baseCode, t1, t2, t3, t4, t5, i, idx, step, node, codeLength0, _this = this;
      H._asInt(symbol);
      H._asInt(code);
      H._asInt(codeLength);
      if (codeLength <= 7) {
        baseCode = _this._reverseBitsShort$2(code, codeLength);
        for (t1 = C.JSInt_methods.$shl(1, 7 - codeLength), t2 = _this.lutSymbol, t3 = J.getInterceptor$ax(t2), t4 = _this.lutBits, t5 = J.getInterceptor$ax(t4), i = 0; i < t1; ++i) {
          idx = (baseCode | C.JSInt_methods.$shl(i, codeLength)) >>> 0;
          t3.$indexSet(t2, idx, symbol);
          t5.$indexSet(t4, idx, codeLength);
        }
      } else
        baseCode = _this._reverseBitsShort$2(C.JSInt_methods.$shr(code, codeLength - 7), 7);
      for (t1 = _this.lutJump, t2 = J.getInterceptor$ax(t1), step = 7, node = 0; codeLength0 = codeLength - 1, codeLength > 0; codeLength = codeLength0) {
        t3 = _this.maxNodes;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (node >= t3)
          return false;
        if (H.boolConversionCheck(_this._nodeIsEmpty$1(node))) {
          if (H.boolConversionCheck(_this._isFull$0()))
            return false;
          _this._assignChildren$1(node);
        } else if (!H.boolConversionCheck(_this._nodeIsNotLeaf$1(node)))
          return false;
        t3 = _this._nodeChildren$1(node);
        t4 = C.JSInt_methods.$shr(code, codeLength0);
        if (typeof t3 !== "number")
          return t3.$add();
        node += t3 + (t4 & 1);
        --step;
        if (step === 0)
          t2.$indexSet(t1, baseCode, node);
      }
      if (H.boolConversionCheck(_this._nodeIsEmpty$1(node)))
        _this._nodeSetChildren$2(node, 0);
      else if (H.boolConversionCheck(_this._nodeIsNotLeaf$1(node)))
        return false;
      _this._nodeSetSymbol$2(node, symbol);
      return true;
    },
    _reverseBitsShort$2: function(bits, numBits) {
      var t1, t2;
      H._asInt(bits);
      H._asInt(numBits);
      t1 = C.List_cGl[bits & 15];
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = C.JSInt_methods._shrOtherPositive$1(bits, 4);
      if (t2 >= 16)
        return H.ioore(C.List_cGl, t2);
      t2 = C.List_cGl[t2];
      if (typeof t2 !== "number")
        return H.iae(t2);
      return C.JSInt_methods._shrReceiverPositive$1((t1 << 4 | t2) >>> 0, 8 - numBits);
    },
    _isFull$0: function() {
      return J.$eq$(this.numNodes, this.maxNodes);
    },
    _nextNode$2: function(node, rightChild) {
      var t1;
      H._asInt(node);
      H._asInt(rightChild);
      t1 = this._nodeChildren$1(node);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return node + t1 + rightChild;
    },
    _nodeSymbol$1: function(node) {
      H._asInt(node);
      return J.$index$asx(this.get$tree(), node << 1 >>> 0);
    },
    _nodeSetSymbol$2: function(node, symbol) {
      H._asInt(node);
      H._asInt(symbol);
      J.$indexSet$ax(this.get$tree(), node << 1 >>> 0, symbol);
    },
    _nodeChildren$1: function(node) {
      H._asInt(node);
      return J.$index$asx(this.get$tree(), (node << 1 >>> 0) + 1);
    },
    _nodeSetChildren$2: function(node, children) {
      H._asInt(node);
      H._asInt(children);
      J.$indexSet$ax(this.get$tree(), (node << 1 >>> 0) + 1, children);
    },
    _nodeIsNotLeaf$1: function(node) {
      H._asInt(node);
      return !H.boolConversionCheck(J.$eq$(J.$index$asx(this.get$tree(), (node << 1 >>> 0) + 1), 0));
    },
    _nodeIsEmpty$1: function(node) {
      var t1;
      H._asInt(node);
      t1 = J.$index$asx(this.get$tree(), (node << 1 >>> 0) + 1);
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 0;
    },
    _assignChildren$1: function(node) {
      var children, t1, _this = this;
      H._asInt(node);
      children = _this.numNodes;
      _this._nodeSetChildren$2(node, children - node);
      t1 = _this.numNodes;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$numNodes(t1 + 2);
      _this._nodeSetChildren$2(children, -1);
      _this._nodeSetChildren$2(children + 1, -1);
    },
    _huffmanCodeLengthsToCodes$3: function(codeLengths, codeLengthsSize, huffCodes) {
      var codeLengthHist, nextCodes, symbol, maxCodeLength, t2, t3, codeLen, currCode, t4,
        t1 = type$.List_int;
      t1._as(codeLengths);
      H._asInt(codeLengthsSize);
      t1._as(huffCodes);
      codeLengthHist = H.NativeInt32List_NativeInt32List(16);
      nextCodes = H.NativeInt32List_NativeInt32List(16);
      for (t1 = J.getInterceptor$asx(codeLengths), symbol = 0, maxCodeLength = 0; symbol < codeLengthsSize; ++symbol) {
        t2 = t1.$index(codeLengths, symbol);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > maxCodeLength)
          maxCodeLength = t1.$index(codeLengths, symbol);
      }
      if (maxCodeLength > 15)
        return false;
      for (symbol = 0; symbol < codeLengthsSize; ++symbol) {
        t2 = t1.$index(codeLengths, symbol);
        t3 = C.NativeInt32List_methods.$index(codeLengthHist, t2);
        if (typeof t3 !== "number")
          return t3.$add();
        C.NativeInt32List_methods.$indexSet(codeLengthHist, t2, t3 + 1);
      }
      t2 = codeLengthHist.length;
      if (0 >= t2)
        return H.ioore(codeLengthHist, 0);
      codeLengthHist[0] = 0;
      t3 = nextCodes.length;
      if (0 >= t3)
        return H.ioore(nextCodes, 0);
      nextCodes[0] = -1;
      for (codeLen = 1, currCode = 0; codeLen <= maxCodeLength; ++codeLen) {
        t4 = codeLen - 1;
        if (t4 >= t2)
          return H.ioore(codeLengthHist, t4);
        t4 = codeLengthHist[t4];
        if (typeof t4 !== "number")
          return H.iae(t4);
        currCode = currCode + t4 << 1 >>> 0;
        if (codeLen >= t3)
          return H.ioore(nextCodes, codeLen);
        nextCodes[codeLen] = currCode;
      }
      for (t2 = J.getInterceptor$ax(huffCodes), symbol = 0; symbol < codeLengthsSize; ++symbol) {
        t3 = t1.$index(codeLengths, symbol);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          t3 = t1.$index(codeLengths, symbol);
          t4 = C.NativeInt32List_methods.$index(nextCodes, t3);
          if (typeof t4 !== "number")
            return t4.$add();
          C.NativeInt32List_methods.$indexSet(nextCodes, t3, t4 + 1);
          t2.$indexSet(huffCodes, symbol, t4);
        } else
          t2.$indexSet(huffCodes, symbol, -1);
      }
      return true;
    },
    set$numNodes: function(numNodes) {
      this.numNodes = H._asInt(numNodes);
    }
  };
  B.HTreeGroup.prototype = {
    $index: function(_, index) {
      return J.$index$asx(this.htrees, H._asInt(index));
    }
  };
  D.WebPInfo.prototype = {
    set$iccp: function(iccp) {
      H._asString(iccp);
    },
    set$exif: function(exif) {
      H._asString(exif);
    },
    set$xmp: function(xmp) {
      H._asString(xmp);
    },
    set$animLoopCount: function(animLoopCount) {
      H._asInt(animLoopCount);
    }
  };
  D.InternalWebPInfo.prototype = {
    get$frame: function() {
      return this._frame;
    },
    set$frame: function(value) {
      this._frame = H._asInt(value);
    },
    get$numFrames: function() {
      return this._numFrames;
    },
    set$numFrames: function(value) {
      this._numFrames = H._asInt(value);
    },
    get$alphaData: function() {
      return this._webp_info$_alphaData;
    },
    set$alphaData: function(buffer) {
      this._webp_info$_alphaData = type$.nullable_InputBuffer._as(buffer);
    },
    set$alphaSize: function(value) {
      H._asInt(value);
    },
    get$vp8Position: function() {
      return this._vp8Position;
    },
    set$vp8Position: function(value) {
      this._vp8Position = H._asInt(value);
    },
    get$vp8Size: function() {
      return this._vp8Size;
    },
    set$vp8Size: function(value) {
      this._vp8Size = H._asInt(value);
    }
  };
  E.WebPDecoder.prototype = {
    WebPDecoder$1: function(bytes) {
      if (bytes != null)
        this.startDecode$1(bytes);
    },
    isValidFile$1: function(bytes) {
      var t1 = Z.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
      this._webp_decoder$_input = t1;
      if (!H.boolConversionCheck(this._getHeader$1(t1)))
        return false;
      return true;
    },
    startDecode$1: function(bytes) {
      var t2, _this = this, _null = null,
        t1 = Z.InputBuffer$(type$.List_int._as(bytes), false, _null, 0);
      _this._webp_decoder$_input = t1;
      if (!H.boolConversionCheck(_this._getHeader$1(t1)))
        return _null;
      t1 = D.InternalWebPInfo$();
      _this._info = t1;
      t2 = _this._webp_decoder$_input;
      t2.toString;
      if (!H.boolConversionCheck(_this._getInfo$2(t2, t1)))
        return _null;
      t1 = _this._info;
      switch (t1.format) {
        case 3:
          t1.set$numFrames(J.get$length$asx(t1.frames));
          return _this._info;
        case 2:
          t2 = _this._webp_decoder$_input;
          t2.toString;
          J.set$offset$z(t2, t1.get$vp8Position());
          t1 = _this._webp_decoder$_input;
          t1.toString;
          t2 = _this._info;
          t2.toString;
          if (!H.boolConversionCheck(S.VP8L$(t1, t2).decodeHeader$0()))
            return _null;
          t1 = _this._info;
          t1.set$numFrames(J.get$length$asx(t1.frames));
          return _this._info;
        case 1:
          t2 = _this._webp_decoder$_input;
          t2.toString;
          J.set$offset$z(t2, t1.get$vp8Position());
          t1 = _this._webp_decoder$_input;
          t1.toString;
          t2 = _this._info;
          t2.toString;
          if (!H.boolConversionCheck(A.VP8$(t1, t2).decodeHeader$0()))
            return _null;
          t1 = _this._info;
          t1.set$numFrames(J.get$length$asx(t1.frames));
          return _this._info;
      }
      return _null;
    },
    decodeFrame$1: function(frame) {
      var t1, f, data, _this = this;
      H._asInt(frame);
      if (_this._webp_decoder$_input == null || _this._info == null)
        return null;
      t1 = _this._info;
      if (H.boolConversionCheck(t1.hasAnimation)) {
        t1 = J.get$length$asx(t1.frames);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (frame >= t1 || frame < 0)
          return null;
        f = type$.InternalWebPFrame._as(J.$index$asx(_this._info.frames, frame));
        t1 = _this._webp_decoder$_input;
        t1.toString;
        return _this._decodeFrame$2$frame(t1.subset$2$position(f.get$frameSize(), f.get$framePosition()), frame);
      }
      if (H.boolConversionCheck(J.$eq$(t1.format, 2))) {
        t1 = _this._webp_decoder$_input;
        t1.toString;
        data = t1.subset$2$position(_this._info.get$vp8Size(), _this._info.get$vp8Position());
        t1 = _this._info;
        t1.toString;
        return S.VP8L$(data, t1).decode$0();
      } else if (H.boolConversionCheck(J.$eq$(_this._info.format, 1))) {
        t1 = _this._webp_decoder$_input;
        t1.toString;
        data = t1.subset$2$position(_this._info.get$vp8Size(), _this._info.get$vp8Position());
        t1 = _this._info;
        t1.toString;
        return A.VP8$(data, t1).decode$0();
      }
      return null;
    },
    decodeImage$1: function(bytes) {
      var _this = this;
      _this.startDecode$1(type$.List_int._as(bytes));
      _this._info.set$frame(0);
      _this._info.set$numFrames(1);
      return _this.decodeFrame$1(0);
    },
    _decodeFrame$2$frame: function(input, frame) {
      var webp, t1, t2, t3, f, data, _this = this, _null = null;
      type$.InputBuffer._as(input);
      H._asInt(frame);
      webp = D.InternalWebPInfo$();
      if (!H.boolConversionCheck(_this._getInfo$2(input, webp)))
        return _null;
      if (H.boolConversionCheck(J.$eq$(webp.format, 0)))
        return _null;
      webp.set$frame(_this._info.get$frame());
      webp.set$numFrames(_this._info.get$numFrames());
      if (H.boolConversionCheck(webp.hasAnimation)) {
        t1 = webp.frames;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (frame >= t3 || frame < 0)
          return _null;
        f = type$.InternalWebPFrame._as(t2.$index(t1, frame));
        return _this._decodeFrame$2$frame(input.subset$2$position(f.get$frameSize(), f.get$framePosition()), frame);
      } else {
        data = input.subset$2$position(webp.get$vp8Size(), webp.get$vp8Position());
        if (H.boolConversionCheck(J.$eq$(webp.format, 2)))
          return S.VP8L$(data, webp).decode$0();
        else if (H.boolConversionCheck(J.$eq$(webp.format, 1)))
          return A.VP8$(data, webp).decode$0();
      }
      return _null;
    },
    _getHeader$1: function(input) {
      type$.InputBuffer._as(input);
      if (input.readString$1(4) !== "RIFF")
        return false;
      input.readUint32$0();
      if (input.readString$1(4) !== "WEBP")
        return false;
      return true;
    },
    _getInfo$2: function(input, webp) {
      var found, tag, size, diskSize, p, t1, remainder;
      type$.InputBuffer._as(input);
      type$.nullable_InternalWebPInfo._as(webp);
      found = false;
      while (true) {
        if (!(!H.boolConversionCheck(input.get$isEOS()) && !found))
          break;
        tag = input.readString$1(4);
        size = input.readUint32$0();
        diskSize = C.JSInt_methods._shrOtherPositive$1(size + 1, 1) << 1 >>> 0;
        p = input.get$position();
        switch (tag) {
          case "VP8X":
            if (!H.boolConversionCheck(this._getVp8xInfo$2(input, webp)))
              return false;
            break;
          case "VP8 ":
            webp.toString;
            webp.set$vp8Position(input.get$position());
            webp.set$vp8Size(size);
            webp.format = 1;
            found = true;
            break;
          case "VP8L":
            webp.toString;
            webp.set$vp8Position(input.get$position());
            webp.set$vp8Size(size);
            webp.format = 2;
            found = true;
            break;
          case "ALPH":
            webp.toString;
            webp.set$alphaData(Z.InputBuffer$(input.buffer, input.bigEndian, null, 0));
            t1 = webp.get$alphaData();
            t1.toString;
            J.set$offset$z(t1, input.offset);
            webp.set$alphaSize(size);
            input.skip$1(0, diskSize);
            break;
          case "ANIM":
            webp.format = 3;
            if (!H.boolConversionCheck(this._getAnimInfo$2(input, webp)))
              return false;
            break;
          case "ANMF":
            if (!H.boolConversionCheck(this._getAnimFrameInfo$3(input, webp, size)))
              return false;
            break;
          case "ICCP":
            webp.toString;
            webp.set$iccp(input.readString$1(size));
            break;
          case "EXIF":
            webp.toString;
            webp.set$exif(input.readString$1(size));
            break;
          case "XMP ":
            webp.toString;
            webp.set$xmp(input.readString$1(size));
            break;
          default:
            P.print("UNKNOWN WEBP TAG: " + tag);
            input.skip$1(0, diskSize);
            break;
        }
        t1 = input.get$position();
        if (typeof t1 !== "number")
          return t1.$sub();
        remainder = diskSize - (t1 - p);
        if (remainder > 0)
          input.skip$1(0, remainder);
      }
      if (!H.boolConversionCheck(webp.hasAlpha))
        webp.hasAlpha = webp.get$alphaData() != null;
      return !H.boolConversionCheck(J.$eq$(webp.format, 0));
    },
    _getVp8xInfo$2: function(input, webp) {
      var b, t1, t2, t3, t4;
      type$.InputBuffer._as(input);
      type$.nullable_WebPInfo._as(webp);
      b = input.readByte$0();
      if ((b & 192) !== 0)
        return false;
      t1 = C.JSInt_methods._shrOtherPositive$1(b, 4);
      t2 = C.JSInt_methods._shrOtherPositive$1(b, 1);
      if ((b & 1) !== 0)
        return false;
      if (!H.boolConversionCheck(J.$eq$(input.readUint24$0(), 0)))
        return false;
      t3 = input.readUint24$0();
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = input.readUint24$0();
      if (typeof t4 !== "number")
        return t4.$add();
      webp.width = t3 + 1;
      webp.height = t4 + 1;
      webp.hasAnimation = (t2 & 1) !== 0;
      webp.hasAlpha = (t1 & 1) !== 0;
      return true;
    },
    _getAnimInfo$2: function(input, webp) {
      var c, a;
      type$.InputBuffer._as(input);
      type$.WebPInfo._as(webp);
      c = input.readUint32$0();
      webp.set$animLoopCount(input.readUint16$0());
      a = K.getRed(c);
      webp.set$backgroundColor(K.getColor(K.getGreen(c), K.getBlue(c), K.getAlpha(c), a));
      return true;
    },
    _getAnimFrameInfo$3: function(input, webp, size) {
      var frame;
      type$.InputBuffer._as(input);
      type$.nullable_WebPInfo._as(webp);
      frame = X.InternalWebPFrame$(input, H._asInt(size));
      if (!H.boolConversionCheck(frame.get$isValid()))
        return false;
      J.add$1$ax(webp.frames, frame);
      return true;
    }
  };
  F.HdrImage.prototype = {
    HdrImage$fromImage$3$bitsPerSample$type: function(other, bitsPerSample, type) {
      var rgb, t3, y, si, x, t4, si0, t5, _this = this,
        t1 = other.width,
        t2 = other.height;
      _this.addSlice$1(K.HdrSlice$("R", t1, t2, type, bitsPerSample));
      _this.addSlice$1(K.HdrSlice$("G", t1, t2, type, bitsPerSample));
      _this.addSlice$1(K.HdrSlice$("B", t1, t2, type, bitsPerSample));
      if (H.boolConversionCheck(J.$eq$(other.channels, C.Channels_1)))
        _this.addSlice$1(K.HdrSlice$("A", t1, t2, type, bitsPerSample));
      rgb = other.getBytes$0();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = rgb.length;
      y = 0;
      si = 0;
      for (; y < t2; ++y) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 0;
        for (; x < t1; ++x) {
          t4 = _this.red;
          t4.toString;
          si0 = si + 1;
          if (si < 0 || si >= t3)
            return H.ioore(rgb, si);
          t5 = rgb[si];
          if (typeof t5 !== "number")
            return t5.$div();
          t4.setFloat$3(x, y, t5 / 255);
          t5 = _this.green;
          t5.toString;
          si = si0 + 1;
          if (si0 < 0 || si0 >= t3)
            return H.ioore(rgb, si0);
          t4 = rgb[si0];
          if (typeof t4 !== "number")
            return t4.$div();
          t5.setFloat$3(x, y, t4 / 255);
          t4 = _this.blue;
          t4.toString;
          si0 = si + 1;
          if (si < 0 || si >= t3)
            return H.ioore(rgb, si);
          t5 = rgb[si];
          if (typeof t5 !== "number")
            return t5.$div();
          t4.setFloat$3(x, y, t5 / 255);
          t4 = _this.alpha;
          if (t4 != null) {
            si = si0 + 1;
            if (si0 < 0 || si0 >= t3)
              return H.ioore(rgb, si0);
            t5 = rgb[si0];
            if (typeof t5 !== "number")
              return t5.$div();
            t4.setFloat$3(x, y, t5 / 255);
          } else
            si = si0;
        }
      }
    },
    get$hasColor: function() {
      return this.red != null || this.green != null || this.blue != null;
    },
    get$width: function(_) {
      var t1 = this.slices;
      return H.boolConversionCheck(J.get$isEmpty$asx(t1)) ? 0 : J.get$first$ax(t1.get$values()).width;
    },
    get$height: function(_) {
      var t1 = this.slices;
      return H.boolConversionCheck(J.get$isEmpty$asx(t1)) ? 0 : J.get$first$ax(t1.get$values()).height;
    },
    getRed$2: function(x, y) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      t1 = this.red;
      if (t1 != null) {
        t1 = H.boolConversionCheck(t1.get$isFloat());
        t2 = this.red;
        t1 = t1 ? t2.getFloat$2(x, y) : t2.getInt$2(x, y);
      } else
        t1 = 0;
      return t1;
    },
    setRed$3: function(x, y, c) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      H._asNum(c);
      t1 = this.red;
      if (t1 != null) {
        t1 = H.boolConversionCheck(t1.get$isFloat());
        t2 = this.red;
        if (t1)
          t2.setFloat$3(x, y, c);
        else {
          t2.toString;
          t2.setInt$3(x, y, H._asInt(c));
        }
      }
    },
    getGreen$2: function(x, y) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      t1 = this.green;
      if (t1 != null) {
        t1 = H.boolConversionCheck(t1.get$isFloat());
        t2 = this.green;
        t1 = t1 ? t2.getFloat$2(x, y) : t2.getInt$2(x, y);
      } else
        t1 = 0;
      return t1;
    },
    setGreen$3: function(x, y, c) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      H._asNum(c);
      if (this.green != null) {
        t1 = H.boolConversionCheck(this.red.get$isFloat());
        t2 = this.green;
        if (t1)
          t2.setFloat$3(x, y, c);
        else {
          t2.toString;
          t2.setInt$3(x, y, H._asInt(c));
        }
      }
    },
    getBlue$2: function(x, y) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      t1 = this.blue;
      if (t1 != null) {
        t1 = H.boolConversionCheck(t1.get$isFloat());
        t2 = this.blue;
        t1 = t1 ? t2.getFloat$2(x, y) : t2.getInt$2(x, y);
      } else
        t1 = 0;
      return t1;
    },
    setBlue$3: function(x, y, c) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      H._asNum(c);
      if (this.green != null) {
        t1 = H.boolConversionCheck(this.blue.get$isFloat());
        t2 = this.blue;
        if (t1)
          t2.setFloat$3(x, y, c);
        else {
          t2.toString;
          t2.setInt$3(x, y, H._asInt(c));
        }
      }
    },
    setAlpha$3: function(x, y, c) {
      var t1, t2;
      H._asInt(x);
      H._asInt(y);
      H._asNum(c);
      t1 = this.alpha;
      if (t1 != null) {
        t1 = H.boolConversionCheck(t1.get$isFloat());
        t2 = this.alpha;
        if (t1)
          t2.setFloat$3(x, y, c);
        else {
          t2.toString;
          t2.setInt$3(x, y, H._asInt(c));
        }
      }
    },
    get$numberOfChannels: function() {
      return J.get$length$asx(this.slices);
    },
    hasChannel$1: function(ch) {
      return this.slices.containsKey$1(H._asStringQ(ch));
    },
    $index: function(_, ch) {
      return J.$index$asx(this.slices, H._asStringQ(ch));
    },
    addSlice$1: function(slice) {
      var ch, _this = this;
      type$.HdrSlice._as(slice);
      ch = slice.name;
      J.$indexSet$ax(_this.slices, ch, slice);
      switch (ch) {
        case "R":
          _this.red = slice;
          break;
        case "G":
          _this.green = slice;
          break;
        case "B":
          _this.blue = slice;
          break;
        case "A":
          _this.alpha = slice;
          break;
        case "Z":
          break;
      }
    }
  };
  K.HdrSlice.prototype = {
    getBytes$0: function() {
      return P.Uint8List_Uint8List$view(J.get$buffer$x(type$.TypedData._as(this.data)), 0, null);
    },
    get$isFloat: function() {
      return J.$eq$(this.type, 3);
    },
    get$_maxIntSize: function() {
      var v,
        t1 = this.bitsPerSample,
        t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, 8)))
        v = 255;
      else
        v = H.boolConversionCheck(t2.$eq(t1, 16)) ? 65535 : 4294967295;
      return H.boolConversionCheck(J.$eq$(this.type, 1)) ? v - 1 : v;
    },
    getFloat$2: function(x, y) {
      var t1, pi, t2, t3, _this = this;
      H._asInt(x);
      H._asInt(y);
      t1 = _this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = y * t1 + x;
      t1 = _this.type;
      t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, 1)) || H.boolConversionCheck(t2.$eq(t1, 0))) {
        t1 = H._asInt(J.$index$asx(_this.data, pi));
        t2 = _this.get$_maxIntSize();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 / t2;
      }
      t1 = H.boolConversionCheck(t2.$eq(t1, 3)) && H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16));
      t2 = _this.data;
      t3 = J.getInterceptor$asx(t2);
      return t1 ? Q.Half_HalfToDouble(H._asInt(t3.$index(t2, pi))) : H._asDouble(t3.$index(t2, pi));
    },
    setFloat$3: function(x, y, v) {
      var t1, pi, t2, _this = this;
      H._asInt(x);
      H._asInt(y);
      H._asNum(v);
      if (!H.boolConversionCheck(J.$eq$(_this.type, 3)))
        return;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = y * t1 + x;
      t1 = _this.data;
      t2 = J.getInterceptor$ax(t1);
      if (H.boolConversionCheck(J.$eq$(_this.bitsPerSample, 16)))
        t2.$indexSet(t1, pi, Q.Half_DoubleToHalf(v));
      else
        t2.$indexSet(t1, pi, v);
    },
    getInt$2: function(x, y) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return H._asInt(J.$index$asx(this.data, y * t1 + x));
    },
    setInt$3: function(x, y, v) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      H._asInt(v);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(this.data, y * t1 + x, v);
    }
  };
  A.hdrToImage__knee.prototype = {
    call$2: function(x, f) {
      var t1;
      H._asNum(x);
      H._asNum(f);
      t1 = P.log(x * f + 1);
      if (typeof t1 !== "number")
        return t1.$div();
      return t1 / f;
    },
    $signature: 18
  };
  A.hdrToImage__gamma.prototype = {
    call$2: function(h, m) {
      var t1,
        x = P.max(0, H._asNum(h) * H._asNum(m), type$.num);
      if (x > 1) {
        t1 = this._knee.call$2(x - 1, 0.184874);
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 1 + t1;
      }
      t1 = P.pow(x, 0.4545);
      if (typeof t1 !== "number")
        return t1.$mul();
      return t1 * 84.66;
    },
    $signature: 18
  };
  D.ICCPCompression.prototype = {
    toString$0: function(_) {
      return "ICCPCompression.deflate";
    }
  };
  D.ICCProfileData.prototype = {};
  U.Format.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.Channels.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.Image.prototype = {
    getBytes$0: function() {
      var bytes, len, i, t3, t4, j, _this = this,
        t1 = _this.data,
        t2 = J.getInterceptor$x(t1),
        rgba = P.Uint8List_Uint8List$view(t2.get$buffer(t1), 0, null);
      switch (C.Format_2) {
        case C.Format_2:
          return rgba;
        case C.Format_3:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = H.NativeUint8List_NativeUint8List(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, i, rgba[t2]);
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            C.NativeUint8List_methods.$indexSet(bytes, t3, rgba[t3]);
            if (i >= t1)
              return H.ioore(rgba, i);
            C.NativeUint8List_methods.$indexSet(bytes, t2, rgba[i]);
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, t2, rgba[t2]);
          }
          return bytes;
        case C.Format_1:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = H.NativeUint8List_NativeUint8List(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, i, rgba[t2]);
            t3 = i + 1;
            t4 = i + 2;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            C.NativeUint8List_methods.$indexSet(bytes, t3, rgba[t4]);
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            C.NativeUint8List_methods.$indexSet(bytes, t4, rgba[t3]);
            if (i >= t1)
              return H.ioore(rgba, i);
            C.NativeUint8List_methods.$indexSet(bytes, t2, rgba[i]);
          }
          return bytes;
        case C.Format_0:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = H.NativeUint8List_NativeUint8List(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, i, rgba[t2]);
            t3 = i + 1;
            if (i >= t1)
              return H.ioore(rgba, i);
            C.NativeUint8List_methods.$indexSet(bytes, t3, rgba[i]);
            t4 = i + 2;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            C.NativeUint8List_methods.$indexSet(bytes, t4, rgba[t3]);
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            C.NativeUint8List_methods.$indexSet(bytes, t2, rgba[t4]);
          }
          return bytes;
        case C.Format_4:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = H.NativeUint8List_NativeUint8List(t1 * t2 * 3);
          for (len = bytes.length, t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            if (i >= t1)
              return H.ioore(rgba, i);
            C.NativeUint8List_methods.$indexSet(bytes, j, rgba[i]);
            t2 = i + 1;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, j + 1, rgba[t2]);
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, j + 2, rgba[t2]);
          }
          return bytes;
        case C.Format_5:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = H.NativeUint8List_NativeUint8List(t1 * t2 * 3);
          for (len = bytes.length, t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, j, rgba[t2]);
            t2 = i + 1;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            C.NativeUint8List_methods.$indexSet(bytes, j + 1, rgba[t2]);
            if (i >= t1)
              return H.ioore(rgba, i);
            C.NativeUint8List_methods.$indexSet(bytes, j + 2, rgba[i]);
          }
          return bytes;
        case C.Format_6:
          t3 = _this.width;
          t4 = _this.height;
          if (typeof t3 !== "number")
            return t3.$mul();
          if (typeof t4 !== "number")
            return H.iae(t4);
          bytes = H.NativeUint8List_NativeUint8List(t3 * t4);
          for (len = _this.get$length(_this), i = 0; i < len; ++i)
            C.NativeUint8List_methods.$indexSet(bytes, i, K.getLuminance(t2.$index(t1, i)));
          return bytes;
      }
    },
    fill$1: function(color) {
      var t1, t2;
      H._asInt(color);
      t1 = this.data;
      t2 = J.getInterceptor$asx(t1);
      t2.fillRange$3(t1, 0, t2.get$length(t1), color);
      return this;
    },
    get$length: function(_) {
      return J.get$length$asx(this.data);
    },
    $index: function(_, index) {
      return J.$index$asx(this.data, H._asInt(index));
    },
    $indexSet: function(_, index, color) {
      J.$indexSet$ax(this.data, H._asInt(index), H._asInt(color));
    },
    boundsSafe$2: function(x, y) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      if (x >= 0) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (x < t1)
          if (y >= 0) {
            t1 = this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = y < t1;
          } else
            t1 = false;
        else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    getPixel$2: function(x, y) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return J.$index$asx(this.data, y * t1 + x);
    },
    setPixel$3: function(x, y, color) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      H._asInt(color);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(this.data, y * t1 + x, color);
    },
    setPixelSafe$3: function(x, y, color) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      H._asInt(color);
      if (H.boolConversionCheck(this.boundsSafe$2(x, y))) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        J.$indexSet$ax(this.data, y * t1 + x, color);
      }
    },
    setPixelRgba$6: function(x, y, r, g, b, a) {
      var t1;
      H._asInt(x);
      H._asInt(y);
      H._asInt(r);
      H._asInt(g);
      H._asInt(b);
      H._asInt(a);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      J.$indexSet$ax(this.data, y * t1 + x, K.getColor(r, g, b, a));
    }
  };
  K.ImageException.prototype = {
    toString$0: function(_) {
      return "ImageException: " + H.S(this.message);
    },
    $isException: 1
  };
  Z.InputBuffer.prototype = {
    get$position: function() {
      var t1 = this.offset,
        t2 = this.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 - t2;
    },
    get$length: function(_) {
      var t1 = this.end,
        t2 = this.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 - t2;
    },
    get$isEOS: function() {
      var t1 = this.offset,
        t2 = this.end;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 >= t2;
    },
    rewind$0: function() {
      this.set$offset(0, this.start);
    },
    $index: function(_, index) {
      var t1, t2;
      H._asInt(index);
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      return J.$index$asx(t1, t2 + index);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      H._asInt(index);
      H._asInt(value);
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      J.$indexSet$ax(t1, t2 + index, value);
      return value;
    },
    memcpy$4: function(start, $length, other, offset) {
      var t1, t2, t3, t4, t5;
      H._asInt(start);
      H._asInt($length);
      H._asInt(offset);
      t1 = this.buffer;
      t2 = this.offset;
      t3 = J.getInterceptor$ax(t1);
      if (other instanceof Z.InputBuffer) {
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += start;
        t4 = other.buffer;
        t5 = other.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t3.setRange$4(t1, t2, t2 + $length, t4, t5 + offset);
      } else {
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += start;
        t3.setRange$4(t1, t2, t2 + $length, type$.List_int._as(other), offset);
      }
    },
    memcpy$3: function(start, $length, other) {
      return this.memcpy$4(start, $length, other, 0);
    },
    memset$3: function(start, $length, value) {
      var t1, t2;
      H._asInt(start);
      H._asInt($length);
      H._asInt(value);
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += start;
      J.fillRange$3$ax(t1, t2, t2 + $length, value);
    },
    subset$3$offset$position: function(count, offset, position) {
      var t1, pos, _this = this;
      H._asInt(count);
      H._asIntQ(position);
      H._asInt(offset);
      if (position != null) {
        t1 = _this.start;
        if (typeof t1 !== "number")
          return t1.$add();
        pos = t1 + position;
      } else
        pos = _this.offset;
      return Z.InputBuffer$(_this.buffer, _this.bigEndian, count, pos + offset);
    },
    subset$1: function(count) {
      return this.subset$3$offset$position(count, 0, null);
    },
    subset$2$position: function(count, position) {
      return this.subset$3$offset$position(count, 0, position);
    },
    subset$2$offset: function(count, offset) {
      return this.subset$3$offset$position(count, offset, null);
    },
    peekBytes$2: function(count, offset) {
      return this.subset$2$offset(H._asInt(count), H._asInt(offset));
    },
    peekBytes$1: function(count) {
      return this.peekBytes$2(count, 0);
    },
    skip$1: function(_, count) {
      var t1;
      H._asInt(count);
      t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$offset(0, t1 + count);
    },
    readByte$0: function() {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.set$offset(0, t2 + 1);
      return J.$index$asx(t1, t2);
    },
    readInt8$0: function() {
      return Z.uint8ToInt8(this.readByte$0());
    },
    readBytes$1: function(count) {
      var bytes = this.subset$1(H._asInt(count)),
        t1 = this.offset,
        t2 = bytes.get$length(bytes);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.set$offset(0, t1 + t2);
      return bytes;
    },
    readString$1: function(len) {
      var codes, c;
      H._asIntQ(len);
      if (len == null) {
        codes = H.setRuntimeTypeInfo([], type$.JSArray_int);
        for (; !H.boolConversionCheck(this.get$isEOS());) {
          c = this.readByte$0();
          if (c === 0)
            return P.String_String$fromCharCodes(codes);
          C.JSArray_methods.add$1(codes, c);
        }
        throw H.wrapException(K.ImageException$("EOF reached without finding string terminator"));
      }
      return P.String_String$fromCharCodes(this.readBytes$1(len).toUint8List$0());
    },
    readString$0: function() {
      return this.readString$1(null);
    },
    readUint16$0: function() {
      var b1, b2, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      if (H.boolConversionCheck(_this.bigEndian))
        return b1 << 8 | b2;
      return b2 << 8 | b1;
    },
    readInt16$0: function() {
      return Z.uint16ToInt16(this.readUint16$0());
    },
    readUint24$0: function() {
      var b1, b2, b3, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      if (H.boolConversionCheck(_this.bigEndian))
        return b3 | b2 << 8 | b1 << 16;
      return b1 | b2 << 8 | b3 << 16;
    },
    readUint32$0: function() {
      var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b4 = t1 & 255;
      if (H.boolConversionCheck(_this.bigEndian))
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readInt32$0: function() {
      return Z.uint32ToInt32(this.readUint32$0());
    },
    readFloat32$0: function() {
      return Z.uint32ToFloat32(this.readUint32$0());
    },
    readFloat64$0: function() {
      return Z.uint64ToFloat64(this.readUint64$0());
    },
    readUint64$0: function() {
      var b1, b2, b3, b4, b5, b6, b7, b8, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b4 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b5 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b6 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$offset(0, t2 + 1);
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b7 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$offset(0, t1 + 1);
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b8 = t1 & 255;
      if (H.boolConversionCheck(_this.bigEndian))
        return (C.JSInt_methods._shlPositive$1(b1, 56) | C.JSInt_methods._shlPositive$1(b2, 48) | C.JSInt_methods._shlPositive$1(b3, 40) | C.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
      return (C.JSInt_methods._shlPositive$1(b8, 56) | C.JSInt_methods._shlPositive$1(b7, 48) | C.JSInt_methods._shlPositive$1(b6, 40) | C.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toList$2: function(_, offset, $length) {
      var t1, t2, s, _this = this;
      H._asInt(offset);
      H._asInt($length);
      t1 = _this.buffer;
      if (type$.Uint8List._is(t1))
        return _this.toUint8List$2(offset, $length);
      t2 = _this.start;
      if (typeof t2 !== "number")
        return t2.$add();
      s = t2 + offset + offset;
      return J.sublist$2$ax(t1, s, $length <= 0 ? _this.end : s + $length);
    },
    toUint8List$2: function(offset, $length) {
      var t1, len, t2, t3, _this = this;
      H._asInt(offset);
      H._asIntQ($length);
      if ($length == null) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return t1.$sub();
        len = t1 - offset;
      } else
        len = $length;
      t1 = _this.buffer;
      if (type$.Uint8List._is(t1)) {
        t2 = C.NativeUint8List_methods.get$buffer(t1);
        t1 = C.NativeUint8List_methods.get$offsetInBytes(t1);
        t3 = _this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return P.Uint8List_Uint8List$view(t2, t1 + t3 + offset, len);
      }
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += offset;
      t2 = H.NativeUint8List_NativeUint8List$fromList(J.sublist$2$ax(t1, t2, t2 + len));
      t1 = t2;
      return t1;
    },
    toUint8List$0: function() {
      return this.toUint8List$2(0, null);
    },
    toUint32List$0: function() {
      var t2, t3,
        t1 = this.buffer;
      if (type$.Uint8List._is(t1)) {
        t2 = C.NativeUint8List_methods.get$buffer(t1);
        t1 = C.NativeUint8List_methods.get$offsetInBytes(t1);
        t3 = this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return P.Uint32List_Uint32List$view(t2, t1 + t3 + 0);
      }
      return P.Uint32List_Uint32List$view(J.get$buffer$x(this.toUint8List$0()), 0);
    },
    set$buffer: function(_, buffer) {
      this.buffer = type$.List_int._as(buffer);
    },
    set$offset: function(_, offset) {
      this.offset = H._asInt(offset);
    }
  };
  G.OutputBuffer.prototype = {
    rewind$0: function() {
      this.length = 0;
    },
    getBytes$0: function() {
      return P.Uint8List_Uint8List$view(J.get$buffer$x(this._buffer), 0, this.length);
    },
    writeByte$1: function(value) {
      var t1, t2, _this = this;
      H._asInt(value);
      if (H.boolConversionCheck(J.$eq$(_this.length, J.get$length$asx(_this._buffer))))
        _this._expandBuffer$0();
      t1 = _this._buffer;
      t2 = _this.length;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$length(0, t2 + 1);
      J.$indexSet$ax(t1, t2, value & 255);
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, _this = this;
      type$.List_int._as(bytes);
      len = J.get$length$asx(bytes);
      len = len;
      while (true) {
        t1 = _this.length;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof len !== "number")
          return H.iae(len);
        t2 = J.get$length$asx(_this._buffer);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 + len > t2))
          break;
        t1 = _this.length;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = J.get$length$asx(_this._buffer);
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this._expandBuffer$1(t1 + len - t2);
      }
      t1 = _this._buffer;
      t2 = _this.length;
      if (typeof t2 !== "number")
        return t2.$add();
      J.setRange$3$ax(t1, t2, t2 + len, bytes);
      t2 = _this.length;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.set$length(0, t2 + len);
    },
    writeUint16$1: function(value) {
      var _this = this;
      H._asInt(value);
      if (H.boolConversionCheck(_this.bigEndian)) {
        _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      _this.writeByte$1(value & 255);
      _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    writeUint32$1: function(value) {
      var _this = this;
      H._asInt(value);
      if (H.boolConversionCheck(_this.bigEndian)) {
        _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
        _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
        _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      _this.writeByte$1(value & 255);
      _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    subset$2: function(start, end) {
      var t1, _this = this;
      H._asInt(start);
      H._asIntQ(end);
      if (start < 0) {
        t1 = _this.length;
        if (typeof t1 !== "number")
          return t1.$add();
        start = t1 + start;
      }
      if (end == null)
        end = _this.length;
      else if (end < 0) {
        t1 = _this.length;
        if (typeof t1 !== "number")
          return t1.$add();
        end = t1 + end;
      }
      t1 = J.get$buffer$x(_this._buffer);
      if (typeof end !== "number")
        return end.$sub();
      return P.Uint8List_Uint8List$view(t1, start, end - start);
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer, _this = this;
      H._asIntQ(required);
      if (required != null)
        blockSize = required;
      else if (H.boolConversionCheck(J.get$isEmpty$asx(_this._buffer)))
        blockSize = 8192;
      else {
        t1 = J.get$length$asx(_this._buffer);
        if (typeof t1 !== "number")
          return t1.$mul();
        t1 *= 2;
        blockSize = t1;
      }
      t1 = J.get$length$asx(_this._buffer);
      if (typeof t1 !== "number")
        return t1.$add();
      newBuffer = H.NativeUint8List_NativeUint8List(t1 + blockSize);
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, J.get$length$asx(_this._buffer), _this._buffer);
      _this._buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    },
    set$length: function(_, $length) {
      this.length = H._asInt($length);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 6);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 6);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 6);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 2);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 30, 0);
    _instance_2_u(P._Future.prototype, "get$_completeError", "_completeError$2", 26);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 17);
    _static_1(P, "core__GeneratorIterable__id$closure", "_GeneratorIterable__id", 5);
    var _;
    _instance_2_u(_ = R.JpegScan.prototype, "get$_decodeBaseline", "_decodeBaseline$2", 8);
    _instance_2_u(_, "get$_decodeDCFirst", "_decodeDCFirst$2", 8);
    _instance_2_u(_, "get$_decodeDCSuccessive", "_decodeDCSuccessive$2", 14);
    _instance_2_u(_, "get$_decodeACFirst", "_decodeACFirst$2", 8);
    _instance_2_u(_, "get$_decodeACSuccessive", "_decodeACSuccessive$2", 14);
    _static_1(V, "vp8_filter_VP8Filter_VE4$closure", "VP8Filter_VE4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE4$closure", "VP8Filter_HE4", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC4$closure", "VP8Filter_DC4", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM4$closure", "VP8Filter_TM4", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM8uv$closure", "VP8Filter_TM8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM16$closure", "VP8Filter_TM16", 0);
    _static_1(V, "vp8_filter_VP8Filter_RD4$closure", "VP8Filter_RD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_LD4$closure", "VP8Filter_LD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VR4$closure", "VP8Filter_VR4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VL4$closure", "VP8Filter_VL4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HU4$closure", "VP8Filter_HU4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HD4$closure", "VP8Filter_HD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VE16$closure", "VP8Filter_VE16", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE16$closure", "VP8Filter_HE16", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16$closure", "VP8Filter_DC16", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoTop$closure", "VP8Filter_DC16NoTop", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoLeft$closure", "VP8Filter_DC16NoLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoTopLeft$closure", "VP8Filter_DC16NoTopLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_VE8uv$closure", "VP8Filter_VE8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE8uv$closure", "VP8Filter_HE8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uv$closure", "VP8Filter_DC8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoLeft$closure", "VP8Filter_DC8uvNoLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoTop$closure", "VP8Filter_DC8uvNoTop", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoTopLeft$closure", "VP8Filter_DC8uvNoTopLeft", 0);
    _instance_1_u(S.VP8L.prototype, "get$_processRows", "_processRows$1", 10);
    _instance_1_u(S.InternalVP8L.prototype, "get$extractAlphaRows", "extractAlphaRows$1", 10);
    _static(R, "vp8l_transform_VP8LTransform__predictor0$closure", 3, null, ["call$3"], ["VP8LTransform__predictor0"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor1$closure", 3, null, ["call$3"], ["VP8LTransform__predictor1"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor2$closure", 3, null, ["call$3"], ["VP8LTransform__predictor2"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor3$closure", 3, null, ["call$3"], ["VP8LTransform__predictor3"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor4$closure", 3, null, ["call$3"], ["VP8LTransform__predictor4"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor5$closure", 3, null, ["call$3"], ["VP8LTransform__predictor5"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor6$closure", 3, null, ["call$3"], ["VP8LTransform__predictor6"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor7$closure", 3, null, ["call$3"], ["VP8LTransform__predictor7"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor8$closure", 3, null, ["call$3"], ["VP8LTransform__predictor8"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor9$closure", 3, null, ["call$3"], ["VP8LTransform__predictor9"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor10$closure", 3, null, ["call$3"], ["VP8LTransform__predictor10"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor11$closure", 3, null, ["call$3"], ["VP8LTransform__predictor11"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor12$closure", 3, null, ["call$3"], ["VP8LTransform__predictor12"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor13$closure", 3, null, ["call$3"], ["VP8LTransform__predictor13"], 1, 0);
    _static(N, "webp_filters_WebPFilters_horizontalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_horizontalUnfilter"], 9, 0);
    _static(N, "webp_filters_WebPFilters_verticalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_verticalUnfilter"], 9, 0);
    _static(N, "webp_filters_WebPFilters_gradientUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_gradientUnfilter"], 9, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, P.Iterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.ConstantMap, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H._StackTrace, H.Closure, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.Rti, H._FunctionParameters, H._Type, P._TimerImpl, P.AsyncError, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P._ZoneFunction, P._Zone, P.ListMixin, P._MapBaseValueIterator, P._JsonStringifier, P._JsonPrettyPrintMixin, P.DateTime, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Null, P._StringStackTrace, P.StringBuffer, W.EventStreamProvider, P._StructuredClone, P._AcceptStructuredClone, P.NullRejectionException, T.InputStreamBase, Q.OutputStreamBase, Z.ZLibDecoderBase, Y.HuffmanTable, S.Inflate, Z.ZLibDecoder, G.ExifData, L.BitmapCompression, L.BitmapFileHeader, A.DecodeInfo, B.Decoder, E.Encoder, U.ExrAttribute, B.ExrCompressor, D.ExrChannel, Y.ExrHufDec, S.ExrPart, G._PizChannelData, M.GifColorMap, A.GifImageDesc, X.IcoInfoImage, U.ComponentData, D.JpegAdobe, R.JpegComponent, Y.JpegData, Y._JpegHuffman, L.JpegFrame, S.JpegJfif, R.JpegScan, D.PngFrame, V.PsdEffect, Q.PsdLayerData, O.PsdBlendingRanges, N.PsdChannel, S.PsdImageResource, S.PsdLayer, N.PsdMask, A.TiffBitReader, G.TiffEntry, A.TiffFaxDecoder, U.TiffImage, G.LzwDecoder, A.VP8, B.VP8BitReader, V.VP8Filter, L.VP8FrameHeader, L.VP8PictureHeader, L.VP8SegmentHeader, L.VP8BandProbas, L.VP8Proba, L.VP8FilterHeader, L.VP8FInfo, L.VP8MB, L.VP8QuantMatrix, L.VP8MBData, L.VP8TopSamples, S.VP8L, A.VP8LBitReader, Y.VP8LColorCache, R.VP8LTransform, R._VP8LMultipliers, S.WebPAlpha, X.WebPFrame, B.HuffmanTree, B.HTreeGroup, F.HdrImage, K.HdrSlice, D.ICCPCompression, D.ICCProfileData, U.Format, U.Channels, U.Image, K.ImageException, Z.InputBuffer, G.OutputBuffer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Event, W.Blob, W.EventTarget, W.DomError, W.DomException, W.MediaError, W.NavigatorUserMediaError, W.OverconstrainedError, W.PositionError, P.SqlError]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, Y.CropData]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Error, [H.LateError, H.NotNullableError, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.SkipIterable]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._MapBaseValueIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, P._GeneratorIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.GeneralConstantMap, H.ConstantMap);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.Closure, [H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, Y.main_closure, L.BmpInfo_readPalette_closure, E.BmpDecoder_decodeFrame_closure, S.ExrPart_closure, X.IcoInfo__read_closure, Y.JpegData__readSOS_closure, G.PngDecoder_decodeFrame_closure, G.PngDecoder__getColor__g_set, G.PngDecoder__getColor__g_get, G.PngDecoder__getColor__b_set, G.PngDecoder__getColor__g_set0, G.PngDecoder__getColor__r_set, G.PngDecoder__getColor__r_get, G.PngDecoder__getColor__g_get0, G.PngDecoder__getColor__b_get, G.PngDecoder__getColor__a_set, G.PngDecoder__getColor__g_set1, G.PngDecoder__getColor__g_get1, G.PngDecoder__getColor__a_get, G.PngDecoder__getColor__a_set0, G.PngDecoder__getColor__b_set0, G.PngDecoder__getColor__g_set2, G.PngDecoder__getColor__r_set0, G.PngDecoder__getColor__r_get0, G.PngDecoder__getColor__g_get2, G.PngDecoder__getColor__b_get0, G.PngDecoder__getColor__a_get0, A.VP8__upsample_LOAD_UV, A.hdrToImage__knee, A.hdrToImage__gamma]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P.JsonEncoder, P.Converter);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.Event, [W.ExtendableEvent, W.AnimationEvent, W.AnimationPlaybackEvent, W.ApplicationCacheErrorEvent, W.BeforeInstallPromptEvent, W.BeforeUnloadEvent, W.BlobEvent, W.ClipboardEvent, W.CloseEvent, W.UIEvent, W.CustomEvent, W.DeviceMotionEvent, W.DeviceOrientationEvent, W.ErrorEvent, W.FontFaceSetLoadEvent, W.GamepadEvent, W.HashChangeEvent, W.MediaEncryptedEvent, W.MediaKeyMessageEvent, W.MediaQueryListEvent, W.MediaStreamEvent, W.MediaStreamTrackEvent, W.MessageEvent, W.MidiConnectionEvent, W.MidiMessageEvent, W.MutationEvent, W.PageTransitionEvent, W.PaymentRequestUpdateEvent, W.PopStateEvent, W.PresentationConnectionAvailableEvent, W.PresentationConnectionCloseEvent, W.ProgressEvent, W.PromiseRejectionEvent, W.RtcDataChannelEvent, W.RtcDtmfToneChangeEvent, W.RtcPeerConnectionIceEvent, W.RtcTrackEvent, W.SecurityPolicyViolationEvent, W.SensorErrorEvent, W.SpeechRecognitionError, W.SpeechRecognitionEvent, W.SpeechSynthesisEvent, W.StorageEvent, W.TrackEvent, W.TransitionEvent, W.VRDeviceEvent, W.VRDisplayEvent, W.VRSessionEvent, W._MojoInterfaceRequestEvent, W._USBConnectionEvent, P.VersionChangeEvent, P.AudioProcessingEvent, P.OfflineAudioCompletionEvent, P.ContextEvent]);
    _inheritMany(W.ExtendableEvent, [W.AbortPaymentEvent, W.BackgroundFetchEvent, W.CanMakePaymentEvent, W.ExtendableMessageEvent, W.FetchEvent, W.ForeignFetchEvent, W.InstallEvent, W.NotificationEvent, W.PaymentRequestEvent, W.PushEvent, W.SyncEvent]);
    _inheritMany(W.BackgroundFetchEvent, [W.BackgroundFetchClickEvent, W.BackgroundFetchFailEvent, W.BackgroundFetchedEvent]);
    _inheritMany(W.UIEvent, [W.CompositionEvent, W.FocusEvent, W.KeyboardEvent, W.MouseEvent, W.TextEvent, W.TouchEvent]);
    _inheritMany(W.EventTarget, [W.WorkerGlobalScope, W.MessagePort]);
    _inherit(W.DedicatedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W.File, W.Blob);
    _inheritMany(W.MouseEvent, [W.PointerEvent, W.WheelEvent]);
    _inherit(W._ResourceProgressEvent, W.ProgressEvent);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(R.ArchiveException, P.FormatException);
    _inherit(T.InputStream, T.InputStreamBase);
    _inherit(Q.OutputStream, Q.OutputStreamBase);
    _inherit(G._ZLibDecoder, Z.ZLibDecoderBase);
    _inheritMany(A.DecodeInfo, [L.BmpInfo, Y.ExrImage, K.GifInfo, X.IcoInfo, Q.PngInfo, L.PsdImage, R.TgaInfo, A.TiffInfo, D.WebPInfo]);
    _inheritMany(B.Decoder, [E.BmpDecoder, U.ExrDecoder, F.GifDecoder, X.IcoDecoder, Z.JpegDecoder, G.PngDecoder, V.PsdDecoder, B.TgaDecoder, N.TiffDecoder, E.WebPDecoder]);
    _inherit(E.DibDecoder, E.BmpDecoder);
    _inherit(B.InternalExrCompressor, B.ExrCompressor);
    _inheritMany(B.InternalExrCompressor, [D.InternalExrB44Compressor, G.InternalExrPizCompressor, O.InternalExrPxr24Compressor, Y.InternalExrRleCompressor, R.InternalExrZipCompressor]);
    _inherit(S.InternalExrPart, S.ExrPart);
    _inherit(A.InternalGifImageDesc, A.GifImageDesc);
    _inherit(X.IcoBmpInfo, L.BmpInfo);
    _inherit(Z.JpegEncoder, E.Encoder);
    _inherit(D.InternalPngFrame, D.PngFrame);
    _inherit(Q.InternalPngInfo, Q.PngInfo);
    _inheritMany(V.PsdEffect, [U.PsdBevelEffect, M.PsdDropShadowEffect, D.PsdInnerGlowEffect, L.PsdInnerShadowEffect, N.PsdOuterGlowEffect, F.PsdSolidFillEffect]);
    _inheritMany(Q.PsdLayerData, [K.PsdLayerAdditionalData, Y.PsdLayerSectionDivider]);
    _inherit(S.InternalVP8L, S.VP8L);
    _inherit(X.InternalWebPFrame, X.WebPFrame);
    _inherit(D.InternalWebPInfo, D.WebPInfo);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~(InputBuffer)", "int(Uint32List,int,int)", "~()", "int()", "@(int)", "int(int)", "~(~())", "~(Object?,Object?)", "~(JpegComponent,List<@>)", "~(int,int,int,int,int,Uint8List)", "~(int)", "Null()", "String(int)", "Null(@)", "~(JpegComponent,List<int>)", "~(@,@)", "~(@)", "@(@)", "num(num,num)", "@(@,@)", "Uint32List(int)", "Null(@,@)", "JpegComponent(int)", "~(Event)", "_Future<@>(@)", "Null(Object,StackTrace)", "~(Object,StackTrace)", "int(int,int)", "IcoInfoImage(int)", "Null(~())", "~(Zone?,ZoneDelegate?,Zone,~())", "@(String)", "@(@,String)", "~(MessageEvent)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","CropData":"JavaScriptObject","JSBool":{"Interceptor":[],"bool":[]},"JSNull":{"Interceptor":[],"Null":[]},"JSMutableIndexable":{"JSIndexable":["1"]},"JavaScriptObject":{"Interceptor":[],"JSObject":[],"CropData":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Interceptor":[],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Interceptor":[],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Interceptor":[],"Comparable":["num"]},"JSInt":{"JSNumber":[],"double":[],"int":[],"num":[],"Interceptor":[],"Comparable":["num"]},"JSNumNotInt":{"JSNumber":[],"double":[],"num":[],"Interceptor":[],"Comparable":["num"]},"JSString":{"String":[],"Interceptor":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"]},"CastStream":{"Stream":["2"]},"CastStreamSubscription":{"StreamSubscription":["2"]},"CastStreamTransformer":{"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"]},"CastConverter":{"Converter":["3","4"],"StreamTransformerBase":["3","4"],"StreamTransformer":["3","4"]},"_CopyingBytesBuilder":{"BytesBuilder":[]},"_BytesBuilder":{"BytesBuilder":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"]},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"_CastListBase":{"__CastListBase__CastIterableBase_ListMixin":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"__CastListBase__CastIterableBase_ListMixin":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastSet":{"Set":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastMap":{"MapBase":["3","4"],"MapMixin":["3","4"],"Map":["3","4"]},"CastQueue":{"Queue":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"LateError":{"Error":[]},"ReachabilityError":{"Error":[]},"CodeUnits":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"NotNullableError":{"TypeError":[],"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"WhereIterable":{"Iterable":["1"]},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"]},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"]},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"TakeIterator":{"Iterator":["1"]},"TakeWhileIterable":{"Iterable":["1"]},"TakeWhileIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"]},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"FollowedByIterable":{"Iterable":["1"]},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"FollowedByIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"]},"WhereTypeIterator":{"Iterator":["1"]},"LinkedList":{"IterableBase":["1"],"Iterable":["1"]},"_LinkedListIterator":{"Iterator":["1"]},"UnmodifiableListMixin":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"FixedLengthListBase":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"FixedLengthListMixin":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"ListMapView":{"UnmodifiableMapBase":["int","1"],"MapBase":["int","1"],"MapMixin":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Symbol":{"Symbol0":[]},"__CastListBase__CastIterableBase_ListMixin":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantProtoMap":{"ConstantStringMap":["1","2"],"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation2":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation3":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation4":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation5":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation6":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation7":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation8":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation9":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation10":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation11":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation12":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation13":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation14":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation15":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation16":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation17":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation18":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation19":{"Instantiation":[],"Closure":[],"Function":[]},"Instantiation20":{"Instantiation":[],"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"NoSuchMethodError":[],"Error":[]},"JsNoSuchMethodError":{"NoSuchMethodError":[],"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"TearOffClosure":[],"Closure":[],"Function":[]},"BoundClosure":{"TearOffClosure":[],"Closure":[],"Function":[]},"JavaScriptIndexingBehavior":{"JSMutableIndexable":["1"],"JSIndexable":["1"]},"FallThroughErrorImplementation":{"FallThroughError":[],"Error":[]},"RuntimeError":{"Error":[]},"DeferredNotLoadedError":{"NoSuchMethodError":[],"Error":[]},"UnimplementedNoSuchMethodError":{"NoSuchMethodError":[],"Error":[]},"_AssertionError":{"AssertionError":[],"Error":[]},"_UnreachableError":{"AssertionError":[],"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"Es6LinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"IterableBase":["RegExpMatch"],"Iterable":["RegExpMatch"]},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"]},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"Interceptor":[],"ByteBuffer":[]},"NativeFloat32x4List":{"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat32x4List_Object_ListMixin":[],"ListMixin":["Float32x4"],"Float32x4List":[],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"],"TypedData":[]},"NativeInt32x4List":{"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":[],"_NativeInt32x4List_Object_ListMixin":[],"ListMixin":["Int32x4"],"Int32x4List":[],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"],"TypedData":[]},"NativeFloat64x2List":{"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":[],"_NativeFloat64x2List_Object_ListMixin":[],"ListMixin":["Float64x2"],"Float64x2List":[],"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"],"TypedData":[]},"NativeTypedData":{"Interceptor":[],"TypedData":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"Interceptor":[],"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"NativeTypedData":[],"JSMutableIndexable":["1"],"Interceptor":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"Interceptor":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"NativeTypedArray":["double"],"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"NativeTypedArray":["double"],"ListMixin":["double"],"Float64List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8ClampedList":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":[],"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeFloat32x4":{"Float32x4":[]},"NativeInt32x4":{"Int32x4":[]},"NativeFloat64x2":{"Float64x2":[]},"_NativeFloat32x4List_Object_ListMixin":{"ListMixin":["Float32x4"],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"]},"_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin":{"_NativeFloat32x4List_Object_ListMixin":[],"ListMixin":["Float32x4"],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"FixedLengthListMixin":["Float32x4"]},"_NativeFloat64x2List_Object_ListMixin":{"ListMixin":["Float64x2"],"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"]},"_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin":{"_NativeFloat64x2List_Object_ListMixin":[],"ListMixin":["Float64x2"],"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"FixedLengthListMixin":["Float64x2"]},"_NativeInt32x4List_Object_ListMixin":{"ListMixin":["Int32x4"],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"]},"_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin":{"_NativeInt32x4List_Object_ListMixin":[],"ListMixin":["Int32x4"],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"FixedLengthListMixin":["Int32x4"]},"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"Interceptor":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"]},"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin":{"_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin":[],"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"JSMutableIndexable":["double"],"EfficientLengthIterable":["double"],"Interceptor":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"]},"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin":{"_NativeTypedArrayOfInt_NativeTypedArray_ListMixin":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"JSMutableIndexable":["int"],"EfficientLengthIterable":["int"],"Interceptor":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"_Error":[],"TypeError":[],"CastError":[],"Error":[]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"IterableBase":["1"],"Iterable":["1"]},"AsyncError":{"Error":[]},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"]},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_BroadcastStreamController":{"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsBroadcastStreamController":{"_SyncBroadcastStreamController":["1"],"_BroadcastStreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"DeferredLoadException":{"Exception":[]},"TimeoutException":{"Exception":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_Future":{"Future":["1"]},"EventSink":{"Sink":["1"]},"StreamView":{"Stream":["1"]},"StreamSink":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_ControllerEventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"MultiStreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"StreamController":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"SynchronousStreamController":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamControllerBase":{"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_StreamController":{"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamControllerDispatch":{"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"SynchronousStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"]},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_StreamSinkWrapper":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_StreamImpl":{"Stream":["1"]},"_GeneratedStreamImpl":{"_StreamImpl":["1"],"Stream":["1"]},"_IterablePendingEvents":{"_PendingEvents":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_StreamImplEvents":{"_PendingEvents":["1"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_AsBroadcastStream":{"Stream":["1"]},"_BroadcastSubscriptionWrapper":{"StreamSubscription":["1"]},"_StreamIterator":{"StreamIterator":["1"]},"_EmptyStream":{"Stream":["1"]},"_MultiStream":{"Stream":["1"]},"_MultiStreamController":{"_AsyncStreamController":["1"],"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"_StreamControllerBase":["1"],"MultiStreamController":["1"],"StreamController":["1"],"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"]},"_WhereStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"]},"_ExpandStream":{"_ForwardingStream":["1","2"],"Stream":["2"]},"_HandleErrorStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_TakeStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_StateStreamSubscription":{"_ForwardingStreamSubscription":["2","2"],"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"]},"_TakeWhileStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_SkipStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_SkipWhileStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_DistinctStream":{"_ForwardingStream":["1","1"],"Stream":["1"]},"_EventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"]},"_StreamSinkTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_BoundSinkStream":{"Stream":["2"]},"_HandlerEventSink":{"EventSink":["1"],"Sink":["1"]},"_StreamHandlerTransformer":{"_StreamSinkTransformer":["1","2"],"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_StreamBindTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_StreamSubscriptionTransformer":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_BoundSubscriptionStream":{"Stream":["2"]},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_CustomHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"]},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"_Es6LinkedIdentityHashMap":{"_LinkedIdentityHashMap":["1","2"],"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"_Es6MapIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_Es6MapIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"InternalMap":[]},"_HashSet":{"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"HashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IdentityHashSet":{"_HashSet":["1"],"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"HashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_CustomHashSet":{"_HashSet":["1"],"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"HashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashSetIterator":{"Iterator":["1"]},"_LinkedHashSet":{"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedIdentityHashSet":{"_LinkedHashSet":["1"],"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedCustomHashSet":{"_LinkedHashSet":["1"],"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"UnmodifiableListBase":["1"],"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"HashMap":{"Map":["1","2"]},"HashSet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"IterableMixin":{"Iterable":["1"]},"IterableBase":{"Iterable":["1"]},"LinkedHashMap":{"Map":["1","2"]},"LinkedHashSet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"LinkedList0":{"Iterable":["1"]},"_LinkedListIterator0":{"Iterator":["1"]},"ListBase":{"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ListMixin":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"MapMixin":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"_UnmodifiableMapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"Queue":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"DoubleLinkedQueueEntry":{"_DoubleLink":["DoubleLinkedQueueEntry<1>"]},"_DoubleLinkedQueueEntry":{"DoubleLinkedQueueEntry":["1"],"_DoubleLink":["DoubleLinkedQueueEntry<1>"]},"_DoubleLinkedQueueElement":{"_DoubleLinkedQueueEntry":["1"],"DoubleLinkedQueueEntry":["1"],"_DoubleLink":["DoubleLinkedQueueEntry<1>"]},"_DoubleLinkedQueueSentinel":{"_DoubleLinkedQueueEntry":["1"],"DoubleLinkedQueueEntry":["1"],"_DoubleLink":["DoubleLinkedQueueEntry<1>"]},"DoubleLinkedQueue":{"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DoubleLinkedQueueIterator":{"Iterator":["1"]},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListQueueIterator":{"Iterator":["1"]},"SetMixin":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"SetBase":{"_SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSetMixin":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":["1"],"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView":{"_UnmodifiableSetView_SetBase__UnmodifiableSetMixin":["1"],"SetBase":["1"],"_SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeSetNode":{"_SplayTreeNode":["1","_SplayTreeSetNode<1>"]},"_SplayTreeMapNode":{"_SplayTreeNode":["1","_SplayTreeMapNode<1,2>"],"MapEntry":["1","2"]},"SplayTreeMap":{"_SplayTreeMap__SplayTree_MapMixin":["1","2"],"MapMixin":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"]},"_SplayTreeIterator":{"Iterator":["3"]},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"]},"_SplayTreeMapEntryIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"]},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"Iterator":["1"]},"_SplayTreeValueIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","2"],"Iterator":["2"]},"_SplayTreeMapEntryIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","MapEntry<1,2>"],"Iterator":["MapEntry<1,2>"]},"SplayTreeSet":{"_SplayTreeSet__SplayTree_IterableMixin_SetMixin":["1"],"SetMixin":["1"],"_SplayTreeSet__SplayTree_IterableMixin":["1"],"Set":["1"],"IterableMixin":["1"],"EfficientLengthIterable":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_ListBase_Object_ListMixin":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase_Object_SetMixin":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SplayTreeMap__SplayTree_MapMixin":{"MapMixin":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"]},"_SplayTreeSet__SplayTree_IterableMixin":{"IterableMixin":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_SplayTreeSet__SplayTree_IterableMixin_SetMixin":{"SetMixin":["1"],"_SplayTreeSet__SplayTree_IterableMixin":["1"],"Set":["1"],"IterableMixin":["1"],"EfficientLengthIterable":["1"],"_SplayTree":["1","_SplayTreeSetNode<1>"],"Iterable":["1"]},"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":{"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_UnmodifiableSetView_SetBase__UnmodifiableSetMixin":{"SetBase":["1"],"_SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"__SetBase_Object_SetMixin":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":{"_SetBase":["1"],"__SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_JsonMap":{"MapBase":["String","@"],"MapMixin":["String","@"],"Map":["String","@"]},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"_JsonDecoderSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"]},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"_UnicodeSubsetEncoder":[],"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_UnicodeSubsetEncoderSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"_UnicodeSubsetDecoder":[],"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"_ErrorHandlingAsciiDecoderSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_SimpleAsciiDecoderSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Base64Codec":{"Codec":["List<int>","String"]},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"_BufferCachingBase64Encoder":{"_Base64Encoder":[]},"_Base64EncoderSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_AsciiBase64EncoderSink":{"_Base64EncoderSink":[],"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8Base64EncoderSink":{"_Base64EncoderSink":[],"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Base64Decoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_Base64DecoderSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"ByteConversionSink":{"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ByteConversionSinkBase":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteCallbackSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"_SimpleCallbackSink":{"ChunkedConversionSink":["1"],"Sink":["1"]},"_ConverterStreamEventSink":{"EventSink":["1"],"Sink":["1"]},"_FusedCodec":{"Codec":["1","3"]},"_InvertedCodec":{"Codec":["1","2"]},"Converter":{"StreamTransformerBase":["1","2"],"StreamTransformer":["1","2"]},"_FusedConverter":{"Converter":["1","3"],"StreamTransformerBase":["1","3"],"StreamTransformer":["1","3"]},"Encoding":{"Codec":["String","List<int>"]},"HtmlEscape":{"Converter":["String","String"],"StreamTransformerBase":["String","String"],"StreamTransformer":["String","String"]},"_HtmlEscapeSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"JsonUnsupportedObjectError":[],"Error":[]},"JsonCodec":{"Codec":["Object?","String"]},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformerBase":["Object?","String"],"StreamTransformer":["Object?","String"]},"JsonUtf8Encoder":{"Converter":["Object?","List<int>"],"StreamTransformerBase":["Object?","List<int>"],"StreamTransformer":["Object?","List<int>"]},"_JsonEncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"_JsonUtf8EncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformerBase":["String","Object?"],"StreamTransformer":["String","Object?"]},"_JsonPrettyPrintMixin":{"_JsonStringifier":[]},"_JsonStringStringifier":{"_JsonStringifier":[]},"_JsonStringStringifierPretty":{"__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin":[],"_JsonStringStringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"_JsonUtf8Stringifier":{"_JsonStringifier":[]},"_JsonUtf8StringifierPretty":{"__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin":[],"_JsonUtf8Stringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"]},"Latin1Encoder":{"_UnicodeSubsetEncoder":[],"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Latin1Decoder":{"_UnicodeSubsetDecoder":[],"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"_Latin1DecoderSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Latin1AllowInvalidDecoderSink":{"_Latin1DecoderSink":[],"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"LineSplitter":{"StreamTransformerBase":["String","String"],"StreamTransformer":["String","String"]},"_LineSplitterSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_LineSplitterEventSink":{"_LineSplitterSink":[],"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"EventSink":["String"],"Sink":["String"]},"StringConversionSink":{"ChunkedConversionSink":["String"],"Sink":["String"]},"ClosableStringSink":{"StringSink":[]},"_ClosableStringSink":{"ClosableStringSink":[],"StringSink":[]},"_StringConversionSinkAsStringSinkAdapter":{"ClosableStringSink":[],"StringSink":[]},"StringConversionSinkBase":{"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"StringConversionSinkMixin":{"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_StringSinkConversionSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_StringCallbackSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_StringAdapterSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_Utf8StringSinkAdapter":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8ConversionSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"]},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_Utf8EncoderSink":{"__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"_Utf8Encoder":[],"Sink":["String"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin":{"_JsonStringStringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin":{"_JsonUtf8Stringifier":[],"_JsonPrettyPrintMixin":[],"_JsonStringifier":[]},"__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin":{"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"_Utf8Encoder":[],"Sink":["String"]},"_CompileTimeError":{"Error":[]},"_DuplicatedFieldInitializerError":{"Error":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"_BigIntClassic":{"_BigIntReduction":[]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"CastError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"ArgumentError":[],"Error":[]},"IndexError":{"RangeError":[],"ArgumentError":[],"Error":[]},"FallThroughError":{"Error":[]},"AbstractClassInstantiationError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"UnsupportedError":[],"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[]},"int":{"num":[],"Comparable":["num"]},"_Invocation":{"Invocation":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"BidirectionalIterator":{"Iterator":["1"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExp":{"Pattern":[]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_StringStackTrace":{"StackTrace":[]},"String":{"Comparable":["String"],"Pattern":[]},"Runes":{"Iterable":["int"]},"RuneIterator":{"BidirectionalIterator":["int"],"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"_Uri":[],"Uri":[]},"HtmlElement":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"AbortPaymentEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"AbsoluteOrientationSensor":{"OrientationSensor":[],"Sensor":[],"EventTarget":[],"Interceptor":[]},"AbstractWorker":{"EventTarget":[],"Interceptor":[]},"Accelerometer":{"Sensor":[],"EventTarget":[],"Interceptor":[]},"AccessibleNode":{"EventTarget":[],"Interceptor":[]},"AccessibleNodeList":{"Interceptor":[]},"AmbientLightSensor":{"Sensor":[],"EventTarget":[],"Interceptor":[]},"AnchorElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"HtmlHyperlinkElementUtils":[],"Interceptor":[]},"Animation":{"EventTarget":[],"Interceptor":[]},"AnimationEffectReadOnly":{"Interceptor":[]},"AnimationEffectTiming":{"AnimationEffectTimingReadOnly":[],"Interceptor":[]},"AnimationEffectTimingReadOnly":{"Interceptor":[]},"AnimationEvent":{"Event":[],"Interceptor":[]},"AnimationPlaybackEvent":{"Event":[],"Interceptor":[]},"AnimationTimeline":{"Interceptor":[]},"AnimationWorkletGlobalScope":{"WorkletGlobalScope":[],"Interceptor":[]},"ApplicationCache":{"EventTarget":[],"Interceptor":[]},"ApplicationCacheErrorEvent":{"Event":[],"Interceptor":[]},"AreaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"HtmlHyperlinkElementUtils":[],"Interceptor":[]},"AudioElement":{"MediaElement":[],"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"AuthenticatorAssertionResponse":{"AuthenticatorResponse":[],"Interceptor":[]},"AuthenticatorAttestationResponse":{"AuthenticatorResponse":[],"Interceptor":[]},"AuthenticatorResponse":{"Interceptor":[]},"BRElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"BackgroundFetchClickEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"Interceptor":[]},"BackgroundFetchEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"BackgroundFetchFailEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"Interceptor":[]},"BackgroundFetchFetch":{"Interceptor":[]},"BackgroundFetchManager":{"Interceptor":[]},"BackgroundFetchRegistration":{"EventTarget":[],"Interceptor":[]},"BackgroundFetchSettledFetch":{"BackgroundFetchFetch":[],"Interceptor":[]},"BackgroundFetchedEvent":{"BackgroundFetchEvent":[],"ExtendableEvent":[],"Event":[],"Interceptor":[]},"BarProp":{"Interceptor":[]},"BarcodeDetector":{"Interceptor":[]},"BaseElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"BatteryManager":{"EventTarget":[],"Interceptor":[]},"BeforeInstallPromptEvent":{"Event":[],"Interceptor":[]},"BeforeUnloadEvent":{"Event":[],"Interceptor":[]},"Blob":{"Interceptor":[]},"BlobEvent":{"Event":[],"Interceptor":[]},"BluetoothRemoteGattDescriptor":{"Interceptor":[]},"Body":{"Interceptor":[]},"BodyElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"WindowEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"BroadcastChannel":{"EventTarget":[],"Interceptor":[]},"BudgetState":{"Interceptor":[]},"ButtonElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"CDataSection":{"Text":[],"CharacterData":[],"Node":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ChildNode":[],"Interceptor":[]},"CacheStorage":{"Interceptor":[]},"CanMakePaymentEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"CanvasCaptureMediaStreamTrack":{"MediaStreamTrack":[],"EventTarget":[],"Interceptor":[]},"CanvasElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[],"CanvasImageSource":[]},"CanvasGradient":{"Interceptor":[]},"CanvasPattern":{"Interceptor":[]},"CanvasRenderingContext2D":{"Interceptor":[],"CanvasRenderingContext":[]},"CharacterData":{"Node":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ChildNode":[],"Interceptor":[]},"ChildNode":{"Interceptor":[]},"Client":{"Interceptor":[]},"Clients":{"Interceptor":[]},"ClipboardEvent":{"Event":[],"Interceptor":[]},"CloseEvent":{"Event":[],"Interceptor":[]},"Comment":{"CharacterData":[],"Node":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ChildNode":[],"Interceptor":[]},"CompositionEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"ContentElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"CookieStore":{"Interceptor":[]},"Coordinates":{"Interceptor":[]},"Credential":{"Interceptor":[]},"CredentialUserData":{"Interceptor":[]},"CredentialsContainer":{"Interceptor":[]},"Crypto":{"Interceptor":[]},"CryptoKey":{"Interceptor":[]},"Css":{"Interceptor":[]},"CssCharsetRule":{"CssRule":[],"Interceptor":[]},"CssConditionRule":{"CssGroupingRule":[],"CssRule":[],"Interceptor":[]},"CssFontFaceRule":{"CssRule":[],"Interceptor":[]},"CssGroupingRule":{"CssRule":[],"Interceptor":[]},"CssImageValue":{"CssResourceValue":[],"CssStyleValue":[],"Interceptor":[]},"CssImportRule":{"CssRule":[],"Interceptor":[]},"CssKeyframeRule":{"CssRule":[],"Interceptor":[]},"CssKeyframesRule":{"CssRule":[],"Interceptor":[]},"CssKeywordValue":{"CssStyleValue":[],"Interceptor":[]},"CssMatrixComponent":{"CssTransformComponent":[],"Interceptor":[]},"CssMediaRule":{"CssConditionRule":[],"CssGroupingRule":[],"CssRule":[],"Interceptor":[]},"CssNamespaceRule":{"CssRule":[],"Interceptor":[]},"CssNumericValue":{"CssStyleValue":[],"Interceptor":[]},"CssPageRule":{"CssRule":[],"Interceptor":[]},"CssPerspective":{"CssTransformComponent":[],"Interceptor":[]},"CssPositionValue":{"CssStyleValue":[],"Interceptor":[]},"CssResourceValue":{"CssStyleValue":[],"Interceptor":[]},"CssRotation":{"CssTransformComponent":[],"Interceptor":[]},"CssRule":{"Interceptor":[]},"CssScale":{"CssTransformComponent":[],"Interceptor":[]},"CssSkew":{"CssTransformComponent":[],"Interceptor":[]},"CssStyleDeclaration":{"_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase":[],"Interceptor":[],"CssStyleDeclarationBase":[]},"_CssStyleDeclarationSet":{"__CssStyleDeclarationSet_Object_CssStyleDeclarationBase":[],"CssStyleDeclarationBase":[]},"CssStyleRule":{"CssRule":[],"Interceptor":[]},"CssStyleSheet":{"StyleSheet":[],"Interceptor":[]},"CssStyleValue":{"Interceptor":[]},"CssSupportsRule":{"CssConditionRule":[],"CssGroupingRule":[],"CssRule":[],"Interceptor":[]},"CssTransformComponent":{"Interceptor":[]},"CssTransformValue":{"CssStyleValue":[],"Interceptor":[]},"CssTranslation":{"CssTransformComponent":[],"Interceptor":[]},"CssUnitValue":{"CssNumericValue":[],"CssStyleValue":[],"Interceptor":[]},"CssUnparsedValue":{"CssStyleValue":[],"Interceptor":[]},"CssVariableReferenceValue":{"Interceptor":[]},"CssViewportRule":{"CssRule":[],"Interceptor":[]},"CssurlImageValue":{"CssImageValue":[],"CssResourceValue":[],"CssStyleValue":[],"Interceptor":[]},"CustomElementRegistry":{"Interceptor":[]},"CustomEvent":{"Event":[],"Interceptor":[]},"DListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DataElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DataListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DataTransfer":{"Interceptor":[]},"DataTransferItem":{"Interceptor":[]},"DataTransferItemList":{"Interceptor":[]},"DedicatedWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"_WindowTimers":[],"WindowBase64":[],"Interceptor":[]},"DeprecatedStorageInfo":{"Interceptor":[]},"DeprecatedStorageQuota":{"Interceptor":[]},"DeprecationReport":{"ReportBody":[],"Interceptor":[]},"DetailsElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DetectedBarcode":{"Interceptor":[]},"DetectedFace":{"Interceptor":[]},"DetectedText":{"Interceptor":[]},"DeviceAcceleration":{"Interceptor":[]},"DeviceMotionEvent":{"Event":[],"Interceptor":[]},"DeviceOrientationEvent":{"Event":[],"Interceptor":[]},"DeviceRotationRate":{"Interceptor":[]},"DialogElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DirectoryEntry":{"Entry":[],"Interceptor":[]},"DirectoryReader":{"Interceptor":[]},"DivElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Document":{"Node":[],"EventTarget":[],"Interceptor":[]},"DocumentFragment":{"Node":[],"EventTarget":[],"NonElementParentNode":[],"ParentNode":[],"Interceptor":[]},"DocumentOrShadowRoot":{"Interceptor":[]},"DocumentTimeline":{"AnimationTimeline":[],"Interceptor":[]},"DomError":{"Interceptor":[]},"DomException":{"Interceptor":[]},"DomImplementation":{"Interceptor":[]},"DomIterator":{"Interceptor":[]},"DomMatrix":{"DomMatrixReadOnly":[],"Interceptor":[]},"DomMatrixReadOnly":{"Interceptor":[]},"DomParser":{"Interceptor":[]},"DomPoint":{"DomPointReadOnly":[],"Interceptor":[]},"DomPointReadOnly":{"Interceptor":[]},"DomQuad":{"Interceptor":[]},"DomRectList":{"_DomRectList_Interceptor_ListMixin_ImmutableListMixin":[],"_DomRectList_Interceptor_ListMixin":[],"ListMixin":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"JSMutableIndexable":["Rectangle<num>"],"Interceptor":[],"Iterable":["Rectangle<num>"],"JSIndexable":["Rectangle<num>"]},"DomRectReadOnly":{"Rectangle":["num"],"Interceptor":[],"_RectangleBase":["num"]},"DomStringList":{"_DomStringList_Interceptor_ListMixin_ImmutableListMixin":[],"_DomStringList_Interceptor_ListMixin":[],"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"JSMutableIndexable":["String"],"Interceptor":[],"Iterable":["String"],"JSIndexable":["String"]},"DomStringMap":{"Interceptor":[]},"DomTokenList":{"Interceptor":[]},"_ChildrenElementList":{"ListBase":["Element"],"_ListBase_Object_ListMixin":["Element"],"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"NodeListWrapper":[]},"ElementList":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_FrozenElementList":{"ElementList":["1"],"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"NodeListWrapper":[]},"Element":{"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"EmbedElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Entry":{"Interceptor":[]},"ErrorEvent":{"Event":[],"Interceptor":[]},"Event":{"Interceptor":[]},"EventSource":{"EventTarget":[],"Interceptor":[]},"ElementEvents":{"Events":[]},"EventTarget":{"Interceptor":[]},"ExtendableEvent":{"Event":[],"Interceptor":[]},"ExtendableMessageEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"External":{"Interceptor":[]},"FaceDetector":{"Interceptor":[]},"FederatedCredential":{"Credential":[],"CredentialUserData":[],"Interceptor":[]},"FetchEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"FieldSetElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"File":{"Blob":[],"Interceptor":[]},"FileEntry":{"Entry":[],"Interceptor":[]},"FileList":{"_FileList_Interceptor_ListMixin_ImmutableListMixin":[],"_FileList_Interceptor_ListMixin":[],"ListMixin":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"JSMutableIndexable":["File"],"Interceptor":[],"Iterable":["File"],"JSIndexable":["File"]},"FileReader":{"EventTarget":[],"Interceptor":[]},"FileSystem":{"Interceptor":[]},"FileWriter":{"EventTarget":[],"Interceptor":[]},"FocusEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"FontFace":{"Interceptor":[]},"FontFaceSet":{"EventTarget":[],"Interceptor":[]},"FontFaceSetLoadEvent":{"Event":[],"Interceptor":[]},"FontFaceSource":{"Interceptor":[]},"ForeignFetchEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"FormData":{"Interceptor":[]},"FormElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Gamepad":{"Interceptor":[]},"GamepadButton":{"Interceptor":[]},"GamepadEvent":{"Event":[],"Interceptor":[]},"GamepadPose":{"Interceptor":[]},"Geolocation":{"Interceptor":[]},"_GeopositionWrapper":{"Geoposition":[],"Interceptor":[]},"Geoposition":{"Interceptor":[]},"GlobalEventHandlers":{"EventTarget":[],"Interceptor":[]},"Gyroscope":{"Sensor":[],"EventTarget":[],"Interceptor":[]},"HRElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"HashChangeEvent":{"Event":[],"Interceptor":[]},"HeadElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Headers":{"Interceptor":[]},"HeadingElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"History":{"Interceptor":[],"HistoryBase":[]},"HtmlCollection":{"_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin":[],"_HtmlCollection_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HtmlDocument":{"Document":[],"Node":[],"EventTarget":[],"Interceptor":[]},"HtmlFormControlsCollection":{"HtmlCollection":[],"_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin":[],"_HtmlCollection_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HtmlHtmlElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"HtmlHyperlinkElementUtils":{"Interceptor":[]},"HtmlOptionsCollection":{"HtmlCollection":[],"_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin":[],"_HtmlCollection_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"Iterable":["Node"],"JSIndexable":["Node"]},"HttpRequest":{"HttpRequestEventTarget":[],"EventTarget":[],"Interceptor":[]},"HttpRequestEventTarget":{"EventTarget":[],"Interceptor":[]},"HttpRequestUpload":{"HttpRequestEventTarget":[],"EventTarget":[],"Interceptor":[]},"IFrameElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"IdleDeadline":{"Interceptor":[]},"ImageBitmap":{"Interceptor":[]},"ImageBitmapRenderingContext":{"Interceptor":[]},"ImageCapture":{"Interceptor":[]},"ImageData":{"Interceptor":[]},"ImageElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[],"CanvasImageSource":[]},"InputDeviceCapabilities":{"Interceptor":[]},"InputElement":{"SearchInputElement":[],"TextInputElement":[],"UrlInputElement":[],"TelephoneInputElement":[],"EmailInputElement":[],"PasswordInputElement":[],"DateInputElement":[],"MonthInputElement":[],"WeekInputElement":[],"TimeInputElement":[],"LocalDateTimeInputElement":[],"NumberInputElement":[],"RangeInputElement":[],"HiddenInputElement":[],"TextInputElementBase":[],"RangeInputElementBase":[],"CheckboxInputElement":[],"RadioButtonInputElement":[],"FileUploadInputElement":[],"SubmitButtonInputElement":[],"ImageButtonInputElement":[],"ResetButtonInputElement":[],"ButtonInputElement":[],"HtmlElement":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"InputElementBase":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"HiddenInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"TextInputElementBase":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"SearchInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"TextInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"UrlInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"TelephoneInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"EmailInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"PasswordInputElement":{"TextInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"RangeInputElementBase":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"DateInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"MonthInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"WeekInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"TimeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"LocalDateTimeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"NumberInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"RangeInputElement":{"RangeInputElementBase":[],"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"CheckboxInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"RadioButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"FileUploadInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"SubmitButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"ImageButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"ResetButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"ButtonInputElement":{"InputElementBase":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"Interceptor":[]},"InstallEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"IntersectionObserver":{"Interceptor":[]},"IntersectionObserverEntry":{"Interceptor":[]},"InterventionReport":{"ReportBody":[],"Interceptor":[]},"KeyboardEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"KeyframeEffect":{"KeyframeEffectReadOnly":[],"AnimationEffectReadOnly":[],"Interceptor":[]},"KeyframeEffectReadOnly":{"AnimationEffectReadOnly":[],"Interceptor":[]},"LIElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"LabelElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"LegendElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"LinearAccelerationSensor":{"Accelerometer":[],"Sensor":[],"EventTarget":[],"Interceptor":[]},"LinkElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Location":{"Interceptor":[],"LocationBase":[]},"Magnetometer":{"Sensor":[],"EventTarget":[],"Interceptor":[]},"MapElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"MediaCapabilities":{"Interceptor":[]},"MediaCapabilitiesInfo":{"Interceptor":[]},"MediaDeviceInfo":{"Interceptor":[]},"MediaDevices":{"EventTarget":[],"Interceptor":[]},"MediaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"MediaEncryptedEvent":{"Event":[],"Interceptor":[]},"MediaError":{"Interceptor":[]},"MediaKeyMessageEvent":{"Event":[],"Interceptor":[]},"MediaKeySession":{"EventTarget":[],"Interceptor":[]},"MediaKeyStatusMap":{"Interceptor":[]},"MediaKeySystemAccess":{"Interceptor":[]},"MediaKeys":{"Interceptor":[]},"MediaKeysPolicy":{"Interceptor":[]},"MediaList":{"Interceptor":[]},"MediaMetadata":{"Interceptor":[]},"MediaQueryList":{"EventTarget":[],"Interceptor":[]},"MediaQueryListEvent":{"Event":[],"Interceptor":[]},"MediaRecorder":{"EventTarget":[],"Interceptor":[]},"MediaSession":{"Interceptor":[]},"MediaSettingsRange":{"Interceptor":[]},"MediaSource":{"EventTarget":[],"Interceptor":[]},"MediaStream":{"EventTarget":[],"Interceptor":[]},"MediaStreamEvent":{"Event":[],"Interceptor":[]},"MediaStreamTrack":{"EventTarget":[],"Interceptor":[]},"MediaStreamTrackEvent":{"Event":[],"Interceptor":[]},"MemoryInfo":{"Interceptor":[]},"MenuElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"MessageChannel":{"Interceptor":[]},"MessageEvent":{"Event":[],"Interceptor":[]},"MessagePort":{"EventTarget":[],"Interceptor":[]},"MetaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Metadata":{"Interceptor":[]},"MeterElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"MidiAccess":{"EventTarget":[],"Interceptor":[]},"MidiConnectionEvent":{"Event":[],"Interceptor":[]},"MidiInput":{"MidiPort":[],"EventTarget":[],"Interceptor":[]},"MidiInputMap":{"_MidiInputMap_Interceptor_MapMixin":[],"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"MidiMessageEvent":{"Event":[],"Interceptor":[]},"MidiOutput":{"MidiPort":[],"EventTarget":[],"Interceptor":[]},"MidiOutputMap":{"_MidiOutputMap_Interceptor_MapMixin":[],"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"MidiPort":{"EventTarget":[],"Interceptor":[]},"MimeType":{"Interceptor":[]},"MimeTypeArray":{"_MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin":[],"_MimeTypeArray_Interceptor_ListMixin":[],"ListMixin":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"JSMutableIndexable":["MimeType"],"Interceptor":[],"Iterable":["MimeType"],"JSIndexable":["MimeType"]},"ModElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"MouseEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"MutationEvent":{"Event":[],"Interceptor":[]},"MutationObserver":{"Interceptor":[]},"MutationRecord":{"Interceptor":[]},"NavigationPreloadManager":{"Interceptor":[]},"Navigator":{"NavigatorConcurrentHardware":[],"NavigatorCookies":[],"NavigatorLanguage":[],"NavigatorOnLine":[],"NavigatorAutomationInformation":[],"NavigatorID":[],"Interceptor":[]},"NavigatorAutomationInformation":{"Interceptor":[]},"NavigatorConcurrentHardware":{"Interceptor":[]},"NavigatorCookies":{"Interceptor":[]},"NavigatorID":{"Interceptor":[]},"NavigatorLanguage":{"Interceptor":[]},"NavigatorOnLine":{"Interceptor":[]},"NavigatorUserMediaError":{"Interceptor":[]},"NetworkInformation":{"EventTarget":[],"Interceptor":[]},"_ChildNodeListLazy":{"ListBase":["Node"],"_ListBase_Object_ListMixin":["Node"],"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"NodeListWrapper":[]},"Node":{"EventTarget":[],"Interceptor":[]},"NodeFilter":{"Interceptor":[]},"NodeIterator":{"Interceptor":[]},"NodeList":{"_NodeList_Interceptor_ListMixin_ImmutableListMixin":[],"_NodeList_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"Iterable":["Node"],"JSIndexable":["Node"]},"NonDocumentTypeChildNode":{"Interceptor":[]},"NonElementParentNode":{"Interceptor":[]},"NoncedElement":{"Interceptor":[]},"Notification":{"EventTarget":[],"Interceptor":[]},"NotificationEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"OListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ObjectElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"OffscreenCanvas":{"EventTarget":[],"Interceptor":[]},"OffscreenCanvasRenderingContext2D":{"_CanvasPath":[],"Interceptor":[]},"OptGroupElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"OptionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"OrientationSensor":{"Sensor":[],"EventTarget":[],"Interceptor":[]},"OutputElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"OverconstrainedError":{"Interceptor":[]},"PageTransitionEvent":{"Event":[],"Interceptor":[]},"PaintRenderingContext2D":{"_CanvasPath":[],"Interceptor":[]},"PaintSize":{"Interceptor":[]},"PaintWorkletGlobalScope":{"WorkletGlobalScope":[],"Interceptor":[]},"ParagraphElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ParamElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ParentNode":{"Interceptor":[]},"PasswordCredential":{"Credential":[],"CredentialUserData":[],"Interceptor":[]},"Path2D":{"_CanvasPath":[],"Interceptor":[]},"PaymentAddress":{"Interceptor":[]},"PaymentInstruments":{"Interceptor":[]},"PaymentManager":{"Interceptor":[]},"PaymentRequest":{"EventTarget":[],"Interceptor":[]},"PaymentRequestEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"PaymentRequestUpdateEvent":{"Event":[],"Interceptor":[]},"PaymentResponse":{"Interceptor":[]},"Performance":{"EventTarget":[],"Interceptor":[]},"PerformanceEntry":{"Interceptor":[]},"PerformanceLongTaskTiming":{"PerformanceEntry":[],"Interceptor":[]},"PerformanceMark":{"PerformanceEntry":[],"Interceptor":[]},"PerformanceMeasure":{"PerformanceEntry":[],"Interceptor":[]},"PerformanceNavigation":{"Interceptor":[]},"PerformanceNavigationTiming":{"PerformanceResourceTiming":[],"PerformanceEntry":[],"Interceptor":[]},"PerformanceObserver":{"Interceptor":[]},"PerformanceObserverEntryList":{"Interceptor":[]},"PerformancePaintTiming":{"PerformanceEntry":[],"Interceptor":[]},"PerformanceResourceTiming":{"PerformanceEntry":[],"Interceptor":[]},"PerformanceServerTiming":{"Interceptor":[]},"PerformanceTiming":{"Interceptor":[]},"PermissionStatus":{"EventTarget":[],"Interceptor":[]},"Permissions":{"Interceptor":[]},"PhotoCapabilities":{"Interceptor":[]},"PictureElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Plugin":{"Interceptor":[]},"PluginArray":{"_PluginArray_Interceptor_ListMixin_ImmutableListMixin":[],"_PluginArray_Interceptor_ListMixin":[],"ListMixin":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"JSMutableIndexable":["Plugin"],"Interceptor":[],"Iterable":["Plugin"],"JSIndexable":["Plugin"]},"PointerEvent":{"MouseEvent":[],"UIEvent":[],"Event":[],"Interceptor":[]},"PopStateEvent":{"Event":[],"Interceptor":[]},"PositionError":{"Interceptor":[]},"PreElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Presentation":{"Interceptor":[]},"PresentationAvailability":{"EventTarget":[],"Interceptor":[]},"PresentationConnection":{"EventTarget":[],"Interceptor":[]},"PresentationConnectionAvailableEvent":{"Event":[],"Interceptor":[]},"PresentationConnectionCloseEvent":{"Event":[],"Interceptor":[]},"PresentationConnectionList":{"EventTarget":[],"Interceptor":[]},"PresentationReceiver":{"Interceptor":[]},"PresentationRequest":{"EventTarget":[],"Interceptor":[]},"ProcessingInstruction":{"CharacterData":[],"Node":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ChildNode":[],"Interceptor":[]},"ProgressElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ProgressEvent":{"Event":[],"Interceptor":[]},"PromiseRejectionEvent":{"Event":[],"Interceptor":[]},"PublicKeyCredential":{"Credential":[],"Interceptor":[]},"PushEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"PushManager":{"Interceptor":[]},"PushMessageData":{"Interceptor":[]},"PushSubscription":{"Interceptor":[]},"PushSubscriptionOptions":{"Interceptor":[]},"QuoteElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Range":{"Interceptor":[]},"RelatedApplication":{"Interceptor":[]},"RelativeOrientationSensor":{"OrientationSensor":[],"Sensor":[],"EventTarget":[],"Interceptor":[]},"RemotePlayback":{"EventTarget":[],"Interceptor":[]},"ReportBody":{"Interceptor":[]},"ReportingObserver":{"Interceptor":[]},"ResizeObserver":{"Interceptor":[]},"ResizeObserverEntry":{"Interceptor":[]},"RtcCertificate":{"Interceptor":[]},"RtcDataChannel":{"EventTarget":[],"Interceptor":[]},"RtcDataChannelEvent":{"Event":[],"Interceptor":[]},"RtcDtmfSender":{"EventTarget":[],"Interceptor":[]},"RtcDtmfToneChangeEvent":{"Event":[],"Interceptor":[]},"RtcIceCandidate":{"Interceptor":[]},"RtcLegacyStatsReport":{"Interceptor":[]},"RtcPeerConnection":{"EventTarget":[],"Interceptor":[]},"RtcPeerConnectionIceEvent":{"Event":[],"Interceptor":[]},"RtcRtpContributingSource":{"Interceptor":[]},"RtcRtpReceiver":{"Interceptor":[]},"RtcRtpSender":{"Interceptor":[]},"RtcSessionDescription":{"Interceptor":[]},"RtcStatsReport":{"_RtcStatsReport_Interceptor_MapMixin":[],"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"RtcStatsResponse":{"Interceptor":[]},"RtcTrackEvent":{"Event":[],"Interceptor":[]},"Screen":{"Interceptor":[]},"ScreenOrientation":{"EventTarget":[],"Interceptor":[]},"ScriptElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ScrollState":{"Interceptor":[]},"ScrollTimeline":{"AnimationTimeline":[],"Interceptor":[]},"SecurityPolicyViolationEvent":{"Event":[],"Interceptor":[]},"SelectElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Selection":{"Interceptor":[]},"Sensor":{"EventTarget":[],"Interceptor":[]},"SensorErrorEvent":{"Event":[],"Interceptor":[]},"ServiceWorker":{"AbstractWorker":[],"EventTarget":[],"Interceptor":[]},"ServiceWorkerContainer":{"EventTarget":[],"Interceptor":[]},"ServiceWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"_WindowTimers":[],"WindowBase64":[],"Interceptor":[]},"ServiceWorkerRegistration":{"EventTarget":[],"Interceptor":[]},"ShadowElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"ShadowRoot":{"DocumentFragment":[],"Node":[],"EventTarget":[],"NonElementParentNode":[],"ParentNode":[],"DocumentOrShadowRoot":[],"Interceptor":[]},"SharedArrayBuffer":{"Interceptor":[]},"SharedWorker":{"AbstractWorker":[],"EventTarget":[],"Interceptor":[]},"SharedWorkerGlobalScope":{"WorkerGlobalScope":[],"EventTarget":[],"_WindowTimers":[],"WindowBase64":[],"Interceptor":[]},"SlotElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"SourceBuffer":{"EventTarget":[],"Interceptor":[]},"SourceBufferList":{"_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin":[],"_SourceBufferList_EventTarget_ListMixin":[],"ListMixin":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EventTarget":[],"EfficientLengthIterable":["SourceBuffer"],"JSMutableIndexable":["SourceBuffer"],"Interceptor":[],"Iterable":["SourceBuffer"],"JSIndexable":["SourceBuffer"]},"SourceElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"SpanElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"SpeechGrammar":{"Interceptor":[]},"SpeechGrammarList":{"_SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin":[],"_SpeechGrammarList_Interceptor_ListMixin":[],"ListMixin":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"JSMutableIndexable":["SpeechGrammar"],"Interceptor":[],"Iterable":["SpeechGrammar"],"JSIndexable":["SpeechGrammar"]},"SpeechRecognition":{"EventTarget":[],"Interceptor":[]},"SpeechRecognitionAlternative":{"Interceptor":[]},"SpeechRecognitionError":{"Event":[],"Interceptor":[]},"SpeechRecognitionEvent":{"Event":[],"Interceptor":[]},"SpeechRecognitionResult":{"Interceptor":[]},"SpeechSynthesis":{"EventTarget":[],"Interceptor":[]},"SpeechSynthesisEvent":{"Event":[],"Interceptor":[]},"SpeechSynthesisUtterance":{"EventTarget":[],"Interceptor":[]},"SpeechSynthesisVoice":{"Interceptor":[]},"StaticRange":{"Interceptor":[]},"Storage":{"_Storage_Interceptor_MapMixin":[],"MapMixin":["String","String"],"Interceptor":[],"Map":["String","String"]},"StorageEvent":{"Event":[],"Interceptor":[]},"StorageManager":{"Interceptor":[]},"StyleElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"StyleMedia":{"Interceptor":[]},"StylePropertyMap":{"StylePropertyMapReadonly":[],"Interceptor":[]},"StylePropertyMapReadonly":{"Interceptor":[]},"StyleSheet":{"Interceptor":[]},"SyncEvent":{"ExtendableEvent":[],"Event":[],"Interceptor":[]},"SyncManager":{"Interceptor":[]},"TableCaptionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TableCellElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TableColElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TableElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TableRowElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TableSectionElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TaskAttributionTiming":{"PerformanceEntry":[],"Interceptor":[]},"TemplateElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Text":{"CharacterData":[],"Node":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ChildNode":[],"Interceptor":[]},"TextAreaElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TextDetector":{"Interceptor":[]},"TextEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"TextMetrics":{"Interceptor":[]},"TextTrack":{"EventTarget":[],"Interceptor":[]},"TextTrackCue":{"EventTarget":[],"Interceptor":[]},"TextTrackCueList":{"_TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin":[],"_TextTrackCueList_Interceptor_ListMixin":[],"ListMixin":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"JSMutableIndexable":["TextTrackCue"],"Interceptor":[],"Iterable":["TextTrackCue"],"JSIndexable":["TextTrackCue"]},"TextTrackList":{"_TextTrackList_EventTarget_ListMixin_ImmutableListMixin":[],"_TextTrackList_EventTarget_ListMixin":[],"ListMixin":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EventTarget":[],"EfficientLengthIterable":["TextTrack"],"JSMutableIndexable":["TextTrack"],"Interceptor":[],"Iterable":["TextTrack"],"JSIndexable":["TextTrack"]},"TimeElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TimeRanges":{"Interceptor":[]},"TitleElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Touch":{"Interceptor":[]},"TouchEvent":{"UIEvent":[],"Event":[],"Interceptor":[]},"TouchList":{"_TouchList_Interceptor_ListMixin_ImmutableListMixin":[],"_TouchList_Interceptor_ListMixin":[],"ListMixin":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"JSMutableIndexable":["Touch"],"Interceptor":[],"Iterable":["Touch"],"JSIndexable":["Touch"]},"TrackDefault":{"Interceptor":[]},"TrackDefaultList":{"Interceptor":[]},"TrackElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"TrackEvent":{"Event":[],"Interceptor":[]},"TransitionEvent":{"Event":[],"Interceptor":[]},"TreeWalker":{"Interceptor":[]},"TrustedHtml":{"Interceptor":[]},"TrustedScriptUrl":{"Interceptor":[]},"TrustedUrl":{"Interceptor":[]},"UIEvent":{"Event":[],"Interceptor":[]},"UListElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"UnderlyingSourceBase":{"Interceptor":[]},"UnknownElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Url":{"Interceptor":[]},"UrlSearchParams":{"Interceptor":[]},"UrlUtilsReadOnly":{"Interceptor":[]},"VR":{"EventTarget":[],"Interceptor":[]},"VRCoordinateSystem":{"Interceptor":[]},"VRDevice":{"EventTarget":[],"Interceptor":[]},"VRDeviceEvent":{"Event":[],"Interceptor":[]},"VRDisplay":{"EventTarget":[],"Interceptor":[]},"VRDisplayCapabilities":{"Interceptor":[]},"VRDisplayEvent":{"Event":[],"Interceptor":[]},"VREyeParameters":{"Interceptor":[]},"VRFrameData":{"Interceptor":[]},"VRFrameOfReference":{"VRCoordinateSystem":[],"Interceptor":[]},"VRPose":{"Interceptor":[]},"VRSession":{"EventTarget":[],"Interceptor":[]},"VRSessionEvent":{"Event":[],"Interceptor":[]},"VRStageBounds":{"Interceptor":[]},"VRStageBoundsPoint":{"Interceptor":[]},"VRStageParameters":{"Interceptor":[]},"ValidityState":{"Interceptor":[]},"VideoElement":{"MediaElement":[],"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[],"CanvasImageSource":[]},"VideoPlaybackQuality":{"Interceptor":[]},"VideoTrack":{"Interceptor":[]},"VideoTrackList":{"EventTarget":[],"Interceptor":[]},"VisualViewport":{"EventTarget":[],"Interceptor":[]},"VttCue":{"TextTrackCue":[],"EventTarget":[],"Interceptor":[]},"VttRegion":{"Interceptor":[]},"WebSocket":{"EventTarget":[],"Interceptor":[]},"WheelEvent":{"MouseEvent":[],"UIEvent":[],"Event":[],"Interceptor":[]},"Window":{"WindowEventHandlers":[],"WindowBase":[],"GlobalEventHandlers":[],"EventTarget":[],"_WindowTimers":[],"WindowBase64":[],"Interceptor":[]},"_BeforeUnloadEvent":{"_WrappedEvent":[],"BeforeUnloadEvent":[],"Event":[],"Interceptor":[]},"_BeforeUnloadEventStreamProvider":{"EventStreamProvider":["BeforeUnloadEvent"]},"WindowBase64":{"Interceptor":[]},"WindowClient":{"Client":[],"Interceptor":[]},"WindowEventHandlers":{"EventTarget":[],"Interceptor":[]},"Worker":{"AbstractWorker":[],"EventTarget":[],"Interceptor":[]},"WorkerGlobalScope":{"EventTarget":[],"_WindowTimers":[],"WindowBase64":[],"Interceptor":[]},"WorkerPerformance":{"EventTarget":[],"Interceptor":[]},"WorkletAnimation":{"Interceptor":[]},"WorkletGlobalScope":{"Interceptor":[]},"XPathEvaluator":{"Interceptor":[]},"XPathExpression":{"Interceptor":[]},"XPathNSResolver":{"Interceptor":[]},"XPathResult":{"Interceptor":[]},"XmlDocument":{"Document":[],"Node":[],"EventTarget":[],"Interceptor":[]},"XmlSerializer":{"Interceptor":[]},"XsltProcessor":{"Interceptor":[]},"_Attr":{"Node":[],"EventTarget":[],"Interceptor":[]},"_Bluetooth":{"Interceptor":[]},"_BluetoothCharacteristicProperties":{"Interceptor":[]},"_BluetoothDevice":{"EventTarget":[],"Interceptor":[]},"_BluetoothRemoteGATTCharacteristic":{"EventTarget":[],"Interceptor":[]},"_BluetoothRemoteGATTServer":{"Interceptor":[]},"_BluetoothRemoteGATTService":{"Interceptor":[]},"_BluetoothUUID":{"Interceptor":[]},"_BudgetService":{"Interceptor":[]},"_Cache":{"Interceptor":[]},"_CanvasPath":{"Interceptor":[]},"_Clipboard":{"EventTarget":[],"Interceptor":[]},"_CssRuleList":{"__CssRuleList_Interceptor_ListMixin_ImmutableListMixin":[],"__CssRuleList_Interceptor_ListMixin":[],"ListMixin":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"JSMutableIndexable":["CssRule"],"Interceptor":[],"Iterable":["CssRule"],"JSIndexable":["CssRule"]},"_DOMFileSystemSync":{"Interceptor":[]},"_DirectoryEntrySync":{"_EntrySync":[],"Interceptor":[]},"_DirectoryReaderSync":{"Interceptor":[]},"_DocumentType":{"Node":[],"EventTarget":[],"ChildNode":[],"Interceptor":[]},"_DomRect":{"DomRectReadOnly":[],"Rectangle":["num"],"Interceptor":[],"_RectangleBase":["num"]},"_EntrySync":{"Interceptor":[]},"_FileEntrySync":{"_EntrySync":[],"Interceptor":[]},"_FileReaderSync":{"Interceptor":[]},"_FileWriterSync":{"Interceptor":[]},"_GamepadList":{"__GamepadList_Interceptor_ListMixin_ImmutableListMixin":[],"__GamepadList_Interceptor_ListMixin":[],"ListMixin":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"JSMutableIndexable":["Gamepad?"],"Interceptor":[],"Iterable":["Gamepad?"],"JSIndexable":["Gamepad?"]},"_HTMLAllCollection":{"Interceptor":[]},"_HTMLDirectoryElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_HTMLFontElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_HTMLFrameElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_HTMLFrameSetElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"WindowEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_HTMLMarqueeElement":{"HtmlElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_Mojo":{"Interceptor":[]},"_MojoHandle":{"Interceptor":[]},"_MojoInterfaceInterceptor":{"EventTarget":[],"Interceptor":[]},"_MojoInterfaceRequestEvent":{"Event":[],"Interceptor":[]},"_MojoWatcher":{"Interceptor":[]},"_NFC":{"Interceptor":[]},"_NamedNodeMap":{"__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin":[],"__NamedNodeMap_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSMutableIndexable":["Node"],"Interceptor":[],"Iterable":["Node"],"JSIndexable":["Node"]},"_PagePopupController":{"Interceptor":[]},"_Report":{"Interceptor":[]},"_Request":{"Body":[],"Interceptor":[]},"_ResourceProgressEvent":{"ProgressEvent":[],"Event":[],"Interceptor":[]},"_Response":{"Body":[],"Interceptor":[]},"_SpeechRecognitionResultList":{"__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin":[],"__SpeechRecognitionResultList_Interceptor_ListMixin":[],"ListMixin":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"JSMutableIndexable":["SpeechRecognitionResult"],"Interceptor":[],"Iterable":["SpeechRecognitionResult"],"JSIndexable":["SpeechRecognitionResult"]},"_StyleSheetList":{"__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin":[],"__StyleSheetList_Interceptor_ListMixin":[],"ListMixin":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"JSMutableIndexable":["StyleSheet"],"Interceptor":[],"Iterable":["StyleSheet"],"JSIndexable":["StyleSheet"]},"_SubtleCrypto":{"Interceptor":[]},"_USB":{"EventTarget":[],"Interceptor":[]},"_USBAlternateInterface":{"Interceptor":[]},"_USBConfiguration":{"Interceptor":[]},"_USBConnectionEvent":{"Event":[],"Interceptor":[]},"_USBDevice":{"Interceptor":[]},"_USBEndpoint":{"Interceptor":[]},"_USBInTransferResult":{"Interceptor":[]},"_USBInterface":{"Interceptor":[]},"_USBIsochronousInTransferPacket":{"Interceptor":[]},"_USBIsochronousInTransferResult":{"Interceptor":[]},"_USBIsochronousOutTransferPacket":{"Interceptor":[]},"_USBIsochronousOutTransferResult":{"Interceptor":[]},"_USBOutTransferResult":{"Interceptor":[]},"_WindowTimers":{"Interceptor":[]},"_WorkerLocation":{"UrlUtilsReadOnly":[],"Interceptor":[]},"_WorkerNavigator":{"NavigatorConcurrentHardware":[],"NavigatorOnLine":[],"NavigatorID":[],"Interceptor":[]},"_Worklet":{"Interceptor":[]},"_AttributeMap":{"MapBase":["String","String"],"MapMixin":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"_AttributeMap":[],"MapBase":["String","String"],"MapMixin":["String","String"],"Map":["String","String"]},"_NamespacedAttributeMap":{"_AttributeMap":[],"MapBase":["String","String"],"MapMixin":["String","String"],"Map":["String","String"]},"_DataAttributeMap":{"MapBase":["String","String"],"MapMixin":["String","String"],"Map":["String","String"]},"WindowBase":{"EventTarget":[],"Interceptor":[]},"CssClassSet":{"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"_ContentCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_ContentCssListRect":{"_ContentCssRect":[],"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_PaddingCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_BorderCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"_MarginCssRect":{"CssRect":[],"Rectangle":["num"],"_RectangleBase":["num"]},"CssRect":{"Rectangle":["num"],"_RectangleBase":["num"]},"_MultiElementCssClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"_SetBase_Object_SetMixin":["String"],"SetMixin":["String"],"CssClassSet":[],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"_ElementCssClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"_SetBase_Object_SetMixin":["String"],"SetMixin":["String"],"CssClassSet":[],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"ElementStream":{"Stream":["1"]},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"ElementStream":["1"],"Stream":["1"]},"_ElementListEventStreamImpl":{"ElementStream":["1"],"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"CustomStream":{"Stream":["1"]},"_CustomEventStreamImpl":{"CustomStream":["1"],"Stream":["1"]},"_CustomKeyEventStreamImpl":{"_CustomEventStreamImpl":["KeyEvent"],"CustomStream":["KeyEvent"],"Stream":["KeyEvent"]},"_CustomEventStreamProvider":{"EventStreamProvider":["1"]},"_Html5NodeValidator":{"NodeValidator":[]},"ImmutableListMixin":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_KeyboardEventHandler":{"EventStreamProvider":["KeyEvent"]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_CustomElementNodeValidator":{"_SimpleNodeValidator":[],"NodeValidator":[]},"_TemplatingNodeValidator":{"_SimpleNodeValidator":[],"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"_WrappedList":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"NodeListWrapper":[]},"_WrappedIterator":{"Iterator":["1"]},"FixedSizeListIterator":{"Iterator":["1"]},"_VariableSizeListIterator":{"Iterator":["1"]},"_JSElementUpgrader":{"ElementUpgrader":[]},"_DOMWindowCrossFrame":{"WindowBase":[],"EventTarget":[],"Interceptor":[]},"_LocationCrossFrame":{"LocationBase":[]},"_HistoryCrossFrame":{"HistoryBase":[]},"KeyEvent":{"KeyboardEvent":[],"_WrappedEvent":[],"UIEvent":[],"Event":[],"Interceptor":[]},"_WrappedEvent":{"Event":[],"Interceptor":[]},"_TrustedHtmlTreeSanitizer":{"NodeTreeSanitizer":[]},"_SameOriginUriPolicy":{"UriPolicy":[]},"_ThrowsNodeValidator":{"NodeValidator":[]},"_ValidatingTreeSanitizer":{"NodeTreeSanitizer":[]},"_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase":{"Interceptor":[],"CssStyleDeclarationBase":[]},"_DomRectList_Interceptor_ListMixin":{"ListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"Interceptor":[],"Iterable":["Rectangle<num>"]},"_DomRectList_Interceptor_ListMixin_ImmutableListMixin":{"_DomRectList_Interceptor_ListMixin":[],"ListMixin":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"Interceptor":[],"Iterable":["Rectangle<num>"]},"_DomStringList_Interceptor_ListMixin":{"ListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Interceptor":[],"Iterable":["String"]},"_DomStringList_Interceptor_ListMixin_ImmutableListMixin":{"_DomStringList_Interceptor_ListMixin":[],"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Interceptor":[],"Iterable":["String"]},"_FileList_Interceptor_ListMixin":{"ListMixin":["File"],"List":["File"],"EfficientLengthIterable":["File"],"Interceptor":[],"Iterable":["File"]},"_FileList_Interceptor_ListMixin_ImmutableListMixin":{"_FileList_Interceptor_ListMixin":[],"ListMixin":["File"],"ImmutableListMixin":["File"],"List":["File"],"EfficientLengthIterable":["File"],"Interceptor":[],"Iterable":["File"]},"_HtmlCollection_Interceptor_ListMixin":{"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin":{"_HtmlCollection_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"_MidiInputMap_Interceptor_MapMixin":{"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"_MidiOutputMap_Interceptor_MapMixin":{"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"_MimeTypeArray_Interceptor_ListMixin":{"ListMixin":["MimeType"],"List":["MimeType"],"EfficientLengthIterable":["MimeType"],"Interceptor":[],"Iterable":["MimeType"]},"_MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin":{"_MimeTypeArray_Interceptor_ListMixin":[],"ListMixin":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"EfficientLengthIterable":["MimeType"],"Interceptor":[],"Iterable":["MimeType"]},"_NodeList_Interceptor_ListMixin":{"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"_NodeList_Interceptor_ListMixin_ImmutableListMixin":{"_NodeList_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"_PluginArray_Interceptor_ListMixin":{"ListMixin":["Plugin"],"List":["Plugin"],"EfficientLengthIterable":["Plugin"],"Interceptor":[],"Iterable":["Plugin"]},"_PluginArray_Interceptor_ListMixin_ImmutableListMixin":{"_PluginArray_Interceptor_ListMixin":[],"ListMixin":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"EfficientLengthIterable":["Plugin"],"Interceptor":[],"Iterable":["Plugin"]},"_RtcStatsReport_Interceptor_MapMixin":{"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"_SourceBufferList_EventTarget_ListMixin":{"ListMixin":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"EfficientLengthIterable":["SourceBuffer"],"Interceptor":[],"Iterable":["SourceBuffer"]},"_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin":{"_SourceBufferList_EventTarget_ListMixin":[],"ListMixin":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"EfficientLengthIterable":["SourceBuffer"],"Interceptor":[],"Iterable":["SourceBuffer"]},"_SpeechGrammarList_Interceptor_ListMixin":{"ListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"Interceptor":[],"Iterable":["SpeechGrammar"]},"_SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin":{"_SpeechGrammarList_Interceptor_ListMixin":[],"ListMixin":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"Interceptor":[],"Iterable":["SpeechGrammar"]},"_Storage_Interceptor_MapMixin":{"MapMixin":["String","String"],"Interceptor":[],"Map":["String","String"]},"_TextTrackCueList_Interceptor_ListMixin":{"ListMixin":["TextTrackCue"],"List":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"Interceptor":[],"Iterable":["TextTrackCue"]},"_TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin":{"_TextTrackCueList_Interceptor_ListMixin":[],"ListMixin":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"Interceptor":[],"Iterable":["TextTrackCue"]},"_TextTrackList_EventTarget_ListMixin":{"ListMixin":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"EfficientLengthIterable":["TextTrack"],"Interceptor":[],"Iterable":["TextTrack"]},"_TextTrackList_EventTarget_ListMixin_ImmutableListMixin":{"_TextTrackList_EventTarget_ListMixin":[],"ListMixin":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"EfficientLengthIterable":["TextTrack"],"Interceptor":[],"Iterable":["TextTrack"]},"_TouchList_Interceptor_ListMixin":{"ListMixin":["Touch"],"List":["Touch"],"EfficientLengthIterable":["Touch"],"Interceptor":[],"Iterable":["Touch"]},"_TouchList_Interceptor_ListMixin_ImmutableListMixin":{"_TouchList_Interceptor_ListMixin":[],"ListMixin":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"EfficientLengthIterable":["Touch"],"Interceptor":[],"Iterable":["Touch"]},"__CssRuleList_Interceptor_ListMixin":{"ListMixin":["CssRule"],"List":["CssRule"],"EfficientLengthIterable":["CssRule"],"Interceptor":[],"Iterable":["CssRule"]},"__CssRuleList_Interceptor_ListMixin_ImmutableListMixin":{"__CssRuleList_Interceptor_ListMixin":[],"ListMixin":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"EfficientLengthIterable":["CssRule"],"Interceptor":[],"Iterable":["CssRule"]},"__CssStyleDeclarationSet_Object_CssStyleDeclarationBase":{"CssStyleDeclarationBase":[]},"__GamepadList_Interceptor_ListMixin":{"ListMixin":["Gamepad?"],"List":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"Interceptor":[],"Iterable":["Gamepad?"]},"__GamepadList_Interceptor_ListMixin_ImmutableListMixin":{"__GamepadList_Interceptor_ListMixin":[],"ListMixin":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"Interceptor":[],"Iterable":["Gamepad?"]},"__NamedNodeMap_Interceptor_ListMixin":{"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin":{"__NamedNodeMap_Interceptor_ListMixin":[],"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Interceptor":[],"Iterable":["Node"]},"__SpeechRecognitionResultList_Interceptor_ListMixin":{"ListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"Interceptor":[],"Iterable":["SpeechRecognitionResult"]},"__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin":{"__SpeechRecognitionResultList_Interceptor_ListMixin":[],"ListMixin":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"Interceptor":[],"Iterable":["SpeechRecognitionResult"]},"__StyleSheetList_Interceptor_ListMixin":{"ListMixin":["StyleSheet"],"List":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"Interceptor":[],"Iterable":["StyleSheet"]},"__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin":{"__StyleSheetList_Interceptor_ListMixin":[],"ListMixin":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"Interceptor":[],"Iterable":["StyleSheet"]},"_TypedImageData":{"ImageData":[],"Interceptor":[]},"_StructuredCloneDart2Js":{"_StructuredClone":[]},"_AcceptStructuredCloneDart2Js":{"_AcceptStructuredClone":[]},"CssClassSetImpl":{"SetBase":["String"],"_SetBase_Object_SetMixin":["String"],"SetMixin":["String"],"CssClassSet":[],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"FilteredElementList":{"ListBase":["Element"],"_ListBase_Object_ListMixin":["Element"],"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"NodeListWrapper":[]},"Cursor":{"Interceptor":[]},"CursorWithValue":{"Cursor":[],"Interceptor":[]},"Database":{"EventTarget":[],"Interceptor":[]},"IdbFactory":{"Interceptor":[]},"Index":{"Interceptor":[]},"KeyRange":{"Interceptor":[]},"ObjectStore":{"Interceptor":[]},"Observation":{"Interceptor":[]},"Observer":{"Interceptor":[]},"ObserverChanges":{"Interceptor":[]},"OpenDBRequest":{"Request":[],"EventTarget":[],"Interceptor":[]},"Request":{"EventTarget":[],"Interceptor":[]},"Transaction":{"EventTarget":[],"Interceptor":[]},"VersionChangeEvent":{"Event":[],"Interceptor":[]},"NullRejectionException":{"Exception":[]},"AnalyserNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"AudioBuffer":{"Interceptor":[]},"AudioBufferSourceNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"Interceptor":[]},"AudioContext":{"BaseAudioContext":[],"EventTarget":[],"Interceptor":[]},"AudioDestinationNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"AudioListener":{"Interceptor":[]},"AudioNode":{"EventTarget":[],"Interceptor":[]},"AudioParam":{"Interceptor":[]},"AudioParamMap":{"_AudioParamMap_Interceptor_MapMixin":[],"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"AudioProcessingEvent":{"Event":[],"Interceptor":[]},"AudioScheduledSourceNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"AudioTrack":{"Interceptor":[]},"AudioTrackList":{"EventTarget":[],"Interceptor":[]},"AudioWorkletGlobalScope":{"WorkletGlobalScope":[],"Interceptor":[]},"AudioWorkletNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"AudioWorkletProcessor":{"Interceptor":[]},"BaseAudioContext":{"EventTarget":[],"Interceptor":[]},"BiquadFilterNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"ChannelMergerNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"ChannelSplitterNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"ConstantSourceNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"Interceptor":[]},"ConvolverNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"DelayNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"DynamicsCompressorNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"GainNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"IirFilterNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"MediaElementAudioSourceNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"MediaStreamAudioDestinationNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"MediaStreamAudioSourceNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"OfflineAudioCompletionEvent":{"Event":[],"Interceptor":[]},"OfflineAudioContext":{"BaseAudioContext":[],"EventTarget":[],"Interceptor":[]},"OscillatorNode":{"AudioScheduledSourceNode":[],"AudioNode":[],"EventTarget":[],"Interceptor":[]},"PannerNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"PeriodicWave":{"Interceptor":[]},"ScriptProcessorNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"StereoPannerNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"WaveShaperNode":{"AudioNode":[],"EventTarget":[],"Interceptor":[]},"_AudioParamMap_Interceptor_MapMixin":{"MapMixin":["String","@"],"Interceptor":[],"Map":["String","@"]},"ActiveInfo":{"Interceptor":[]},"AngleInstancedArrays":{"Interceptor":[]},"Buffer":{"Interceptor":[]},"Canvas":{"Interceptor":[]},"ColorBufferFloat":{"Interceptor":[]},"CompressedTextureAstc":{"Interceptor":[]},"CompressedTextureAtc":{"Interceptor":[]},"CompressedTextureETC1":{"Interceptor":[]},"CompressedTextureEtc":{"Interceptor":[]},"CompressedTexturePvrtc":{"Interceptor":[]},"CompressedTextureS3TC":{"Interceptor":[]},"CompressedTextureS3TCsRgb":{"Interceptor":[]},"ContextEvent":{"Event":[],"Interceptor":[]},"DebugRendererInfo":{"Interceptor":[]},"DebugShaders":{"Interceptor":[]},"DepthTexture":{"Interceptor":[]},"DrawBuffers":{"Interceptor":[]},"EXTsRgb":{"Interceptor":[]},"ExtBlendMinMax":{"Interceptor":[]},"ExtColorBufferFloat":{"Interceptor":[]},"ExtColorBufferHalfFloat":{"Interceptor":[]},"ExtDisjointTimerQuery":{"Interceptor":[]},"ExtDisjointTimerQueryWebGL2":{"Interceptor":[]},"ExtFragDepth":{"Interceptor":[]},"ExtShaderTextureLod":{"Interceptor":[]},"ExtTextureFilterAnisotropic":{"Interceptor":[]},"Framebuffer":{"Interceptor":[]},"GetBufferSubDataAsync":{"Interceptor":[]},"LoseContext":{"Interceptor":[]},"OesElementIndexUint":{"Interceptor":[]},"OesStandardDerivatives":{"Interceptor":[]},"OesTextureFloat":{"Interceptor":[]},"OesTextureFloatLinear":{"Interceptor":[]},"OesTextureHalfFloat":{"Interceptor":[]},"OesTextureHalfFloatLinear":{"Interceptor":[]},"OesVertexArrayObject":{"Interceptor":[]},"Program":{"Interceptor":[]},"Query":{"Interceptor":[]},"Renderbuffer":{"Interceptor":[]},"RenderingContext":{"Interceptor":[],"CanvasRenderingContext":[]},"RenderingContext2":{"_WebGL2RenderingContextBase":[],"_WebGLRenderingContextBase":[],"Interceptor":[]},"Sampler":{"Interceptor":[]},"Shader":{"Interceptor":[]},"ShaderPrecisionFormat":{"Interceptor":[]},"Sync":{"Interceptor":[]},"Texture":{"Interceptor":[]},"TimerQueryExt":{"Interceptor":[]},"TransformFeedback":{"Interceptor":[]},"UniformLocation":{"Interceptor":[]},"VertexArrayObject":{"Interceptor":[]},"VertexArrayObjectOes":{"Interceptor":[]},"WebGL":{"Interceptor":[]},"_WebGL2RenderingContextBase":{"_WebGLRenderingContextBase":[],"Interceptor":[]},"_WebGLRenderingContextBase":{"Interceptor":[]},"SqlDatabase":{"Interceptor":[]},"SqlError":{"Interceptor":[]},"SqlResultSet":{"Interceptor":[]},"SqlResultSetRowList":{"_SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin":[],"_SqlResultSetRowList_Interceptor_ListMixin":[],"ListMixin":["Map<@,@>"],"ImmutableListMixin":["Map<@,@>"],"List":["Map<@,@>"],"EfficientLengthIterable":["Map<@,@>"],"Interceptor":[],"Iterable":["Map<@,@>"]},"SqlTransaction":{"Interceptor":[]},"_SqlResultSetRowList_Interceptor_ListMixin":{"ListMixin":["Map<@,@>"],"List":["Map<@,@>"],"EfficientLengthIterable":["Map<@,@>"],"Interceptor":[],"Iterable":["Map<@,@>"]},"_SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin":{"_SqlResultSetRowList_Interceptor_ListMixin":[],"ListMixin":["Map<@,@>"],"ImmutableListMixin":["Map<@,@>"],"List":["Map<@,@>"],"EfficientLengthIterable":["Map<@,@>"],"Interceptor":[],"Iterable":["Map<@,@>"]},"ArchiveException":{"FormatException":[],"Exception":[]},"InputStream":{"InputStreamBase":[]},"OutputStream":{"OutputStreamBase":[]},"_ZLibDecoder":{"ZLibDecoderBase":[]},"BmpInfo":{"DecodeInfo":[]},"BmpDecoder":{"Decoder":[]},"DibDecoder":{"BmpDecoder":[],"Decoder":[]},"ExrB44Compressor":{"ExrCompressor":[]},"InternalExrB44Compressor":{"InternalExrCompressor":[],"ExrB44Compressor":[],"ExrCompressor":[]},"InternalExrCompressor":{"ExrCompressor":[]},"ExrImage":{"DecodeInfo":[]},"InternalExrPart":{"ExrPart":[]},"ExrPizCompressor":{"ExrCompressor":[]},"InternalExrPizCompressor":{"InternalExrCompressor":[],"ExrPizCompressor":[],"ExrCompressor":[]},"ExrPxr24Compressor":{"ExrCompressor":[]},"InternalExrPxr24Compressor":{"InternalExrCompressor":[],"ExrPxr24Compressor":[],"ExrCompressor":[]},"ExrRleCompressor":{"ExrCompressor":[]},"InternalExrRleCompressor":{"InternalExrCompressor":[],"ExrRleCompressor":[],"ExrCompressor":[]},"ExrZipCompressor":{"ExrCompressor":[]},"InternalExrZipCompressor":{"InternalExrCompressor":[],"ExrZipCompressor":[],"ExrCompressor":[]},"ExrDecoder":{"Decoder":[]},"InternalGifImageDesc":{"GifImageDesc":[]},"GifInfo":{"DecodeInfo":[]},"GifDecoder":{"Decoder":[]},"IcoDecoder":{"Decoder":[]},"IcoInfo":{"DecodeInfo":[]},"IcoBmpInfo":{"BmpInfo":[],"DecodeInfo":[]},"JpegDecoder":{"Decoder":[]},"JpegEncoder":{"Encoder":[]},"InternalPngFrame":{"PngFrame":[]},"PngInfo":{"DecodeInfo":[]},"InternalPngInfo":{"PngInfo":[],"DecodeInfo":[]},"PngDecoder":{"Decoder":[]},"PsdBevelEffect":{"PsdEffect":[]},"PsdDropShadowEffect":{"PsdEffect":[]},"PsdInnerGlowEffect":{"PsdEffect":[]},"PsdInnerShadowEffect":{"PsdEffect":[]},"PsdOuterGlowEffect":{"PsdEffect":[]},"PsdSolidFillEffect":{"PsdEffect":[]},"PsdLayerAdditionalData":{"PsdLayerData":[]},"PsdLayerSectionDivider":{"PsdLayerData":[]},"PsdImage":{"DecodeInfo":[]},"PsdDecoder":{"Decoder":[]},"TgaInfo":{"DecodeInfo":[]},"TgaDecoder":{"Decoder":[]},"TiffInfo":{"DecodeInfo":[]},"TiffDecoder":{"Decoder":[]},"InternalVP8L":{"VP8L":[]},"InternalWebPFrame":{"WebPFrame":[]},"WebPInfo":{"DecodeInfo":[]},"InternalWebPInfo":{"WebPInfo":[],"DecodeInfo":[]},"WebPDecoder":{"Decoder":[]},"ImageException":{"Exception":[]},"_MD5":{"_HashBase":[]},"_SHA1":{"_HashBase":[]},"HttpServer":{"Stream":["HttpRequest0"]},"HttpSession":{"Map":["@","@"]},"ContentType":{"HeaderValue":[]},"HttpRequest0":{"Stream":["Uint8List"]},"HttpResponse":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"HttpClientRequest":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"HttpClientResponse":{"Stream":["List<int>"]},"HttpClientBasicCredentials":{"HttpClientCredentials":[]},"HttpClientDigestCredentials":{"HttpClientCredentials":[]},"HttpException":{"IOException":[],"Exception":[]},"RedirectException":{"HttpException":[],"IOException":[],"Exception":[]},"_HttpHeaders":{"HttpHeaders":[]},"_HeaderValue":{"HeaderValue":[]},"_ContentType":{"_HeaderValue":[],"ContentType":[],"HeaderValue":[]},"_Cookie":{"Cookie":[]},"_CopyingBytesBuilder0":{"BytesBuilder":[]},"_HttpIncoming":{"Stream":["Uint8List"]},"_HttpInboundMessageListInt":{"Stream":["List<int>"]},"_HttpInboundMessage":{"Stream":["Uint8List"]},"_HttpRequest":{"_HttpInboundMessage":[],"HttpRequest0":[],"Stream":["Uint8List"]},"_HttpClientResponse":{"_HttpInboundMessageListInt":[],"HttpClientResponse":[],"Stream":["List<int>"]},"_ToUint8List":{"Converter":["List<int>","Uint8List"],"StreamTransformerBase":["List<int>","Uint8List"],"StreamTransformer":["List<int>","Uint8List"]},"_Uint8ListConversionSink":{"Sink":["List<int>"]},"_StreamSinkImpl":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpOutboundMessage":{"_IOSinkImpl":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpResponse":{"_HttpOutboundMessage":["HttpResponse"],"_IOSinkImpl":[],"HttpResponse":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpClientRequest":{"_HttpOutboundMessage":["HttpClientResponse"],"_IOSinkImpl":[],"HttpClientRequest":[],"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpGZipSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_HttpOutgoing":{"StreamConsumer":["List<int>"]},"_HttpClient":{"HttpClient":[]},"_HttpConnection":{"__HttpConnection_LinkedListEntry__ServiceObject":[],"LinkedListEntry":["_HttpConnection"],"_ServiceObject":[]},"_HttpServer":{"__HttpServer_Stream__ServiceObject":[],"HttpServer":[],"Stream":["HttpRequest0"],"_ServiceObject":[]},"_HttpConnectionInfo":{"HttpConnectionInfo":[]},"_DetachedSocket":{"Socket":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_SiteCredentials":{"_Credentials":[]},"_ProxyCredentials":{"_Credentials":[]},"_HttpClientCredentials":{"HttpClientCredentials":[]},"_HttpClientBasicCredentials":{"_HttpClientCredentials":[],"HttpClientBasicCredentials":[],"HttpClientCredentials":[]},"_HttpClientDigestCredentials":{"_HttpClientCredentials":[],"HttpClientDigestCredentials":[],"HttpClientCredentials":[]},"_RedirectInfo":{"RedirectInfo":[]},"_HttpDetachedStreamSubscription":{"StreamSubscription":["Uint8List"]},"_HttpDetachedIncoming":{"Stream":["Uint8List"]},"_HttpParser":{"Stream":["_HttpIncoming"]},"_HttpSession":{"HttpSession":[],"Map":["@","@"]},"_HttpOverridesScope":{"HttpOverrides":[]},"WebSocketTransformer":{"StreamTransformer":["HttpRequest0","WebSocket0"]},"WebSocket0":{"StreamSink":["@"],"EventSink":["@"],"Stream":["@"],"Sink":["@"],"StreamConsumer":["@"]},"WebSocketException":{"IOException":[],"Exception":[]},"_WebSocketProtocolTransformer":{"StreamTransformerBase":["List<int>","@"],"EventSink":["List<int>"],"StreamTransformer":["List<int>","@"],"Sink":["List<int>"]},"_WebSocketTransformerImpl":{"StreamTransformerBase":["HttpRequest0","WebSocket0"],"WebSocketTransformer":[],"StreamTransformer":["HttpRequest0","WebSocket0"]},"_WebSocketOutgoingTransformer":{"StreamTransformerBase":["@","List<int>"],"EventSink":["@"],"StreamTransformer":["@","List<int>"],"Sink":["@"]},"_WebSocketConsumer":{"StreamConsumer":["@"]},"_WebSocketImpl":{"WebSocket0":[],"StreamSink":["@"],"__WebSocketImpl_Stream__ServiceObject":[],"EventSink":["@"],"Stream":["@"],"_ServiceObject":[],"Sink":["@"],"StreamConsumer":["@"]},"__HttpConnection_LinkedListEntry__ServiceObject":{"LinkedListEntry":["_HttpConnection"],"_ServiceObject":[]},"__HttpServer_Stream__ServiceObject":{"Stream":["HttpRequest0"],"_ServiceObject":[]},"__WebSocketImpl_Stream__ServiceObject":{"Stream":["@"],"_ServiceObject":[]},"_LazyMangledInstanceNamesMap":{"_LazyMangledNamesMap":[]},"_FakeUserTag":{"UserTag":[]},"Gauge":{"Metric":[]},"Counter":{"Metric":[]},"IOException":{"Exception":[]},"OSError":{"Exception":[]},"ZLibCodec":{"Codec":["List<int>","List<int>"]},"GZipCodec":{"Codec":["List<int>","List<int>"]},"ZLibEncoder":{"Converter":["List<int>","List<int>"],"StreamTransformerBase":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"]},"ZLibDecoder0":{"Converter":["List<int>","List<int>"],"StreamTransformerBase":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"]},"_BufferSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ZLibEncoderSink":{"_FilterSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ZLibDecoderSink":{"_FilterSink":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_FilterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Directory":{"FileSystemEntity":[]},"_Directory":{"Directory":[],"FileSystemEntity":[]},"File0":{"FileSystemEntity":[]},"FileSystemException":{"IOException":[],"Exception":[]},"_FileStream":{"Stream":["List<int>"]},"_FileStreamConsumer":{"StreamConsumer":["List<int>"]},"_File":{"File0":[],"FileSystemEntity":[]},"_RandomAccessFile":{"RandomAccessFile":[]},"FileSystemCreateEvent":{"FileSystemEvent":[]},"FileSystemModifyEvent":{"FileSystemEvent":[]},"FileSystemDeleteEvent":{"FileSystemEvent":[]},"FileSystemMoveEvent":{"FileSystemEvent":[]},"_ReadWriteResourceInfo":{"_IOResourceInfo":[]},"_FileResourceInfo":{"_ReadWriteResourceInfo":[],"_IOResourceInfo":[]},"_SpawnedProcessResourceInfo":{"_IOResourceInfo":[]},"IOSink":{"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_StreamSinkImpl0":{"StreamSink":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl0":{"_StreamSinkImpl0":["List<int>"],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"Link":{"FileSystemEntity":[]},"_Link":{"Link":[],"FileSystemEntity":[]},"_IOOverridesScope":{"IOOverrides":[]},"_CaseInsensitiveStringMap":{"MapBase":["String","1"],"MapMixin":["String","1"],"Map":["String","1"]},"SignalException":{"IOException":[],"Exception":[]},"ProcessException":{"IOException":[],"Exception":[]},"SecureServerSocket":{"Stream":["SecureSocket"]},"RawSecureServerSocket":{"Stream":["RawSecureSocket"]},"SecureSocket":{"Socket":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"RawSecureSocket":{"RawSocket":[],"Stream":["RawSocketEvent"]},"_RawSecureSocket":{"RawSecureSocket":[],"RawSocket":[],"Stream":["RawSocketEvent"]},"TlsException":{"IOException":[],"Exception":[]},"HandshakeException":{"TlsException":[],"IOException":[],"Exception":[]},"CertificateException":{"TlsException":[],"IOException":[],"Exception":[]},"RawServerSocket":{"Stream":["RawSocket"]},"ServerSocket":{"Stream":["Socket"]},"RawSocket":{"Stream":["RawSocketEvent"]},"Socket":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"RawDatagramSocket":{"Stream":["RawSocketEvent"]},"SocketException":{"IOException":[],"Exception":[]},"_StdStream":{"Stream":["List<int>"]},"Stdin":{"_StdStream":[],"Stream":["List<int>"]},"Stdout":{"_StdSink":[],"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"StdoutException":{"IOException":[],"Exception":[]},"StdinException":{"IOException":[],"Exception":[]},"_StdConsumer":{"StreamConsumer":["List<int>"]},"_StdSink":{"IOSink":[],"StreamSink":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"SystemEncoding":{"Encoding":[],"Codec":["String","List<int>"]},"_WindowsCodePageEncoder":{"Converter":["String","List<int>"],"StreamTransformerBase":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_WindowsCodePageEncoderSink":{"StringConversionSinkBase":[],"StringConversionSinkMixin":[],"StringConversionSink":[],"ChunkedConversionSink":["String"],"Sink":["String"]},"_WindowsCodePageDecoder":{"Converter":["List<int>","String"],"StreamTransformerBase":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"_WindowsCodePageDecoderSink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ReceivePortImpl":{"ReceivePort":[],"Stream":["@"]},"IsolateSpawnException":{"Exception":[]},"SendPort":{"Capability":[]},"ReceivePort":{"Stream":["@"]},"RemoteError":{"Error":[]},"JsFunction":{"JsObject":[]},"JsArray":{"_JsArray_JsObject_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JsObject":[],"Iterable":["1"]},"_JsArray_JsObject_ListMixin":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JsObject":[],"Iterable":["1"]},"_JSRandom":{"Random":[]},"_Random":{"Random":[]},"_JSSecureRandom":{"Random":[]},"Rectangle":{"_RectangleBase":["1"]},"MutableRectangle":{"Rectangle":["1"],"_RectangleBase":["1"]},"AElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"Interceptor":[]},"Angle":{"Interceptor":[]},"AnimateElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"AnimateMotionElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"AnimateTransformElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"AnimatedAngle":{"Interceptor":[]},"AnimatedBoolean":{"Interceptor":[]},"AnimatedEnumeration":{"Interceptor":[]},"AnimatedInteger":{"Interceptor":[]},"AnimatedLength":{"Interceptor":[]},"AnimatedLengthList":{"Interceptor":[]},"AnimatedNumber":{"Interceptor":[]},"AnimatedNumberList":{"Interceptor":[]},"AnimatedPreserveAspectRatio":{"Interceptor":[]},"AnimatedRect":{"Interceptor":[]},"AnimatedString":{"Interceptor":[]},"AnimatedTransformList":{"Interceptor":[]},"AnimationElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"CircleElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"ClipPathElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"DefsElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"DescElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"DiscardElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"EllipseElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"FEBlendElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEColorMatrixElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEComponentTransferElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FECompositeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEConvolveMatrixElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEDiffuseLightingElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEDisplacementMapElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEDistantLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEFloodElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEFuncAElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEFuncBElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEFuncGElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEFuncRElement":{"_SVGComponentTransferFunctionElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEGaussianBlurElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEImageElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"UriReference":[],"Interceptor":[]},"FEMergeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEMergeNodeElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FEMorphologyElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEOffsetElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FEPointLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FESpecularLightingElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FESpotLightElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"FETileElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FETurbulenceElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"FilterElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"FilterPrimitiveStandardAttributes":{"Interceptor":[]},"FitToViewBox":{"Interceptor":[]},"ForeignObjectElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"GElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"GeometryElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"GraphicsElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"ImageElement0":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"Interceptor":[]},"Length":{"Interceptor":[]},"LengthList":{"_LengthList_Interceptor_ListMixin_ImmutableListMixin":[],"_LengthList_Interceptor_ListMixin":[],"ListMixin":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Interceptor":[],"Iterable":["Length"]},"LineElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"LinearGradientElement":{"_GradientElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"MarkerElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FitToViewBox":[],"Interceptor":[]},"MaskElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"Matrix":{"Interceptor":[]},"MetadataElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Number":{"Interceptor":[]},"NumberList":{"_NumberList_Interceptor_ListMixin_ImmutableListMixin":[],"_NumberList_Interceptor_ListMixin":[],"ListMixin":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Interceptor":[],"Iterable":["Number"]},"PathElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"PatternElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FitToViewBox":[],"UriReference":[],"Tests":[],"Interceptor":[]},"Point":{"Interceptor":[]},"PointList":{"Interceptor":[]},"PolygonElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"PolylineElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"PreserveAspectRatio":{"Interceptor":[]},"RadialGradientElement":{"_GradientElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"Rect":{"Interceptor":[]},"RectElement":{"GeometryElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"SetElement":{"AnimationElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"StopElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"StringList":{"_StringList_Interceptor_ListMixin_ImmutableListMixin":[],"_StringList_Interceptor_ListMixin":[],"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Interceptor":[],"Iterable":["String"]},"StyleElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"AttributeClassSet":{"CssClassSetImpl":[],"SetBase":["String"],"_SetBase_Object_SetMixin":["String"],"SetMixin":["String"],"CssClassSet":[],"Set":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"]},"SvgElement":{"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"SvgSvgElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"FitToViewBox":[],"ZoomAndPan":[],"Interceptor":[]},"SwitchElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"SymbolElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FitToViewBox":[],"Interceptor":[]},"TSpanElement":{"TextPositioningElement":[],"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"Tests":{"Interceptor":[]},"TextContentElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"TextElement":{"TextPositioningElement":[],"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"TextPathElement":{"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"Interceptor":[]},"TextPositioningElement":{"TextContentElement":[],"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"Interceptor":[]},"TitleElement0":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"Transform":{"Interceptor":[]},"TransformList":{"_TransformList_Interceptor_ListMixin_ImmutableListMixin":[],"_TransformList_Interceptor_ListMixin":[],"ListMixin":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"Interceptor":[],"Iterable":["Transform"]},"UnitTypes":{"Interceptor":[]},"UriReference":{"Interceptor":[]},"UseElement":{"GraphicsElement":[],"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Tests":[],"UriReference":[],"Interceptor":[]},"ViewElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FitToViewBox":[],"ZoomAndPan":[],"Interceptor":[]},"ZoomAndPan":{"Interceptor":[]},"_GradientElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"_SVGComponentTransferFunctionElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"Interceptor":[]},"_SVGFEDropShadowElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"FilterPrimitiveStandardAttributes":[],"Interceptor":[]},"_SVGMPathElement":{"SvgElement":[],"Element":[],"Node":[],"GlobalEventHandlers":[],"EventTarget":[],"NonDocumentTypeChildNode":[],"ParentNode":[],"ChildNode":[],"NoncedElement":[],"UriReference":[],"Interceptor":[]},"_LengthList_Interceptor_ListMixin":{"ListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Interceptor":[],"Iterable":["Length"]},"_LengthList_Interceptor_ListMixin_ImmutableListMixin":{"_LengthList_Interceptor_ListMixin":[],"ListMixin":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Interceptor":[],"Iterable":["Length"]},"_NumberList_Interceptor_ListMixin":{"ListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Interceptor":[],"Iterable":["Number"]},"_NumberList_Interceptor_ListMixin_ImmutableListMixin":{"_NumberList_Interceptor_ListMixin":[],"ListMixin":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Interceptor":[],"Iterable":["Number"]},"_StringList_Interceptor_ListMixin":{"ListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Interceptor":[],"Iterable":["String"]},"_StringList_Interceptor_ListMixin_ImmutableListMixin":{"_StringList_Interceptor_ListMixin":[],"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Interceptor":[],"Iterable":["String"]},"_TransformList_Interceptor_ListMixin":{"ListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"Interceptor":[],"Iterable":["Transform"]},"_TransformList_Interceptor_ListMixin_ImmutableListMixin":{"_TransformList_Interceptor_ListMixin":[],"ListMixin":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"Interceptor":[],"Iterable":["Transform"]},"_TypedIntList":{"TypedData":[]},"_TypedFloatList":{"TypedData":[]},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Int64List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Uint64List":{"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"TypedData":[]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Iterable":["double"],"TypedData":[]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Iterable":["double"],"TypedData":[]},"Float32x4List":{"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"TypedData":[]},"Int32x4List":{"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"TypedData":[]},"Float64x2List":{"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"TypedData":[]},"UnmodifiableByteBufferView":{"ByteBuffer":[]},"UnmodifiableByteDataView":{"ByteData":[],"TypedData":[]},"UnmodifiableUint8ListView":{"_UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Uint8List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint8List","Uint8List"],"TypedData":[]},"UnmodifiableInt8ListView":{"_UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Int8List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int8List","Int8List"],"TypedData":[]},"UnmodifiableUint8ClampedListView":{"_UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Uint8ClampedList":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint8ClampedList","Uint8ClampedList"],"TypedData":[]},"UnmodifiableUint16ListView":{"_UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Uint16List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint16List","Uint16List"],"TypedData":[]},"UnmodifiableInt16ListView":{"_UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Int16List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int16List","Int16List"],"TypedData":[]},"UnmodifiableUint32ListView":{"_UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Uint32List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint32List","Uint32List"],"TypedData":[]},"UnmodifiableInt32ListView":{"_UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Int32List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int32List","Int32List"],"TypedData":[]},"UnmodifiableUint64ListView":{"_UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Uint64List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint64List","Uint64List"],"TypedData":[]},"UnmodifiableInt64ListView":{"_UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"Int64List":[],"List":["int"],"EfficientLengthIterable":["int"],"_TypedIntList":[],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int64List","Int64List"],"TypedData":[]},"UnmodifiableInt32x4ListView":{"_UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["Int32x4"],"ListBase":["Int32x4"],"_ListBase_Object_ListMixin":["Int32x4"],"ListMixin":["Int32x4"],"UnmodifiableListMixin":["Int32x4"],"Int32x4List":[],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"_UnmodifiableListMixin":["Int32x4","Int32x4List","Int32x4List"],"TypedData":[]},"UnmodifiableFloat32x4ListView":{"_UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["Float32x4"],"ListBase":["Float32x4"],"_ListBase_Object_ListMixin":["Float32x4"],"ListMixin":["Float32x4"],"UnmodifiableListMixin":["Float32x4"],"Float32x4List":[],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"_UnmodifiableListMixin":["Float32x4","Float32x4List","Float32x4List"],"TypedData":[]},"UnmodifiableFloat64x2ListView":{"_UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["Float64x2"],"ListBase":["Float64x2"],"_ListBase_Object_ListMixin":["Float64x2"],"ListMixin":["Float64x2"],"UnmodifiableListMixin":["Float64x2"],"Float64x2List":[],"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"_UnmodifiableListMixin":["Float64x2","Float64x2List","Float64x2List"],"TypedData":[]},"UnmodifiableFloat32ListView":{"_UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"UnmodifiableListMixin":["double"],"Float32List":[],"List":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Iterable":["double"],"_UnmodifiableListMixin":["double","Float32List","Float32List"],"TypedData":[]},"UnmodifiableFloat64ListView":{"_UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin":[],"UnmodifiableListBase":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"UnmodifiableListMixin":["double"],"Float64List":[],"List":["double"],"EfficientLengthIterable":["double"],"_TypedFloatList":[],"Iterable":["double"],"_UnmodifiableListMixin":["double","Float64List","Float64List"],"TypedData":[]},"_UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"UnmodifiableListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"_UnmodifiableListMixin":["double","Float32List","Float32List"]},"_UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["Float32x4"],"ListBase":["Float32x4"],"_ListBase_Object_ListMixin":["Float32x4"],"ListMixin":["Float32x4"],"UnmodifiableListMixin":["Float32x4"],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"],"_UnmodifiableListMixin":["Float32x4","Float32x4List","Float32x4List"]},"_UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"UnmodifiableListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"_UnmodifiableListMixin":["double","Float64List","Float64List"]},"_UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["Float64x2"],"ListBase":["Float64x2"],"_ListBase_Object_ListMixin":["Float64x2"],"ListMixin":["Float64x2"],"UnmodifiableListMixin":["Float64x2"],"List":["Float64x2"],"EfficientLengthIterable":["Float64x2"],"Iterable":["Float64x2"],"_UnmodifiableListMixin":["Float64x2","Float64x2List","Float64x2List"]},"_UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int16List","Int16List"]},"_UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int32List","Int32List"]},"_UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["Int32x4"],"ListBase":["Int32x4"],"_ListBase_Object_ListMixin":["Int32x4"],"ListMixin":["Int32x4"],"UnmodifiableListMixin":["Int32x4"],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"],"_UnmodifiableListMixin":["Int32x4","Int32x4List","Int32x4List"]},"_UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int64List","Int64List"]},"_UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Int8List","Int8List"]},"_UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint16List","Uint16List"]},"_UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint32List","Uint32List"]},"_UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint64List","Uint64List"]},"_UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint8ClampedList","Uint8ClampedList"]},"_UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin":{"UnmodifiableListBase":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"_UnmodifiableListMixin":["int","Uint8List","Uint8List"]},"Archive":{"IterableBase":["ArchiveFile"],"Iterable":["ArchiveFile"]},"Adler32":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Adler32Sink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Crc32":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Crc32Sink":{"ByteConversionSinkBase":[],"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"CanonicalizedMap":{"Map":["2","3"]},"CombinedIterableView":{"IterableBase":["1"],"Iterable":["1"]},"CombinedIterator":{"Iterator":["1"]},"CombinedListView":{"UnmodifiableListView":["1"],"UnmodifiableListBase":["1"],"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"CombinedMapView":{"UnmodifiableMapBase":["1","2"],"MapBase":["1","2"],"MapMixin":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_DeduplicatingIterableView":{"IterableBase":["1"],"Iterable":["1"]},"_DeduplicatingIterator":{"Iterator":["1"]},"EmptyUnmodifiableSet":{"UnmodifiableSetView0":["1"],"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":["1"],"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"Set":["1"],"IterableBase":["1"],"EfficientLengthIterable":["1"],"_DelegatingIterableBase":["1"],"Iterable":["1"]},"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":{"UnmodifiableSetMixin":["1"],"Set":["1"],"IterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"EqualityBy":{"Equality":["1"]},"DefaultEquality":{"Equality":["1"]},"IdentityEquality":{"Equality":["1"]},"IterableEquality":{"Equality":["Iterable<1>"]},"ListEquality":{"Equality":["List<1>"]},"_UnorderedEquality":{"Equality":["2"]},"UnorderedIterableEquality":{"_UnorderedEquality":["1","Iterable<1>?"],"Equality":["Iterable<1>?"]},"SetEquality":{"_UnorderedEquality":["1","Set<1>?"],"Equality":["Set<1>?"]},"MapEquality":{"Equality":["Map<1,2>"]},"MultiEquality":{"Equality":["1"]},"DeepCollectionEquality":{"Equality":["@"]},"CaseInsensitiveEquality":{"Equality":["String"]},"EqualityMap":{"DelegatingMap":["1","2"],"Map":["1","2"]},"EqualitySet":{"DelegatingSet":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"IterableZip":{"IterableBase":["List<1>"],"Iterable":["List<1>"]},"_IteratorZip":{"Iterator":["List<1>"]},"ListSlice":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"HeapPriorityQueue":{"PriorityQueue":["1"]},"_UnorderedElementsIterable":{"Iterable":["1"]},"_UnorderedElementsIterator":{"Iterator":["1"]},"QueueList":{"_QueueList_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_CastQueueList":{"QueueList":["2"],"_QueueList_Object_ListMixin":["2"],"ListMixin":["2"],"List":["2"],"Queue":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"_QueueList_Object_ListMixin":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnionSet":{"_UnionSet_SetBase_UnmodifiableSetMixin":["1"],"SetBase":["1"],"_SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnionSet_SetBase_UnmodifiableSetMixin":{"SetBase":["1"],"_SetBase_Object_SetMixin":["1"],"SetMixin":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"NonGrowableListView":{"_NonGrowableListView_DelegatingList_NonGrowableListMixin":["1"],"DelegatingList":["1"],"NonGrowableListMixin":["1"],"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"NonGrowableListMixin":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView0":{"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetMixin":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableMapMixin":{"Map":["1","2"]},"_NonGrowableListView_DelegatingList_NonGrowableListMixin":{"DelegatingList":["1"],"NonGrowableListMixin":["1"],"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":{"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingIterable":{"_DelegatingIterableBase":["1"],"Iterable":["1"]},"DelegatingList":{"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingQueue":{"Queue":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DelegatingMap":{"Map":["1","2"]},"MapKeySet":{"_MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapValueSet":{"Set":["2"],"_DelegatingIterableBase":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"_MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin":{"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DigestSink":{"Sink":["Digest"]},"Hash":{"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"HashSink":{"Sink":["List<int>"]},"Hmac":{"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_HmacSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_MD50":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_MD5Sink":{"HashSink":[],"Sink":["List<int>"]},"_Sha1":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha1Sink":{"HashSink":[],"Sink":["List<int>"]},"_Sha256":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha224":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha32BitSink":{"HashSink":[],"Sink":["List<int>"]},"_Sha256Sink":{"_Sha32BitSink":[],"HashSink":[],"Sink":["List<int>"]},"_Sha224Sink":{"_Sha32BitSink":[],"HashSink":[],"Sink":["List<int>"]},"_Sha384":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha512":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha512224":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha512256":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformerBase":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha64BitSink":{"HashSink":[],"Sink":["List<int>"]},"Sha384Sink":{"_Sha64BitSink":[],"HashSink":[],"Sink":["List<int>"]},"Sha512Sink":{"_Sha64BitSink":[],"HashSink":[],"Sink":["List<int>"]},"Sha512224Sink":{"_Sha64BitSink":[],"HashSink":[],"Sink":["List<int>"]},"Sha512256Sink":{"_Sha64BitSink":[],"HashSink":[],"Sink":["List<int>"]},"Animation0":{"IterableBase":["Image"],"Iterable":["Image"]},"CurEncoder":{"WinEncoder":[],"Encoder":[]},"GifEncoder":{"Encoder":[]},"WinEncoder":{"Encoder":[]},"IcoEncoder":{"WinEncoder":[],"Encoder":[]},"JpegInfo":{"DecodeInfo":[]},"PngEncoder":{"Encoder":[]},"PvrtcColorRgb":{"PvrtcColorRgbCore":["PvrtcColorRgb"]},"PvrtcColorRgba":{"PvrtcColorRgbCore":["PvrtcColorRgba"]},"TgaEncoder":{"Encoder":[]},"TiffEncoder":{"Encoder":[]},"WebPEncoder":{"Encoder":[]},"NeuralQuantizer":{"Quantizer":[]},"OctreeQuantizer":{"Quantizer":[]},"Failure":{"Result":["1"],"Context":[]},"Result":{"Context":[]},"Success":{"Result":["1"],"Context":[]},"ParserException":{"FormatException":[],"Exception":[]},"GrammarParser":{"DelegateParser":["1","1"],"Parser":["1"]},"Reference":{"Parser":["1"]},"ParserMatch":{"Match":[]},"ParserPattern":{"Pattern":[]},"PatternIterable":{"IterableBase":["ParserMatch"],"Iterable":["ParserMatch"]},"PatternIterator":{"Iterator":["ParserMatch"]},"CastParser":{"DelegateParser":["1","2"],"Parser":["2"]},"CastListParser":{"DelegateParser":["1","List<2>"],"Parser":["List<2>"]},"ContinuationParser":{"DelegateParser":["1","2"],"Parser":["2"]},"FlattenParser":{"DelegateParser":["1","String"],"Parser":["String"]},"MapParser":{"DelegateParser":["1","2"],"Parser":["2"]},"PermuteParser":{"DelegateParser":["List<1>","List<1>"],"Parser":["List<1>"]},"PickParser":{"DelegateParser":["List<1>","1"],"Parser":["1"]},"TokenParser":{"DelegateParser":["1","Token<1>"],"Parser":["Token<1>"]},"TrimmingParser":{"DelegateParser":["1","1"],"Parser":["1"]},"SingleCharPredicate":{"CharacterPredicate":[]},"ConstantCharPredicate":{"CharacterPredicate":[]},"DigitCharPredicate":{"CharacterPredicate":[]},"LetterCharPredicate":{"CharacterPredicate":[]},"LookupCharPredicate":{"CharacterPredicate":[]},"LowercaseCharPredicate":{"CharacterPredicate":[]},"NotCharacterPredicate":{"CharacterPredicate":[]},"CharacterParser":{"Parser":["String"]},"RangeCharPredicate":{"CharacterPredicate":[]},"UppercaseCharPredicate":{"CharacterPredicate":[]},"WhitespaceCharPredicate":{"CharacterPredicate":[]},"WordCharPredicate":{"CharacterPredicate":[]},"AndParser":{"DelegateParser":["1","1"],"Parser":["1"]},"ChoiceParser":{"ListParser":["1","1"],"Parser":["1"]},"DelegateParser":{"Parser":["2"]},"ListParser":{"Parser":["2"]},"NotParser":{"DelegateParser":["1","Failure<1>"],"Parser":["Failure<1>"]},"OptionalParser":{"DelegateParser":["1","1"],"Parser":["1"]},"SequenceParser":{"ListParser":["1","List<1>"],"Parser":["List<1>"]},"SettableParser":{"DelegateParser":["1","1"],"Parser":["1"]},"EndOfInputParser":{"Parser":["~"]},"EpsilonParser":{"Parser":["1"]},"FailureParser":{"Parser":["1"]},"PositionParser":{"Parser":["int"]},"AnyParser":{"Parser":["String"]},"PredicateParser":{"Parser":["String"]},"GreedyRepeatingParser":{"LimitedRepeatingParser":["1"],"RepeatingParser":["1"],"DelegateParser":["1","List<1>"],"Parser":["List<1>"]},"LazyRepeatingParser":{"LimitedRepeatingParser":["1"],"RepeatingParser":["1"],"DelegateParser":["1","List<1>"],"Parser":["List<1>"]},"LimitedRepeatingParser":{"RepeatingParser":["1"],"DelegateParser":["1","List<1>"],"Parser":["List<1>"]},"PossessiveRepeatingParser":{"RepeatingParser":["1"],"DelegateParser":["1","List<1>"],"Parser":["List<1>"]},"RepeatingParser":{"DelegateParser":["1","List<1>"],"Parser":["List<1>"]},"TypedDataBuffer":{"ListBase":["1"],"_ListBase_Object_ListMixin":["1"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"_FloatBuffer":{"TypedDataBuffer":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Uint8Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int8Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedBuffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint64Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int64Buffer":{"_IntBuffer":[],"TypedDataBuffer":["int"],"ListBase":["int"],"_ListBase_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32Buffer":{"_FloatBuffer":[],"TypedDataBuffer":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64Buffer":{"_FloatBuffer":[],"TypedDataBuffer":["double"],"ListBase":["double"],"_ListBase_Object_ListMixin":["double"],"ListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Int32x4Buffer":{"TypedDataBuffer":["Int32x4"],"ListBase":["Int32x4"],"_ListBase_Object_ListMixin":["Int32x4"],"ListMixin":["Int32x4"],"List":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"]},"Float32x4Buffer":{"TypedDataBuffer":["Float32x4"],"ListBase":["Float32x4"],"_ListBase_Object_ListMixin":["Float32x4"],"ListMixin":["Float32x4"],"List":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"]},"_TypedQueue":{"__TypedQueue_Object_ListMixin":["1","2"],"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntQueue":{"_TypedQueue":["int","1"],"__TypedQueue_Object_ListMixin":["int","1"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"_FloatQueue":{"_TypedQueue":["double","1"],"__TypedQueue_Object_ListMixin":["double","1"],"ListMixin":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Uint8Queue":{"_IntQueue":["Uint8List"],"_TypedQueue":["int","Uint8List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Uint8List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int8Queue":{"_IntQueue":["Int8List"],"_TypedQueue":["int","Int8List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Int8List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedQueue":{"_IntQueue":["Uint8ClampedList"],"_TypedQueue":["int","Uint8ClampedList"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Uint8ClampedList"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16Queue":{"_IntQueue":["Uint16List"],"_TypedQueue":["int","Uint16List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Uint16List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16Queue":{"_IntQueue":["Int16List"],"_TypedQueue":["int","Int16List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Int16List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32Queue":{"_IntQueue":["Uint32List"],"_TypedQueue":["int","Uint32List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Uint32List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32Queue":{"_IntQueue":["Int32List"],"_TypedQueue":["int","Int32List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Int32List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint64Queue":{"_IntQueue":["Uint64List"],"_TypedQueue":["int","Uint64List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Uint64List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int64Queue":{"_IntQueue":["Int64List"],"_TypedQueue":["int","Int64List"],"QueueList":["int"],"__TypedQueue_Object_ListMixin":["int","Int64List"],"_QueueList_Object_ListMixin":["int"],"ListMixin":["int"],"List":["int"],"Queue":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32Queue":{"_FloatQueue":["Float32List"],"_TypedQueue":["double","Float32List"],"QueueList":["double"],"__TypedQueue_Object_ListMixin":["double","Float32List"],"_QueueList_Object_ListMixin":["double"],"ListMixin":["double"],"List":["double"],"Queue":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64Queue":{"_FloatQueue":["Float64List"],"_TypedQueue":["double","Float64List"],"QueueList":["double"],"__TypedQueue_Object_ListMixin":["double","Float64List"],"_QueueList_Object_ListMixin":["double"],"ListMixin":["double"],"List":["double"],"Queue":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Int32x4Queue":{"_TypedQueue":["Int32x4","Int32x4List"],"QueueList":["Int32x4"],"__TypedQueue_Object_ListMixin":["Int32x4","Int32x4List"],"_QueueList_Object_ListMixin":["Int32x4"],"ListMixin":["Int32x4"],"List":["Int32x4"],"Queue":["Int32x4"],"EfficientLengthIterable":["Int32x4"],"Iterable":["Int32x4"]},"Float32x4Queue":{"_TypedQueue":["Float32x4","Float32x4List"],"QueueList":["Float32x4"],"__TypedQueue_Object_ListMixin":["Float32x4","Float32x4List"],"_QueueList_Object_ListMixin":["Float32x4"],"ListMixin":["Float32x4"],"List":["Float32x4"],"Queue":["Float32x4"],"EfficientLengthIterable":["Float32x4"],"Iterable":["Float32x4"]},"__TypedQueue_Object_ListMixin":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"XmlDefaultEntityMapping":{"XmlEntityMapping":[]},"XmlNullEntityMapping":{"XmlEntityMapping":[]},"XmlGrammarDefinition":{"XmlProductionDefinition":[],"GrammarDefinition":[]},"XmlHasAttributes":{"XmlAttributesBase":[]},"XmlHasChildren":{"XmlChildrenBase":[]},"XmlHasParent":{"XmlParentBase":[]},"XmlHasText":{"XmlChildrenBase":[]},"XmlHasWriter":{"XmlHasVisitor":[]},"XmlHasXml":{"XmlHasWriter":[],"XmlChildrenBase":[],"XmlParentBase":[],"XmlHasVisitor":[]},"XmlAncestorsIterable":{"IterableBase":["XmlNode"],"Iterable":["XmlNode"]},"XmlAncestorsIterator":{"Iterator":["XmlNode"]},"XmlDescendantsIterable":{"IterableBase":["XmlNode"],"Iterable":["XmlNode"]},"XmlDescendantsIterator":{"Iterator":["XmlNode"]},"XmlFollowingIterable":{"IterableBase":["XmlNode"],"Iterable":["XmlNode"]},"XmlFollowingIterator":{"Iterator":["XmlNode"]},"XmlPrecedingIterable":{"IterableBase":["XmlNode"],"Iterable":["XmlNode"]},"XmlPrecedingIterator":{"Iterator":["XmlNode"]},"XmlAttribute":{"_XmlAttribute_XmlNode_XmlHasParent_XmlHasName":[],"_XmlAttribute_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"_XmlAttribute_XmlNode_XmlHasParent":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlAttribute_XmlNode_XmlHasParent_XmlHasName":{"_XmlAttribute_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"XmlCDATA":{"XmlData":[],"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlComment":{"XmlData":[],"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlData":{"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlData_XmlNode_XmlHasParent":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlDeclaration":{"_XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes":[],"_XmlDeclaration_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasAttributes":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlDeclaration_XmlNode_XmlHasParent":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlDeclaration_XmlNode_XmlHasParent_XmlHasAttributes":{"_XmlDeclaration_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasAttributes":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlDoctype":{"XmlData":[],"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlDocument0":{"_XmlDocument_XmlNode_XmlHasChildren":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlDocument_XmlNode_XmlHasChildren":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlDocumentFragment":{"_XmlDocumentFragment_XmlNode_XmlHasChildren":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlDocumentFragment_XmlNode_XmlHasChildren":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlElement":{"_XmlElement_XmlNode_XmlHasParent_XmlHasName_XmlHasAttributes_XmlHasChildren":[],"_XmlElement_XmlNode_XmlHasParent_XmlHasName_XmlHasAttributes":[],"_XmlElement_XmlNode_XmlHasParent_XmlHasName":[],"_XmlElement_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasAttributes":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"_XmlElement_XmlNode_XmlHasParent":{"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlElement_XmlNode_XmlHasParent_XmlHasName":{"_XmlElement_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"_XmlElement_XmlNode_XmlHasParent_XmlHasName_XmlHasAttributes":{"_XmlElement_XmlNode_XmlHasParent_XmlHasName":[],"_XmlElement_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasAttributes":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"_XmlElement_XmlNode_XmlHasParent_XmlHasName_XmlHasAttributes_XmlHasChildren":{"_XmlElement_XmlNode_XmlHasParent_XmlHasName_XmlHasAttributes":[],"_XmlElement_XmlNode_XmlHasParent_XmlHasName":[],"_XmlElement_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasAttributes":[],"XmlHasChildren":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[],"XmlHasName":[]},"XmlNode":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlNode_Object_XmlParentBase":{"XmlParentBase":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase":{"_XmlNode_Object_XmlParentBase":[],"XmlParentBase":[],"XmlAttributesBase":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"_XmlNode_Object_XmlParentBase":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":{"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlProcessing":{"XmlData":[],"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlText":{"XmlData":[],"_XmlData_XmlNode_XmlHasParent":[],"XmlNode":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter_XmlHasXml":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor_XmlHasWriter":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText_XmlHasVisitor":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase_XmlHasText":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase_XmlChildrenBase":[],"_XmlNode_Object_XmlParentBase_XmlAttributesBase":[],"XmlHasXml":[],"_XmlNode_Object_XmlParentBase":[],"XmlHasText":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlParentBase":[],"XmlAttributesBase":[],"XmlChildrenBase":[],"XmlHasVisitor":[]},"XmlParserDefinition":{"XmlGrammarDefinition":["XmlNode","XmlName"],"XmlProductionDefinition":[],"GrammarDefinition":[]},"XmlProductionDefinition":{"GrammarDefinition":[]},"XmlCharacterDataParser":{"Parser":["String"]},"XmlException":{"Exception":[]},"XmlParserException":{"XmlException":[],"FormatException":[],"Exception":[]},"XmlNodeTypeException":{"XmlException":[],"Exception":[]},"XmlParentException":{"XmlException":[],"Exception":[]},"XmlTagException":{"XmlException":[],"Exception":[]},"XmlName":{"_XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent":[],"_XmlName_Object_XmlHasVisitor_XmlHasWriter":[],"_XmlName_Object_XmlHasVisitor":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"_XmlName_Object_XmlHasVisitor":{"XmlHasVisitor":[]},"_XmlName_Object_XmlHasVisitor_XmlHasWriter":{"_XmlName_Object_XmlHasVisitor":[],"XmlHasWriter":[],"XmlHasVisitor":[]},"_XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent":{"_XmlName_Object_XmlHasVisitor_XmlHasWriter":[],"_XmlName_Object_XmlHasVisitor":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"XmlNodeList":{"DelegatingList":["1"],"List":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"XmlPrefixName":{"XmlName":[],"_XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent":[],"_XmlName_Object_XmlHasVisitor_XmlHasWriter":[],"_XmlName_Object_XmlHasVisitor":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"XmlSimpleName":{"XmlName":[],"_XmlName_Object_XmlHasVisitor_XmlHasWriter_XmlHasParent":[],"_XmlName_Object_XmlHasVisitor_XmlHasWriter":[],"_XmlName_Object_XmlHasVisitor":[],"XmlHasWriter":[],"XmlHasParent":["XmlNode"],"XmlHasVisitor":[],"XmlParentBase":[]},"XmlNormalizer":{"_XmlNormalizer_Object_XmlVisitor":[],"XmlVisitor":[]},"_XmlNormalizer_Object_XmlVisitor":{"XmlVisitor":[]},"XmlPrettyWriter":{"XmlWriter":[],"_XmlWriter_Object_XmlVisitor":[],"XmlVisitor":[]},"XmlTransformer":{"_XmlTransformer_Object_XmlVisitor":[],"XmlVisitor":[]},"_XmlTransformer_Object_XmlVisitor":{"XmlVisitor":[]},"XmlWriter":{"_XmlWriter_Object_XmlVisitor":[],"XmlVisitor":[]},"_XmlWriter_Object_XmlVisitor":{"XmlVisitor":[]}}'));
  0;
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AsyncError: findType("AsyncError"),
      BitmapCompression: findType("BitmapCompression"),
      Blob: findType("Blob"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Event: findType("Event"),
      ExifData: findType("ExifData"),
      ExrAttribute: findType("ExrAttribute"),
      ExrHufDec: findType("ExrHufDec"),
      File: findType("File"),
      Float32List: findType("Float32List"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      GifImageDesc: findType("GifImageDesc"),
      HTreeGroup: findType("HTreeGroup"),
      HdrSlice: findType("HdrSlice"),
      HuffmanTable: findType("HuffmanTable"),
      HuffmanTree: findType("HuffmanTree"),
      IcoInfoImage: findType("IcoInfoImage"),
      Image: findType("Image"),
      InputBuffer: findType("InputBuffer"),
      InputStream: findType("InputStream"),
      InputStreamBase: findType("InputStreamBase"),
      Int32List: findType("Int32List"),
      InternalExrPart: findType("InternalExrPart"),
      InternalGifImageDesc: findType("InternalGifImageDesc"),
      InternalPngFrame: findType("InternalPngFrame"),
      InternalVP8L: findType("InternalVP8L"),
      InternalWebPFrame: findType("InternalWebPFrame"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_ComponentData: findType("JSArray<ComponentData>"),
      JSArray_ExrChannel: findType("JSArray<ExrChannel>"),
      JSArray_GifImageDesc: findType("JSArray<GifImageDesc>"),
      JSArray_HTreeGroup: findType("JSArray<HTreeGroup>"),
      JSArray_InternalExrPart: findType("JSArray<InternalExrPart>"),
      JSArray_List_List_List_int: findType("JSArray<List<List<List<int>>>>"),
      JSArray_List_List_int: findType("JSArray<List<List<int>>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_PngFrame: findType("JSArray<PngFrame>"),
      JSArray_PsdChannel: findType("JSArray<PsdChannel>"),
      JSArray_PsdEffect: findType("JSArray<PsdEffect>"),
      JSArray_PsdLayer: findType("JSArray<PsdLayer>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TiffImage: findType("JSArray<TiffImage>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_VP8FInfo: findType("JSArray<VP8FInfo>"),
      JSArray_VP8LTransform: findType("JSArray<VP8LTransform>"),
      JSArray_WebPFrame: findType("JSArray<WebPFrame>"),
      JSArray__JpegHuffman: findType("JSArray<_JpegHuffman>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_JpegFrame: findType("JSArray<JpegFrame?>"),
      JSArray_nullable_List_dynamic: findType("JSArray<List<@>?>"),
      JSArray_nullable_List_int: findType("JSArray<List<int>?>"),
      JSArray_nullable_Uint32List: findType("JSArray<Uint32List?>"),
      JSArray_of_void_Function_InputBuffer: findType("JSArray<~(InputBuffer)>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JpegComponent: findType("JpegComponent"),
      JpegJfif: findType("JpegJfif"),
      List_HTreeGroup: findType("List<HTreeGroup>"),
      List_Int32List: findType("List<Int32List>"),
      List_List_List_int: findType("List<List<List<int>>>"),
      List_List_VP8FInfo: findType("List<List<VP8FInfo>>"),
      List_PsdChannel: findType("List<PsdChannel>"),
      List_PsdLayer: findType("List<PsdLayer>"),
      List_VP8BandProbas: findType("List<VP8BandProbas>"),
      List_VP8FInfo: findType("List<VP8FInfo>"),
      List_VP8MB: findType("List<VP8MB>"),
      List_VP8MBData: findType("List<VP8MBData>"),
      List_VP8TopSamples: findType("List<VP8TopSamples>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_List_int: findType("List<List<int>?>"),
      List_nullable_Object: findType("List<Object?>"),
      List_nullable_VP8FInfo: findType("List<VP8FInfo?>"),
      List_nullable__PizChannelData: findType("List<_PizChannelData?>"),
      List_nullable_int: findType("List<int?>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      MessageEvent: findType("MessageEvent"),
      MessagePort: findType("MessagePort"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedArray_dynamic: findType("NativeTypedArray<@>"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      OutputBuffer: findType("OutputBuffer"),
      PsdChannel: findType("PsdChannel"),
      PsdImage: findType("PsdImage"),
      PsdImageResource: findType("PsdImageResource"),
      PsdLayerAdditionalData: findType("PsdLayerAdditionalData"),
      PsdLayerData: findType("PsdLayerData"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      TiffEntry: findType("TiffEntry"),
      TypeErrorDecoder: findType("TypeErrorDecoder"),
      TypedData: findType("TypedData"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      VP8BandProbas: findType("VP8BandProbas"),
      VP8BitReader: findType("VP8BitReader"),
      VP8Filter: findType("VP8Filter"),
      VP8LBitReader: findType("VP8LBitReader"),
      VP8LTransform: findType("VP8LTransform"),
      VP8MB: findType("VP8MB"),
      VP8MBData: findType("VP8MBData"),
      VP8SegmentHeader: findType("VP8SegmentHeader"),
      VP8TopSamples: findType("VP8TopSamples"),
      WebPAlpha: findType("WebPAlpha"),
      WebPInfo: findType("WebPInfo"),
      Zone: findType("Zone"),
      _FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>"),
      _Future_dynamic: findType("_Future<@>"),
      _PizChannelData: findType("_PizChannelData"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_EventTarget: findType("EventTarget?"),
      nullable_ExrCompressor: findType("ExrCompressor?"),
      nullable_Function: findType("Function?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_GifColorMap: findType("GifColorMap?"),
      nullable_IcoInfo: findType("IcoInfo?"),
      nullable_Image: findType("Image?"),
      nullable_InputBuffer: findType("InputBuffer?"),
      nullable_Int16List: findType("Int16List?"),
      nullable_InternalWebPInfo: findType("InternalWebPInfo?"),
      nullable_JpegFrame: findType("JpegFrame?"),
      nullable_LinkedHashMapCell: findType("LinkedHashMapCell?"),
      nullable_List_List_List_int: findType("List<List<List<int>>>?"),
      nullable_List_List_VP8FInfo: findType("List<List<VP8FInfo>>?"),
      nullable_List_PsdChannel: findType("List<PsdChannel>?"),
      nullable_List_PsdLayer: findType("List<PsdLayer>?"),
      nullable_List_Uint8List: findType("List<Uint8List>?"),
      nullable_List_VP8MB: findType("List<VP8MB>?"),
      nullable_List_VP8MBData: findType("List<VP8MBData>?"),
      nullable_List_VP8TopSamples: findType("List<VP8TopSamples>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_List_nullable_List_int: findType("List<List<int>?>?"),
      nullable_List_nullable_Uint32List: findType("List<Uint32List?>?"),
      nullable_List_nullable_VP8FInfo: findType("List<VP8FInfo?>?"),
      nullable_List_nullable__PizChannelData: findType("List<_PizChannelData?>?"),
      nullable_List_nullable_int: findType("List<int?>?"),
      nullable_Object: findType("Object?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_TiffInfo: findType("TiffInfo?"),
      nullable_Uint16List: findType("Uint16List?"),
      nullable_Uint32List: findType("Uint32List?"),
      nullable_Uint8List: findType("Uint8List?"),
      nullable_VP8BitReader: findType("VP8BitReader?"),
      nullable_VP8FInfo: findType("VP8FInfo?"),
      nullable_VP8Proba: findType("VP8Proba?"),
      nullable_VP8QuantMatrix: findType("VP8QuantMatrix?"),
      nullable_WebPInfo: findType("WebPInfo?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable__AsyncCallbackEntry: findType("_AsyncCallbackEntry?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_int: findType("int?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_int: findType("~(int)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_2_JpegComponent_and_List_int: findType("~(JpegComponent,List<int>)"),
      void_Function_int: findType("~(int)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.MessageEvent_methods = W.MessageEvent.prototype;
    C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
    C.NativeInt16List_methods = H.NativeInt16List.prototype;
    C.NativeInt32List_methods = H.NativeInt32List.prototype;
    C.NativeUint16List_methods = H.NativeUint16List.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.BitmapCompression_0 = new L.BitmapCompression("BitmapCompression.BI_BITFIELDS");
    C.BitmapCompression_1 = new L.BitmapCompression("BitmapCompression.NONE");
    C.C_EmptyIterator = new H.EmptyIterator(H.findType("EmptyIterator<0&>"));
    C.C_EventStreamProvider = new W.EventStreamProvider(H.findType("EventStreamProvider<MessageEvent>"));
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonEncoder = new P.JsonEncoder();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.C__ZLibDecoder = new G._ZLibDecoder();
    C.C__ZoneFunction = new P._ZoneFunction(H.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    C.Channels_0 = new U.Channels("Channels.rgb");
    C.Channels_1 = new U.Channels("Channels.rgba");
    C.Duration_0 = new P.Duration(0);
    C.Format_0 = new U.Format("Format.argb");
    C.Format_1 = new U.Format("Format.abgr");
    C.Format_2 = new U.Format("Format.rgba");
    C.Format_3 = new U.Format("Format.bgra");
    C.Format_4 = new U.Format("Format.rgb");
    C.Format_5 = new U.Format("Format.bgr");
    C.Format_6 = new U.Format("Format.luminance");
    C.ICCPCompression_1 = new D.ICCPCompression();
    C.List_0W6 = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC8uv$closure(), V.vp8_filter_VP8Filter_TM8uv$closure(), V.vp8_filter_VP8Filter_VE8uv$closure(), V.vp8_filter_VP8Filter_HE8uv$closure(), V.vp8_filter_VP8Filter_DC8uvNoTop$closure(), V.vp8_filter_VP8Filter_DC8uvNoLeft$closure(), V.vp8_filter_VP8Filter_DC8uvNoTopLeft$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    C.List_0_2_8 = H.setRuntimeTypeInfo(makeConstList([0, 2, 8]), type$.JSArray_int);
    C.List_0_4_2_1 = H.setRuntimeTypeInfo(makeConstList([0, 4, 2, 1]), type$.JSArray_int);
    C.List_292_260_226_226 = H.setRuntimeTypeInfo(makeConstList([292, 260, 226, 226]), type$.JSArray_int);
    C.List_2Bc = H.setRuntimeTypeInfo(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_int);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([137, 80, 78, 71, 13, 10, 26, 10]), type$.JSArray_int);
    C.List_2_3_7 = H.setRuntimeTypeInfo(makeConstList([2, 3, 7]), type$.JSArray_int);
    C.List_3_3_11 = H.setRuntimeTypeInfo(makeConstList([3, 3, 11]), type$.JSArray_int);
    C.List_511_1023_2047_4095 = H.setRuntimeTypeInfo(makeConstList([511, 1023, 2047, 4095]), type$.JSArray_int);
    C.List_U2p = H.setRuntimeTypeInfo(makeConstList([231, 120, 48, 89, 115, 113, 120, 152, 112]), type$.JSArray_int);
    C.List_yXZ = H.setRuntimeTypeInfo(makeConstList([152, 179, 64, 126, 170, 118, 46, 70, 95]), type$.JSArray_int);
    C.List_yXZ0 = H.setRuntimeTypeInfo(makeConstList([175, 69, 143, 80, 85, 82, 72, 155, 103]), type$.JSArray_int);
    C.List_yXZ1 = H.setRuntimeTypeInfo(makeConstList([56, 58, 10, 171, 218, 189, 17, 13, 152]), type$.JSArray_int);
    C.List_yXZ2 = H.setRuntimeTypeInfo(makeConstList([114, 26, 17, 163, 44, 195, 21, 10, 173]), type$.JSArray_int);
    C.List_yXZ3 = H.setRuntimeTypeInfo(makeConstList([121, 24, 80, 195, 26, 62, 44, 64, 85]), type$.JSArray_int);
    C.List_yXZ4 = H.setRuntimeTypeInfo(makeConstList([144, 71, 10, 38, 171, 213, 144, 34, 26]), type$.JSArray_int);
    C.List_yXZ5 = H.setRuntimeTypeInfo(makeConstList([170, 46, 55, 19, 136, 160, 33, 206, 71]), type$.JSArray_int);
    C.List_yXZ6 = H.setRuntimeTypeInfo(makeConstList([63, 20, 8, 114, 114, 208, 12, 9, 226]), type$.JSArray_int);
    C.List_yXZ7 = H.setRuntimeTypeInfo(makeConstList([81, 40, 11, 96, 182, 84, 29, 16, 36]), type$.JSArray_int);
    C.List_sty0 = H.setRuntimeTypeInfo(makeConstList([C.List_U2p, C.List_yXZ, C.List_yXZ0, C.List_yXZ1, C.List_yXZ2, C.List_yXZ3, C.List_yXZ4, C.List_yXZ5, C.List_yXZ6, C.List_yXZ7]), type$.JSArray_List_int);
    C.List_yXZ8 = H.setRuntimeTypeInfo(makeConstList([134, 183, 89, 137, 98, 101, 106, 165, 148]), type$.JSArray_int);
    C.List_yXZ9 = H.setRuntimeTypeInfo(makeConstList([72, 187, 100, 130, 157, 111, 32, 75, 80]), type$.JSArray_int);
    C.List_yXZ10 = H.setRuntimeTypeInfo(makeConstList([66, 102, 167, 99, 74, 62, 40, 234, 128]), type$.JSArray_int);
    C.List_kfn = H.setRuntimeTypeInfo(makeConstList([41, 53, 9, 178, 241, 141, 26, 8, 107]), type$.JSArray_int);
    C.List_yXZ11 = H.setRuntimeTypeInfo(makeConstList([74, 43, 26, 146, 73, 166, 49, 23, 157]), type$.JSArray_int);
    C.List_yXZ12 = H.setRuntimeTypeInfo(makeConstList([65, 38, 105, 160, 51, 52, 31, 115, 128]), type$.JSArray_int);
    C.List_eDA = H.setRuntimeTypeInfo(makeConstList([104, 79, 12, 27, 217, 255, 87, 17, 7]), type$.JSArray_int);
    C.List_yXZ13 = H.setRuntimeTypeInfo(makeConstList([87, 68, 71, 44, 114, 51, 15, 186, 23]), type$.JSArray_int);
    C.List_yXZ14 = H.setRuntimeTypeInfo(makeConstList([47, 41, 14, 110, 182, 183, 21, 17, 194]), type$.JSArray_int);
    C.List_yXZ15 = H.setRuntimeTypeInfo(makeConstList([66, 45, 25, 102, 197, 189, 23, 18, 22]), type$.JSArray_int);
    C.List_L3W = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ8, C.List_yXZ9, C.List_yXZ10, C.List_kfn, C.List_yXZ11, C.List_yXZ12, C.List_eDA, C.List_yXZ13, C.List_yXZ14, C.List_yXZ15]), type$.JSArray_List_int);
    C.List_yXZ16 = H.setRuntimeTypeInfo(makeConstList([88, 88, 147, 150, 42, 46, 45, 196, 205]), type$.JSArray_int);
    C.List_yXZ17 = H.setRuntimeTypeInfo(makeConstList([43, 97, 183, 117, 85, 38, 35, 179, 61]), type$.JSArray_int);
    C.List_yXZ18 = H.setRuntimeTypeInfo(makeConstList([39, 53, 200, 87, 26, 21, 43, 232, 171]), type$.JSArray_int);
    C.List_yXZ19 = H.setRuntimeTypeInfo(makeConstList([56, 34, 51, 104, 114, 102, 29, 93, 77]), type$.JSArray_int);
    C.List_yXZ20 = H.setRuntimeTypeInfo(makeConstList([39, 28, 85, 171, 58, 165, 90, 98, 64]), type$.JSArray_int);
    C.List_yXZ21 = H.setRuntimeTypeInfo(makeConstList([34, 22, 116, 206, 23, 34, 43, 166, 73]), type$.JSArray_int);
    C.List_yXZ22 = H.setRuntimeTypeInfo(makeConstList([107, 54, 32, 26, 51, 1, 81, 43, 31]), type$.JSArray_int);
    C.List_yXZ23 = H.setRuntimeTypeInfo(makeConstList([68, 25, 106, 22, 64, 171, 36, 225, 114]), type$.JSArray_int);
    C.List_yXZ24 = H.setRuntimeTypeInfo(makeConstList([34, 19, 21, 102, 132, 188, 16, 76, 124]), type$.JSArray_int);
    C.List_yXZ25 = H.setRuntimeTypeInfo(makeConstList([62, 18, 78, 95, 85, 57, 50, 48, 51]), type$.JSArray_int);
    C.List_ECY = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ16, C.List_yXZ17, C.List_yXZ18, C.List_yXZ19, C.List_yXZ20, C.List_yXZ21, C.List_yXZ22, C.List_yXZ23, C.List_yXZ24, C.List_yXZ25]), type$.JSArray_List_int);
    C.List_yXZ26 = H.setRuntimeTypeInfo(makeConstList([193, 101, 35, 159, 215, 111, 89, 46, 111]), type$.JSArray_int);
    C.List_yXZ27 = H.setRuntimeTypeInfo(makeConstList([60, 148, 31, 172, 219, 228, 21, 18, 111]), type$.JSArray_int);
    C.List_eDA0 = H.setRuntimeTypeInfo(makeConstList([112, 113, 77, 85, 179, 255, 38, 120, 114]), type$.JSArray_int);
    C.List_kfn0 = H.setRuntimeTypeInfo(makeConstList([40, 42, 1, 196, 245, 209, 10, 25, 109]), type$.JSArray_int);
    C.List_yXZ28 = H.setRuntimeTypeInfo(makeConstList([88, 43, 29, 140, 166, 213, 37, 43, 154]), type$.JSArray_int);
    C.List_yXZ29 = H.setRuntimeTypeInfo(makeConstList([61, 63, 30, 155, 67, 45, 68, 1, 209]), type$.JSArray_int);
    C.List_yXZ30 = H.setRuntimeTypeInfo(makeConstList([100, 80, 8, 43, 154, 1, 51, 26, 71]), type$.JSArray_int);
    C.List_kfn1 = H.setRuntimeTypeInfo(makeConstList([142, 78, 78, 16, 255, 128, 34, 197, 171]), type$.JSArray_int);
    C.List_yXZ31 = H.setRuntimeTypeInfo(makeConstList([41, 40, 5, 102, 211, 183, 4, 1, 221]), type$.JSArray_int);
    C.List_yXZ32 = H.setRuntimeTypeInfo(makeConstList([51, 50, 17, 168, 209, 192, 23, 25, 82]), type$.JSArray_int);
    C.List_JO4 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ26, C.List_yXZ27, C.List_eDA0, C.List_kfn0, C.List_yXZ28, C.List_yXZ29, C.List_yXZ30, C.List_kfn1, C.List_yXZ31, C.List_yXZ32]), type$.JSArray_List_int);
    C.List_knt1 = H.setRuntimeTypeInfo(makeConstList([138, 31, 36, 171, 27, 166, 38, 44, 229]), type$.JSArray_int);
    C.List_yXZ33 = H.setRuntimeTypeInfo(makeConstList([67, 87, 58, 169, 82, 115, 26, 59, 179]), type$.JSArray_int);
    C.List_yXZ34 = H.setRuntimeTypeInfo(makeConstList([63, 59, 90, 180, 59, 166, 93, 73, 154]), type$.JSArray_int);
    C.List_yXZ35 = H.setRuntimeTypeInfo(makeConstList([40, 40, 21, 116, 143, 209, 34, 39, 175]), type$.JSArray_int);
    C.List_yXZ36 = H.setRuntimeTypeInfo(makeConstList([47, 15, 16, 183, 34, 223, 49, 45, 183]), type$.JSArray_int);
    C.List_yXZ37 = H.setRuntimeTypeInfo(makeConstList([46, 17, 33, 183, 6, 98, 15, 32, 183]), type$.JSArray_int);
    C.List_yXZ38 = H.setRuntimeTypeInfo(makeConstList([57, 46, 22, 24, 128, 1, 54, 17, 37]), type$.JSArray_int);
    C.List_yXZ39 = H.setRuntimeTypeInfo(makeConstList([65, 32, 73, 115, 28, 128, 23, 128, 205]), type$.JSArray_int);
    C.List_yXZ40 = H.setRuntimeTypeInfo(makeConstList([40, 3, 9, 115, 51, 192, 18, 6, 223]), type$.JSArray_int);
    C.List_yXZ41 = H.setRuntimeTypeInfo(makeConstList([87, 37, 9, 115, 59, 77, 64, 21, 47]), type$.JSArray_int);
    C.List_wEo = H.setRuntimeTypeInfo(makeConstList([C.List_knt1, C.List_yXZ33, C.List_yXZ34, C.List_yXZ35, C.List_yXZ36, C.List_yXZ37, C.List_yXZ38, C.List_yXZ39, C.List_yXZ40, C.List_yXZ41]), type$.JSArray_List_int);
    C.List_yXZ42 = H.setRuntimeTypeInfo(makeConstList([104, 55, 44, 218, 9, 54, 53, 130, 226]), type$.JSArray_int);
    C.List_yXZ43 = H.setRuntimeTypeInfo(makeConstList([64, 90, 70, 205, 40, 41, 23, 26, 57]), type$.JSArray_int);
    C.List_yXZ44 = H.setRuntimeTypeInfo(makeConstList([54, 57, 112, 184, 5, 41, 38, 166, 213]), type$.JSArray_int);
    C.List_yXZ45 = H.setRuntimeTypeInfo(makeConstList([30, 34, 26, 133, 152, 116, 10, 32, 134]), type$.JSArray_int);
    C.List_knt2 = H.setRuntimeTypeInfo(makeConstList([39, 19, 53, 221, 26, 114, 32, 73, 255]), type$.JSArray_int);
    C.List_yXZ46 = H.setRuntimeTypeInfo(makeConstList([31, 9, 65, 234, 2, 15, 1, 118, 73]), type$.JSArray_int);
    C.List_eDA1 = H.setRuntimeTypeInfo(makeConstList([75, 32, 12, 51, 192, 255, 160, 43, 51]), type$.JSArray_int);
    C.List_yXZ47 = H.setRuntimeTypeInfo(makeConstList([88, 31, 35, 67, 102, 85, 55, 186, 85]), type$.JSArray_int);
    C.List_yXZ48 = H.setRuntimeTypeInfo(makeConstList([56, 21, 23, 111, 59, 205, 45, 37, 192]), type$.JSArray_int);
    C.List_yXZ49 = H.setRuntimeTypeInfo(makeConstList([55, 38, 70, 124, 73, 102, 1, 34, 98]), type$.JSArray_int);
    C.List_0 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ42, C.List_yXZ43, C.List_yXZ44, C.List_yXZ45, C.List_knt2, C.List_yXZ46, C.List_eDA1, C.List_yXZ47, C.List_yXZ48, C.List_yXZ49]), type$.JSArray_List_int);
    C.List_yXZ50 = H.setRuntimeTypeInfo(makeConstList([125, 98, 42, 88, 104, 85, 117, 175, 82]), type$.JSArray_int);
    C.List_yXZ51 = H.setRuntimeTypeInfo(makeConstList([95, 84, 53, 89, 128, 100, 113, 101, 45]), type$.JSArray_int);
    C.List_yXZ52 = H.setRuntimeTypeInfo(makeConstList([75, 79, 123, 47, 51, 128, 81, 171, 1]), type$.JSArray_int);
    C.List_yXZ53 = H.setRuntimeTypeInfo(makeConstList([57, 17, 5, 71, 102, 57, 53, 41, 49]), type$.JSArray_int);
    C.List_yXZ54 = H.setRuntimeTypeInfo(makeConstList([38, 33, 13, 121, 57, 73, 26, 1, 85]), type$.JSArray_int);
    C.List_yXZ55 = H.setRuntimeTypeInfo(makeConstList([41, 10, 67, 138, 77, 110, 90, 47, 114]), type$.JSArray_int);
    C.List_eDA2 = H.setRuntimeTypeInfo(makeConstList([115, 21, 2, 10, 102, 255, 166, 23, 6]), type$.JSArray_int);
    C.List_yXZ56 = H.setRuntimeTypeInfo(makeConstList([101, 29, 16, 10, 85, 128, 101, 196, 26]), type$.JSArray_int);
    C.List_yXZ57 = H.setRuntimeTypeInfo(makeConstList([57, 18, 10, 102, 102, 213, 34, 20, 43]), type$.JSArray_int);
    C.List_yXZ58 = H.setRuntimeTypeInfo(makeConstList([117, 20, 15, 36, 163, 128, 68, 1, 26]), type$.JSArray_int);
    C.List_a5W = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ50, C.List_yXZ51, C.List_yXZ52, C.List_yXZ53, C.List_yXZ54, C.List_yXZ55, C.List_eDA2, C.List_yXZ56, C.List_yXZ57, C.List_yXZ58]), type$.JSArray_List_int);
    C.List_h47 = H.setRuntimeTypeInfo(makeConstList([102, 61, 71, 37, 34, 53, 31, 243, 192]), type$.JSArray_int);
    C.List_yXZ59 = H.setRuntimeTypeInfo(makeConstList([69, 60, 71, 38, 73, 119, 28, 222, 37]), type$.JSArray_int);
    C.List_h470 = H.setRuntimeTypeInfo(makeConstList([68, 45, 128, 34, 1, 47, 11, 245, 171]), type$.JSArray_int);
    C.List_yXZ60 = H.setRuntimeTypeInfo(makeConstList([62, 17, 19, 70, 146, 85, 55, 62, 70]), type$.JSArray_int);
    C.List_yXZ61 = H.setRuntimeTypeInfo(makeConstList([37, 43, 37, 154, 100, 163, 85, 160, 1]), type$.JSArray_int);
    C.List_yXZ62 = H.setRuntimeTypeInfo(makeConstList([63, 9, 92, 136, 28, 64, 32, 201, 85]), type$.JSArray_int);
    C.List_eDA3 = H.setRuntimeTypeInfo(makeConstList([75, 15, 9, 9, 64, 255, 184, 119, 16]), type$.JSArray_int);
    C.List_eDA4 = H.setRuntimeTypeInfo(makeConstList([86, 6, 28, 5, 64, 255, 25, 248, 1]), type$.JSArray_int);
    C.List_eDA5 = H.setRuntimeTypeInfo(makeConstList([56, 8, 17, 132, 137, 255, 55, 116, 128]), type$.JSArray_int);
    C.List_yXZ63 = H.setRuntimeTypeInfo(makeConstList([58, 15, 20, 82, 135, 57, 26, 121, 40]), type$.JSArray_int);
    C.List_6oq = H.setRuntimeTypeInfo(makeConstList([C.List_h47, C.List_yXZ59, C.List_h470, C.List_yXZ60, C.List_yXZ61, C.List_yXZ62, C.List_eDA3, C.List_eDA4, C.List_eDA5, C.List_yXZ63]), type$.JSArray_List_int);
    C.List_yXZ64 = H.setRuntimeTypeInfo(makeConstList([164, 50, 31, 137, 154, 133, 25, 35, 218]), type$.JSArray_int);
    C.List_yXZ65 = H.setRuntimeTypeInfo(makeConstList([51, 103, 44, 131, 131, 123, 31, 6, 158]), type$.JSArray_int);
    C.List_yXZ66 = H.setRuntimeTypeInfo(makeConstList([86, 40, 64, 135, 148, 224, 45, 183, 128]), type$.JSArray_int);
    C.List_yXZ67 = H.setRuntimeTypeInfo(makeConstList([22, 26, 17, 131, 240, 154, 14, 1, 209]), type$.JSArray_int);
    C.List_yXZ68 = H.setRuntimeTypeInfo(makeConstList([45, 16, 21, 91, 64, 222, 7, 1, 197]), type$.JSArray_int);
    C.List_yXZ69 = H.setRuntimeTypeInfo(makeConstList([56, 21, 39, 155, 60, 138, 23, 102, 213]), type$.JSArray_int);
    C.List_eDA6 = H.setRuntimeTypeInfo(makeConstList([83, 12, 13, 54, 192, 255, 68, 47, 28]), type$.JSArray_int);
    C.List_yXZ70 = H.setRuntimeTypeInfo(makeConstList([85, 26, 85, 85, 128, 128, 32, 146, 171]), type$.JSArray_int);
    C.List_yXZ71 = H.setRuntimeTypeInfo(makeConstList([18, 11, 7, 63, 144, 171, 4, 4, 246]), type$.JSArray_int);
    C.List_yXZ72 = H.setRuntimeTypeInfo(makeConstList([35, 27, 10, 146, 174, 171, 12, 26, 128]), type$.JSArray_int);
    C.List_a5W0 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ64, C.List_yXZ65, C.List_yXZ66, C.List_yXZ67, C.List_yXZ68, C.List_yXZ69, C.List_eDA6, C.List_yXZ70, C.List_yXZ71, C.List_yXZ72]), type$.JSArray_List_int);
    C.List_yXZ73 = H.setRuntimeTypeInfo(makeConstList([190, 80, 35, 99, 180, 80, 126, 54, 45]), type$.JSArray_int);
    C.List_yXZ74 = H.setRuntimeTypeInfo(makeConstList([85, 126, 47, 87, 176, 51, 41, 20, 32]), type$.JSArray_int);
    C.List_yXZ75 = H.setRuntimeTypeInfo(makeConstList([101, 75, 128, 139, 118, 146, 116, 128, 85]), type$.JSArray_int);
    C.List_yXZ76 = H.setRuntimeTypeInfo(makeConstList([56, 41, 15, 176, 236, 85, 37, 9, 62]), type$.JSArray_int);
    C.List_eDA7 = H.setRuntimeTypeInfo(makeConstList([71, 30, 17, 119, 118, 255, 17, 18, 138]), type$.JSArray_int);
    C.List_yXZ77 = H.setRuntimeTypeInfo(makeConstList([101, 38, 60, 138, 55, 70, 43, 26, 142]), type$.JSArray_int);
    C.List_eDA8 = H.setRuntimeTypeInfo(makeConstList([146, 36, 19, 30, 171, 255, 97, 27, 20]), type$.JSArray_int);
    C.List_yXZ78 = H.setRuntimeTypeInfo(makeConstList([138, 45, 61, 62, 219, 1, 81, 188, 64]), type$.JSArray_int);
    C.List_yXZ79 = H.setRuntimeTypeInfo(makeConstList([32, 41, 20, 117, 151, 142, 20, 21, 163]), type$.JSArray_int);
    C.List_yXZ80 = H.setRuntimeTypeInfo(makeConstList([112, 19, 12, 61, 195, 128, 48, 4, 24]), type$.JSArray_int);
    C.List_RrN = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ73, C.List_yXZ74, C.List_yXZ75, C.List_yXZ76, C.List_eDA7, C.List_yXZ77, C.List_eDA8, C.List_yXZ78, C.List_yXZ79, C.List_yXZ80]), type$.JSArray_List_int);
    C.List_799 = H.setRuntimeTypeInfo(makeConstList([C.List_sty0, C.List_L3W, C.List_ECY, C.List_JO4, C.List_wEo, C.List_0, C.List_a5W, C.List_6oq, C.List_a5W0, C.List_RrN]), type$.JSArray_List_List_int);
    C.List_89P = H.setRuntimeTypeInfo(makeConstList([3226, 6412, 200, 168, 38, 38, 134, 134, 100, 100, 100, 100, 68, 68, 68, 68]), type$.JSArray_int);
    C.List_8_8_4_2 = H.setRuntimeTypeInfo(makeConstList([8, 8, 4, 2]), type$.JSArray_int);
    C.List_8aB = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC16$closure(), V.vp8_filter_VP8Filter_TM16$closure(), V.vp8_filter_VP8Filter_VE16$closure(), V.vp8_filter_VP8Filter_HE16$closure(), V.vp8_filter_VP8Filter_DC16NoTop$closure(), V.vp8_filter_VP8Filter_DC16NoLeft$closure(), V.vp8_filter_VP8Filter_DC16NoTopLeft$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    C.List_8co1 = H.setRuntimeTypeInfo(makeConstList([4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157]), type$.JSArray_int);
    C.List_8co0 = H.setRuntimeTypeInfo(makeConstList([7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]), type$.JSArray_int);
    C.List_8co = H.setRuntimeTypeInfo(makeConstList([80, 88, 23, 71, 30, 30, 62, 62, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]), type$.JSArray_int);
    C.List_AKW = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_AYZ = H.setRuntimeTypeInfo(makeConstList([24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112]), type$.JSArray_int);
    C.List_AZw = H.setRuntimeTypeInfo(makeConstList([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63]), type$.JSArray_int);
    C.List_AiM = H.setRuntimeTypeInfo(makeConstList([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284]), type$.JSArray_int);
    C.List_B8J = H.setRuntimeTypeInfo(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    C.List_DKo = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295]), type$.JSArray_int);
    C.List_F1L = H.setRuntimeTypeInfo(makeConstList([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.List_F1L2 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119]), type$.JSArray_int);
    C.List_F1L0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125]), type$.JSArray_int);
    C.List_F1L1 = H.setRuntimeTypeInfo(makeConstList([0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.List_F1L3 = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0]), type$.JSArray_int);
    C.List_G61 = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_HHa = H.setRuntimeTypeInfo(makeConstList([null, N.webp_filters_WebPFilters_horizontalUnfilter$closure(), N.webp_filters_WebPFilters_verticalUnfilter$closure(), N.webp_filters_WebPFilters_gradientUnfilter$closure()]), H.findType("JSArray<~(int,int,int,int,int,Uint8List)?>"));
    C.List_K2a = H.setRuntimeTypeInfo(makeConstList([1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379]), H.findType("JSArray<double>"));
    C.List_MEg = H.setRuntimeTypeInfo(makeConstList([28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703, 30727, 30727, -27639, -26615, -25591, -24567]), type$.JSArray_int);
    C.List_q8u = H.setRuntimeTypeInfo(makeConstList([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_2du = H.setRuntimeTypeInfo(makeConstList([C.List_q8u, C.List_q8u, C.List_q8u]), type$.JSArray_List_int);
    C.List_n3E = H.setRuntimeTypeInfo(makeConstList([176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_U8c = H.setRuntimeTypeInfo(makeConstList([223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_q8u0 = H.setRuntimeTypeInfo(makeConstList([249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_EkO = H.setRuntimeTypeInfo(makeConstList([C.List_n3E, C.List_U8c, C.List_q8u0]), type$.JSArray_List_int);
    C.List_mXg = H.setRuntimeTypeInfo(makeConstList([255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_sav = H.setRuntimeTypeInfo(makeConstList([234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_q8u1 = H.setRuntimeTypeInfo(makeConstList([253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_ezx = H.setRuntimeTypeInfo(makeConstList([C.List_mXg, C.List_sav, C.List_q8u1]), type$.JSArray_List_int);
    C.List_mXg0 = H.setRuntimeTypeInfo(makeConstList([255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX4 = H.setRuntimeTypeInfo(makeConstList([239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_U8c0 = H.setRuntimeTypeInfo(makeConstList([254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_Q1p = H.setRuntimeTypeInfo(makeConstList([C.List_mXg0, C.List_wX4, C.List_U8c0]), type$.JSArray_List_int);
    C.List_mXg1 = H.setRuntimeTypeInfo(makeConstList([255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX40 = H.setRuntimeTypeInfo(makeConstList([251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_ycb = H.setRuntimeTypeInfo(makeConstList([C.List_mXg1, C.List_wX40, C.List_q8u]), type$.JSArray_List_int);
    C.List_wX41 = H.setRuntimeTypeInfo(makeConstList([255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_mXg2 = H.setRuntimeTypeInfo(makeConstList([251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_AuU = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_mXg2, C.List_U8c0]), type$.JSArray_List_int);
    C.List_ekJ = H.setRuntimeTypeInfo(makeConstList([255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_vHK = H.setRuntimeTypeInfo(makeConstList([250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_Mic = H.setRuntimeTypeInfo(makeConstList([254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_3oi = H.setRuntimeTypeInfo(makeConstList([C.List_ekJ, C.List_vHK, C.List_Mic]), type$.JSArray_List_int);
    C.List_uwP = H.setRuntimeTypeInfo(makeConstList([C.List_2du, C.List_EkO, C.List_ezx, C.List_Q1p, C.List_ycb, C.List_AuU, C.List_3oi, C.List_2du]), type$.JSArray_List_List_int);
    C.List_Mic0 = H.setRuntimeTypeInfo(makeConstList([217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_ku2 = H.setRuntimeTypeInfo(makeConstList([225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_unK = H.setRuntimeTypeInfo(makeConstList([234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]), type$.JSArray_int);
    C.List_EuK = H.setRuntimeTypeInfo(makeConstList([C.List_Mic0, C.List_ku2, C.List_unK]), type$.JSArray_List_int);
    C.List_H37 = H.setRuntimeTypeInfo(makeConstList([255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_sav0 = H.setRuntimeTypeInfo(makeConstList([223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_00 = H.setRuntimeTypeInfo(makeConstList([238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_U05 = H.setRuntimeTypeInfo(makeConstList([C.List_H37, C.List_sav0, C.List_00]), type$.JSArray_List_int);
    C.List_H370 = H.setRuntimeTypeInfo(makeConstList([249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wEo0 = H.setRuntimeTypeInfo(makeConstList([C.List_mXg1, C.List_H370, C.List_q8u]), type$.JSArray_List_int);
    C.List_q8u2 = H.setRuntimeTypeInfo(makeConstList([255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_H371 = H.setRuntimeTypeInfo(makeConstList([247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_HmY = H.setRuntimeTypeInfo(makeConstList([C.List_q8u2, C.List_H371, C.List_q8u]), type$.JSArray_List_int);
    C.List_Mic1 = H.setRuntimeTypeInfo(makeConstList([252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_qJr = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_Mic1, C.List_q8u]), type$.JSArray_List_int);
    C.List_mXg3 = H.setRuntimeTypeInfo(makeConstList([255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_oIk = H.setRuntimeTypeInfo(makeConstList([C.List_mXg3, C.List_q8u1, C.List_q8u]), type$.JSArray_List_int);
    C.List_H372 = H.setRuntimeTypeInfo(makeConstList([255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_Mic2 = H.setRuntimeTypeInfo(makeConstList([250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_23h = H.setRuntimeTypeInfo(makeConstList([C.List_H372, C.List_Mic2, C.List_Mic]), type$.JSArray_List_int);
    C.List_Crw = H.setRuntimeTypeInfo(makeConstList([C.List_EuK, C.List_U05, C.List_wEo0, C.List_HmY, C.List_qJr, C.List_oIk, C.List_23h, C.List_2du]), type$.JSArray_List_List_int);
    C.List_U8c1 = H.setRuntimeTypeInfo(makeConstList([186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_01 = H.setRuntimeTypeInfo(makeConstList([234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_IyW = H.setRuntimeTypeInfo(makeConstList([251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_ujV = H.setRuntimeTypeInfo(makeConstList([C.List_U8c1, C.List_01, C.List_IyW]), type$.JSArray_List_int);
    C.List_U8c2 = H.setRuntimeTypeInfo(makeConstList([236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_A8Z = H.setRuntimeTypeInfo(makeConstList([251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_eFE = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_U8c2, C.List_A8Z]), type$.JSArray_List_int);
    C.List_sav1 = H.setRuntimeTypeInfo(makeConstList([254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_ezx0 = H.setRuntimeTypeInfo(makeConstList([C.List_mXg3, C.List_sav1, C.List_q8u]), type$.JSArray_List_int);
    C.List_n3E0 = H.setRuntimeTypeInfo(makeConstList([254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_QXJ = H.setRuntimeTypeInfo(makeConstList([C.List_H37, C.List_n3E0, C.List_Mic]), type$.JSArray_List_int);
    C.List_yzJ = H.setRuntimeTypeInfo(makeConstList([C.List_q8u, C.List_Mic, C.List_q8u]), type$.JSArray_List_int);
    C.List_QcX = H.setRuntimeTypeInfo(makeConstList([C.List_ujV, C.List_eFE, C.List_ezx0, C.List_QXJ, C.List_yzJ, C.List_2du, C.List_2du, C.List_2du]), type$.JSArray_List_List_int);
    C.List_Mic3 = H.setRuntimeTypeInfo(makeConstList([248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_AsR = H.setRuntimeTypeInfo(makeConstList([250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_n3E1 = H.setRuntimeTypeInfo(makeConstList([248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_gkc = H.setRuntimeTypeInfo(makeConstList([C.List_Mic3, C.List_AsR, C.List_n3E1]), type$.JSArray_List_int);
    C.List_q8u3 = H.setRuntimeTypeInfo(makeConstList([255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_Mic4 = H.setRuntimeTypeInfo(makeConstList([246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_02 = H.setRuntimeTypeInfo(makeConstList([252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_03 = H.setRuntimeTypeInfo(makeConstList([C.List_q8u3, C.List_Mic4, C.List_02]), type$.JSArray_List_int);
    C.List_mXg4 = H.setRuntimeTypeInfo(makeConstList([255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_n3E2 = H.setRuntimeTypeInfo(makeConstList([248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_m9F = H.setRuntimeTypeInfo(makeConstList([253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_C3E = H.setRuntimeTypeInfo(makeConstList([C.List_mXg4, C.List_n3E2, C.List_m9F]), type$.JSArray_List_int);
    C.List_wX42 = H.setRuntimeTypeInfo(makeConstList([255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX43 = H.setRuntimeTypeInfo(makeConstList([245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX44 = H.setRuntimeTypeInfo(makeConstList([253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_swR = H.setRuntimeTypeInfo(makeConstList([C.List_wX42, C.List_wX43, C.List_wX44]), type$.JSArray_List_int);
    C.List_q8u4 = H.setRuntimeTypeInfo(makeConstList([255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_U8c3 = H.setRuntimeTypeInfo(makeConstList([252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_uQV = H.setRuntimeTypeInfo(makeConstList([C.List_q8u4, C.List_U8c3, C.List_H37]), type$.JSArray_List_int);
    C.List_H373 = H.setRuntimeTypeInfo(makeConstList([255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX45 = H.setRuntimeTypeInfo(makeConstList([249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_wX46 = H.setRuntimeTypeInfo(makeConstList([255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_46y = H.setRuntimeTypeInfo(makeConstList([C.List_H373, C.List_wX45, C.List_wX46]), type$.JSArray_List_int);
    C.List_q8u5 = H.setRuntimeTypeInfo(makeConstList([255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    C.List_yzJ0 = H.setRuntimeTypeInfo(makeConstList([C.List_q8u5, C.List_Mic2, C.List_q8u]), type$.JSArray_List_int);
    C.List_88p = H.setRuntimeTypeInfo(makeConstList([C.List_gkc, C.List_03, C.List_C3E, C.List_swR, C.List_uQV, C.List_46y, C.List_yzJ0, C.List_yzJ]), type$.JSArray_List_List_int);
    C.List_MIe = H.setRuntimeTypeInfo(makeConstList([C.List_uwP, C.List_Crw, C.List_QcX, C.List_88p]), type$.JSArray_List_List_List_int);
    C.List_Qw3 = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095]), type$.JSArray_int);
    C.List_2Vk0 = H.setRuntimeTypeInfo(makeConstList([128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_gkc0 = H.setRuntimeTypeInfo(makeConstList([C.List_2Vk0, C.List_2Vk0, C.List_2Vk0]), type$.JSArray_List_int);
    C.List_cdS = H.setRuntimeTypeInfo(makeConstList([253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_app = H.setRuntimeTypeInfo(makeConstList([189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128]), type$.JSArray_int);
    C.List_yFh = H.setRuntimeTypeInfo(makeConstList([106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_y5k = H.setRuntimeTypeInfo(makeConstList([C.List_cdS, C.List_app, C.List_yFh]), type$.JSArray_List_int);
    C.List_INA = H.setRuntimeTypeInfo(makeConstList([1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_e4d = H.setRuntimeTypeInfo(makeConstList([181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128]), type$.JSArray_int);
    C.List_app0 = H.setRuntimeTypeInfo(makeConstList([78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]), type$.JSArray_int);
    C.List_iLh = H.setRuntimeTypeInfo(makeConstList([C.List_INA, C.List_e4d, C.List_app0]), type$.JSArray_List_int);
    C.List_MOR = H.setRuntimeTypeInfo(makeConstList([1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_iUw = H.setRuntimeTypeInfo(makeConstList([184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Eba = H.setRuntimeTypeInfo(makeConstList([77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_VS7 = H.setRuntimeTypeInfo(makeConstList([C.List_MOR, C.List_iUw, C.List_Eba]), type$.JSArray_List_int);
    C.List_MOR0 = H.setRuntimeTypeInfo(makeConstList([1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_wnc = H.setRuntimeTypeInfo(makeConstList([170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_XwU = H.setRuntimeTypeInfo(makeConstList([37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_HTJ = H.setRuntimeTypeInfo(makeConstList([C.List_MOR0, C.List_wnc, C.List_XwU]), type$.JSArray_List_int);
    C.List_1yC = H.setRuntimeTypeInfo(makeConstList([1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Eba0 = H.setRuntimeTypeInfo(makeConstList([207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_iUw0 = H.setRuntimeTypeInfo(makeConstList([102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_4QF = H.setRuntimeTypeInfo(makeConstList([C.List_1yC, C.List_Eba0, C.List_iUw0]), type$.JSArray_List_int);
    C.List_uXo = H.setRuntimeTypeInfo(makeConstList([1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_iUw1 = H.setRuntimeTypeInfo(makeConstList([177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Eba1 = H.setRuntimeTypeInfo(makeConstList([80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_8Pu = H.setRuntimeTypeInfo(makeConstList([C.List_uXo, C.List_iUw1, C.List_Eba1]), type$.JSArray_List_int);
    C.List_2hT = H.setRuntimeTypeInfo(makeConstList([1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_2hT0 = H.setRuntimeTypeInfo(makeConstList([246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_10r = H.setRuntimeTypeInfo(makeConstList([255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Snu = H.setRuntimeTypeInfo(makeConstList([C.List_2hT, C.List_2hT0, C.List_10r]), type$.JSArray_List_int);
    C.List_23h0 = H.setRuntimeTypeInfo(makeConstList([C.List_gkc0, C.List_y5k, C.List_iLh, C.List_VS7, C.List_HTJ, C.List_4QF, C.List_8Pu, C.List_Snu]), type$.JSArray_List_List_int);
    C.List_2hT1 = H.setRuntimeTypeInfo(makeConstList([198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62]), type$.JSArray_int);
    C.List_2Vk1 = H.setRuntimeTypeInfo(makeConstList([131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1]), type$.JSArray_int);
    C.List_kOG = H.setRuntimeTypeInfo(makeConstList([68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]), type$.JSArray_int);
    C.List_BDr = H.setRuntimeTypeInfo(makeConstList([C.List_2hT1, C.List_2Vk1, C.List_kOG]), type$.JSArray_List_int);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_app1 = H.setRuntimeTypeInfo(makeConstList([184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128]), type$.JSArray_int);
    C.List_kr3 = H.setRuntimeTypeInfo(makeConstList([81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]), type$.JSArray_int);
    C.List_Hcu = H.setRuntimeTypeInfo(makeConstList([C.List_qNA, C.List_app1, C.List_kr3]), type$.JSArray_List_int);
    C.List_oqK = H.setRuntimeTypeInfo(makeConstList([1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128]), type$.JSArray_int);
    C.List_e4d0 = H.setRuntimeTypeInfo(makeConstList([99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128]), type$.JSArray_int);
    C.List_kr30 = H.setRuntimeTypeInfo(makeConstList([23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]), type$.JSArray_int);
    C.List_zAX = H.setRuntimeTypeInfo(makeConstList([C.List_oqK, C.List_e4d0, C.List_kr30]), type$.JSArray_List_int);
    C.List_uXo0 = H.setRuntimeTypeInfo(makeConstList([1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_YAl = H.setRuntimeTypeInfo(makeConstList([109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_INA0 = H.setRuntimeTypeInfo(makeConstList([44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_QOg = H.setRuntimeTypeInfo(makeConstList([C.List_uXo0, C.List_YAl, C.List_INA0]), type$.JSArray_List_int);
    C.List_niO = H.setRuntimeTypeInfo(makeConstList([1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128]), type$.JSArray_int);
    C.List_INA1 = H.setRuntimeTypeInfo(makeConstList([94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_app2 = H.setRuntimeTypeInfo(makeConstList([22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]), type$.JSArray_int);
    C.List_i7r = H.setRuntimeTypeInfo(makeConstList([C.List_niO, C.List_INA1, C.List_app2]), type$.JSArray_List_int);
    C.List_xw8 = H.setRuntimeTypeInfo(makeConstList([1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_iUw2 = H.setRuntimeTypeInfo(makeConstList([124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_app3 = H.setRuntimeTypeInfo(makeConstList([35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]), type$.JSArray_int);
    C.List_sQ3 = H.setRuntimeTypeInfo(makeConstList([C.List_xw8, C.List_iUw2, C.List_app3]), type$.JSArray_List_int);
    C.List_UkC = H.setRuntimeTypeInfo(makeConstList([1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_qNA0 = H.setRuntimeTypeInfo(makeConstList([121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_app4 = H.setRuntimeTypeInfo(makeConstList([45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]), type$.JSArray_int);
    C.List_ACG = H.setRuntimeTypeInfo(makeConstList([C.List_UkC, C.List_qNA0, C.List_app4]), type$.JSArray_List_int);
    C.List_xw80 = H.setRuntimeTypeInfo(makeConstList([1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_e3N = H.setRuntimeTypeInfo(makeConstList([203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_uXo1 = H.setRuntimeTypeInfo(makeConstList([137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_UMT = H.setRuntimeTypeInfo(makeConstList([C.List_xw80, C.List_e3N, C.List_uXo1]), type$.JSArray_List_int);
    C.List_IJC = H.setRuntimeTypeInfo(makeConstList([C.List_BDr, C.List_Hcu, C.List_zAX, C.List_QOg, C.List_i7r, C.List_sQ3, C.List_ACG, C.List_UMT]), type$.JSArray_List_List_int);
    C.List_oyU = H.setRuntimeTypeInfo(makeConstList([253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128]), type$.JSArray_int);
    C.List_fnl = H.setRuntimeTypeInfo(makeConstList([175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128]), type$.JSArray_int);
    C.List_kOG0 = H.setRuntimeTypeInfo(makeConstList([73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]), type$.JSArray_int);
    C.List_04 = H.setRuntimeTypeInfo(makeConstList([C.List_oyU, C.List_fnl, C.List_kOG0]), type$.JSArray_List_int);
    C.List_qNA1 = H.setRuntimeTypeInfo(makeConstList([1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_qph = H.setRuntimeTypeInfo(makeConstList([239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_yFh0 = H.setRuntimeTypeInfo(makeConstList([155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_S0k = H.setRuntimeTypeInfo(makeConstList([C.List_qNA1, C.List_qph, C.List_yFh0]), type$.JSArray_List_int);
    C.List_niO0 = H.setRuntimeTypeInfo(makeConstList([1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128]), type$.JSArray_int);
    C.List_Eba2 = H.setRuntimeTypeInfo(makeConstList([201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_app5 = H.setRuntimeTypeInfo(makeConstList([69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]), type$.JSArray_int);
    C.List_gfn = H.setRuntimeTypeInfo(makeConstList([C.List_niO0, C.List_Eba2, C.List_app5]), type$.JSArray_List_int);
    C.List_8eb = H.setRuntimeTypeInfo(makeConstList([1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_xw81 = H.setRuntimeTypeInfo(makeConstList([223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_e3N0 = H.setRuntimeTypeInfo(makeConstList([141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_EJ0 = H.setRuntimeTypeInfo(makeConstList([C.List_8eb, C.List_xw81, C.List_e3N0]), type$.JSArray_List_int);
    C.List_e3N1 = H.setRuntimeTypeInfo(makeConstList([1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_uXo2 = H.setRuntimeTypeInfo(makeConstList([190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_2hT2 = H.setRuntimeTypeInfo(makeConstList([149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_WtZ = H.setRuntimeTypeInfo(makeConstList([C.List_e3N1, C.List_uXo2, C.List_2hT2]), type$.JSArray_List_int);
    C.List_2hT3 = H.setRuntimeTypeInfo(makeConstList([1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Jio = H.setRuntimeTypeInfo(makeConstList([247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_2hT4 = H.setRuntimeTypeInfo(makeConstList([240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_wsa = H.setRuntimeTypeInfo(makeConstList([C.List_2hT3, C.List_Jio, C.List_2hT4]), type$.JSArray_List_int);
    C.List_e3N2 = H.setRuntimeTypeInfo(makeConstList([1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_e3N3 = H.setRuntimeTypeInfo(makeConstList([213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_2hT5 = H.setRuntimeTypeInfo(makeConstList([55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_OBP = H.setRuntimeTypeInfo(makeConstList([C.List_e3N2, C.List_e3N3, C.List_2hT5]), type$.JSArray_List_int);
    C.List_Net = H.setRuntimeTypeInfo(makeConstList([C.List_04, C.List_S0k, C.List_gfn, C.List_EJ0, C.List_WtZ, C.List_wsa, C.List_OBP, C.List_gkc0]), type$.JSArray_List_List_int);
    C.List_ZEx = H.setRuntimeTypeInfo(makeConstList([202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255]), type$.JSArray_int);
    C.List_kOG1 = H.setRuntimeTypeInfo(makeConstList([126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128]), type$.JSArray_int);
    C.List_kOG2 = H.setRuntimeTypeInfo(makeConstList([61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]), type$.JSArray_int);
    C.List_wsa0 = H.setRuntimeTypeInfo(makeConstList([C.List_ZEx, C.List_kOG1, C.List_kOG2]), type$.JSArray_List_int);
    C.List_kr31 = H.setRuntimeTypeInfo(makeConstList([1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128]), type$.JSArray_int);
    C.List_e4d1 = H.setRuntimeTypeInfo(makeConstList([166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128]), type$.JSArray_int);
    C.List_kr32 = H.setRuntimeTypeInfo(makeConstList([39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]), type$.JSArray_int);
    C.List_UaZ = H.setRuntimeTypeInfo(makeConstList([C.List_kr31, C.List_e4d1, C.List_kr32]), type$.JSArray_List_int);
    C.List_kr33 = H.setRuntimeTypeInfo(makeConstList([1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128]), type$.JSArray_int);
    C.List_oqK0 = H.setRuntimeTypeInfo(makeConstList([124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128]), type$.JSArray_int);
    C.List_kr34 = H.setRuntimeTypeInfo(makeConstList([24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]), type$.JSArray_int);
    C.List_i09 = H.setRuntimeTypeInfo(makeConstList([C.List_kr33, C.List_oqK0, C.List_kr34]), type$.JSArray_List_int);
    C.List_app6 = H.setRuntimeTypeInfo(makeConstList([1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128]), type$.JSArray_int);
    C.List_e4d2 = H.setRuntimeTypeInfo(makeConstList([149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128]), type$.JSArray_int);
    C.List_XT3 = H.setRuntimeTypeInfo(makeConstList([28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]), type$.JSArray_int);
    C.List_OIF = H.setRuntimeTypeInfo(makeConstList([C.List_app6, C.List_e4d2, C.List_XT3]), type$.JSArray_List_int);
    C.List_e4d3 = H.setRuntimeTypeInfo(makeConstList([1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128]), type$.JSArray_int);
    C.List_INA2 = H.setRuntimeTypeInfo(makeConstList([123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128]), type$.JSArray_int);
    C.List_app7 = H.setRuntimeTypeInfo(makeConstList([20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]), type$.JSArray_int);
    C.List_CKI = H.setRuntimeTypeInfo(makeConstList([C.List_e4d3, C.List_INA2, C.List_app7]), type$.JSArray_List_int);
    C.List_Eba3 = H.setRuntimeTypeInfo(makeConstList([1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_IVU = H.setRuntimeTypeInfo(makeConstList([168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_INA3 = H.setRuntimeTypeInfo(makeConstList([47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_SnA = H.setRuntimeTypeInfo(makeConstList([C.List_Eba3, C.List_IVU, C.List_INA3]), type$.JSArray_List_int);
    C.List_INA4 = H.setRuntimeTypeInfo(makeConstList([1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128]), type$.JSArray_int);
    C.List_e4d4 = H.setRuntimeTypeInfo(makeConstList([141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128]), type$.JSArray_int);
    C.List_e4d5 = H.setRuntimeTypeInfo(makeConstList([42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]), type$.JSArray_int);
    C.List_xw82 = H.setRuntimeTypeInfo(makeConstList([C.List_INA4, C.List_e4d4, C.List_e4d5]), type$.JSArray_List_int);
    C.List_2hT6 = H.setRuntimeTypeInfo(makeConstList([244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_2hT7 = H.setRuntimeTypeInfo(makeConstList([238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    C.List_Q1p0 = H.setRuntimeTypeInfo(makeConstList([C.List_2hT, C.List_2hT6, C.List_2hT7]), type$.JSArray_List_int);
    C.List_uLM = H.setRuntimeTypeInfo(makeConstList([C.List_wsa0, C.List_UaZ, C.List_i09, C.List_OIF, C.List_CKI, C.List_SnA, C.List_xw82, C.List_Q1p0]), type$.JSArray_List_List_int);
    C.List_S8N = H.setRuntimeTypeInfo(makeConstList([C.List_23h0, C.List_IJC, C.List_Net, C.List_uLM]), type$.JSArray_List_List_List_int);
    C.List_UiL = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), type$.JSArray_int);
    C.List_VSP = H.setRuntimeTypeInfo(makeConstList([6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225, 944, 944, 944, 944, 976, 976, 976, 976, 1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488, 718, 718, 718, 718, 718, 718, 718, 718, 750, 750, 750, 750, 750, 750, 750, 750, 1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 654, 654, 654, 654, 654, 654, 654, 654, 1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168, 1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232, 622, 622, 622, 622, 622, 622, 622, 622, 1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744, 846, 846, 846, 846, 846, 846, 846, 846, 1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296, 1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360, 1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424, 686, 686, 686, 686, 686, 686, 686, 686, 910, 910, 910, 910, 910, 910, 910, 910, 1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000, 2032, 2032, 2032, 2032, 16, 16, 16, 16, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 878, 878, 878, 878, 878, 878, 878, 878, 1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936, -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221, 590, 590, 590, 590, 590, 590, 590, 590, 782, 782, 782, 782, 782, 782, 782, 782, 1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616, 1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680, 814, 814, 814, 814, 814, 814, 814, 814, 1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808, 1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, 14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401, 22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497, 18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691, 30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653, -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232]), type$.JSArray_int);
    C.List_VvJ = H.setRuntimeTypeInfo(makeConstList([0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3, -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1]), type$.JSArray_int);
    C.List_X3d0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_int);
    C.List_X3d = H.setRuntimeTypeInfo(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_int);
    C.List_Y3m = H.setRuntimeTypeInfo(makeConstList([-0.0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9]), type$.JSArray_int);
    C.List_cGl1 = H.setRuntimeTypeInfo(makeConstList([0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15]), type$.JSArray_int);
    C.List_cGl0 = H.setRuntimeTypeInfo(makeConstList([0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396]), type$.JSArray_int);
    C.List_cGl = H.setRuntimeTypeInfo(makeConstList([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]), type$.JSArray_int);
    C.List_eea = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_int);
    C.List_i3t = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_int);
    C.List_kcl = H.setRuntimeTypeInfo(makeConstList([0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63]), type$.JSArray_int);
    C.List_kcl0 = H.setRuntimeTypeInfo(makeConstList([16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99]), type$.JSArray_int);
    C.List_kcl1 = H.setRuntimeTypeInfo(makeConstList([17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]), type$.JSArray_int);
    C.List_knt = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255]), type$.JSArray_int);
    C.List_knt0 = H.setRuntimeTypeInfo(makeConstList([0, 128, 192, 224, 240, 248, 252, 254, 255]), type$.JSArray_int);
    C.List_mC8 = H.setRuntimeTypeInfo(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8]), type$.JSArray_int);
    C.List_nLG = H.setRuntimeTypeInfo(makeConstList([62, 62, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 588, 588, 588, 588, 588, 588, 588, 588, 1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776, 1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904, 1936, 1936, -16365, -14317, 782, 782, 782, 782, 814, 814, 814, 814, -12269, -10221, 10257, 10257, 12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712, 1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 750, 750, 750, 750, 1616, 1616, 1648, 1648, 1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520, 1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032, 976, 976, 1008, 1008, 1040, 1040, 1072, 1072, 1296, 1296, 1328, 1328, 718, 718, 718, 718, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 4113, 4113, 6161, 6161, 848, 848, 880, 880, 912, 912, 944, 944, 622, 622, 622, 622, 654, 654, 654, 654, 1104, 1104, 1136, 1136, 1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264, 686, 686, 686, 686, 1360, 1360, 1392, 1392, 12, 12, 12, 12, 12, 12, 12, 12, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390]), type$.JSArray_int);
    C.List_qQn = H.setRuntimeTypeInfo(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_int);
    C.List_173_148_140 = H.setRuntimeTypeInfo(makeConstList([173, 148, 140]), type$.JSArray_int);
    C.List_176_155_140_135 = H.setRuntimeTypeInfo(makeConstList([176, 155, 140, 135]), type$.JSArray_int);
    C.List_yTu0 = H.setRuntimeTypeInfo(makeConstList([180, 157, 141, 134, 130]), type$.JSArray_int);
    C.List_2hT8 = H.setRuntimeTypeInfo(makeConstList([254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129]), type$.JSArray_int);
    C.List_sao = H.setRuntimeTypeInfo(makeConstList([C.List_173_148_140, C.List_176_155_140_135, C.List_yTu0, C.List_2hT8]), type$.JSArray_List_int);
    C.List_sty = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC4$closure(), V.vp8_filter_VP8Filter_TM4$closure(), V.vp8_filter_VP8Filter_VE4$closure(), V.vp8_filter_VP8Filter_HE4$closure(), V.vp8_filter_VP8Filter_RD4$closure(), V.vp8_filter_VP8Filter_VR4$closure(), V.vp8_filter_VP8Filter_LD4$closure(), V.vp8_filter_VP8Filter_VL4$closure(), V.vp8_filter_VP8Filter_HD4$closure(), V.vp8_filter_VP8Filter_HU4$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    C.List_uSC = H.setRuntimeTypeInfo(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_int);
    C.List_uSC0 = H.setRuntimeTypeInfo(makeConstList([17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), type$.JSArray_int);
    C.List_wmc = H.setRuntimeTypeInfo(makeConstList([127, 127, 191, 127, 159, 191, 223, 127, 143, 159, 175, 191, 207, 223, 239, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 127, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 127]), type$.JSArray_int);
    C.List_yTu = H.setRuntimeTypeInfo(makeConstList([280, 256, 256, 256, 40]), type$.JSArray_int);
    C.List_yYQ = H.setRuntimeTypeInfo(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 0]), type$.JSArray_int);
    C.Map_6zffn = new H.GeneralConstantMap([315, "artist", 258, "bitsPerSample", 265, "cellLength", 264, "cellWidth", 320, "colorMap", 259, "compression", 306, "dateTime", 34665, "exifIFD", 338, "extraSamples", 266, "fillOrder", 289, "freeByteCounts", 288, "freeOffsets", 291, "grayResponseCurve", 290, "grayResponseUnit", 316, "hostComputer", 34675, "iccProfile", 270, "imageDescription", 257, "imageLength", 256, "imageWidth", 33723, "iptc", 271, "make", 281, "maxSampleValue", 280, "minSampleValue", 272, "model", 254, "newSubfileType", 274, "orientation", 262, "photometricInterpretation", 34377, "photoshop", 284, "planarConfiguration", 317, "predictor", 296, "resolutionUnit", 278, "rowsPerStrip", 277, "samplesPerPixel", 305, "software", 279, "stripByteCounts", 273, "stropOffsets", 255, "subfileType", 292, "t4Options", 293, "t6Options", 263, "thresholding", 322, "tileWidth", 323, "tileLength", 324, "tileOffsets", 325, "tileByteCounts", 700, "xmp", 282, "xResolution", 283, "yResolution", 529, "yCbCrCoefficients", 530, "yCbCrSubsampling", 531, "yCbCrPositioning", 339, "sampleFormat"], H.findType("GeneralConstantMap<int,String>"));
    C.Type_ByteBuffer_RkP = H.typeLiteral("ByteBuffer");
    C.Type_ByteData_zNC = H.typeLiteral("ByteData");
    C.Type_Float32List_LB7 = H.typeLiteral("Float32List");
    C.Type_Float64List_LB7 = H.typeLiteral("Float64List");
    C.Type_Int16List_uXf = H.typeLiteral("Int16List");
    C.Type_Int32List_O50 = H.typeLiteral("Int32List");
    C.Type_Int8List_ekJ = H.typeLiteral("Int8List");
    C.Type_JSObject_8k0 = H.typeLiteral("JSObject");
    C.Type_Null_Yyn = H.typeLiteral("Null");
    C.Type_String_k8F = H.typeLiteral("String");
    C.Type_Uint16List_2bx = H.typeLiteral("Uint16List");
    C.Type_Uint32List_2bx = H.typeLiteral("Uint32List");
    C.Type_Uint8ClampedList_Jik = H.typeLiteral("Uint8ClampedList");
    C.Type_Uint8List_WLA = H.typeLiteral("Uint8List");
    C.Type_bool_lhE = H.typeLiteral("bool");
    C.Type_double_K1J = H.typeLiteral("double");
    C.Type_int_tHn = H.typeLiteral("int");
    C.Type_num_cv7 = H.typeLiteral("num");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $._dctClip = null;
    $.VP8Filter__tablesInitialized = false;
    $.VP8LTransform_PREDICTORS = H.setRuntimeTypeInfo([R.vp8l_transform_VP8LTransform__predictor0$closure(), R.vp8l_transform_VP8LTransform__predictor1$closure(), R.vp8l_transform_VP8LTransform__predictor2$closure(), R.vp8l_transform_VP8LTransform__predictor3$closure(), R.vp8l_transform_VP8LTransform__predictor4$closure(), R.vp8l_transform_VP8LTransform__predictor5$closure(), R.vp8l_transform_VP8LTransform__predictor6$closure(), R.vp8l_transform_VP8LTransform__predictor7$closure(), R.vp8l_transform_VP8LTransform__predictor8$closure(), R.vp8l_transform_VP8LTransform__predictor9$closure(), R.vp8l_transform_VP8LTransform__predictor10$closure(), R.vp8l_transform_VP8LTransform__predictor11$closure(), R.vp8l_transform_VP8LTransform__predictor12$closure(), R.vp8l_transform_VP8LTransform__predictor13$closure(), R.vp8l_transform_VP8LTransform__predictor0$closure(), R.vp8l_transform_VP8LTransform__predictor0$closure()], H.findType("JSArray<int(Uint32List,int,int)>"));
    $.Half__toFloatUint32 = null;
    $.Half__toFloatFloat32 = null;
    $.Half____eLut = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()));
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return type$.TypeErrorDecoder._as(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()));
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "VP8Filter_abs0", "$get$VP8Filter_abs0", function() {
      return H.NativeUint8List_NativeUint8List(511);
    });
    _lazy($, "VP8Filter_abs1", "$get$VP8Filter_abs1", function() {
      return H.NativeUint8List_NativeUint8List(511);
    });
    _lazy($, "VP8Filter_sclip1", "$get$VP8Filter_sclip1", function() {
      return H.NativeInt8List_NativeInt8List(2041);
    });
    _lazy($, "VP8Filter_sclip2", "$get$VP8Filter_sclip2", function() {
      return H.NativeInt8List_NativeInt8List(225);
    });
    _lazy($, "VP8Filter_clip1", "$get$VP8Filter_clip1", function() {
      return H.NativeUint8List_NativeUint8List(766);
    });
    _lazyFinal($, "__uint8", "$get$__uint8", function() {
      return H.NativeUint8List_NativeUint8List(1);
    });
    _lazyFinal($, "__uint8ToInt8", "$get$__uint8ToInt8", function() {
      return P.Int8List_Int8List$view(J.get$buffer$x($.$get$__uint8()));
    });
    _lazyFinal($, "__uint16", "$get$__uint16", function() {
      return H.NativeUint16List_NativeUint16List(1);
    });
    _lazyFinal($, "__uint16ToInt16", "$get$__uint16ToInt16", function() {
      return P.Int16List_Int16List$view(J.get$buffer$x($.$get$__uint16()));
    });
    _lazyFinal($, "__uint32", "$get$__uint32", function() {
      return H.NativeUint32List_NativeUint32List(1);
    });
    _lazyFinal($, "__uint32ToInt32", "$get$__uint32ToInt32", function() {
      return P.Int32List_Int32List$view(J.get$buffer$x($.$get$__uint32()));
    });
    _lazyFinal($, "__uint32ToFloat32", "$get$__uint32ToFloat32", function() {
      return P.Float32List_Float32List$view(J.get$buffer$x($.$get$__uint32()));
    });
    _lazyFinal($, "__int32", "$get$__int32", function() {
      return H.NativeInt32List_NativeInt32List(1);
    });
    _lazyFinal($, "__int32ToUint32", "$get$__int32ToUint32", function() {
      return P.Uint32List_Uint32List$view(J.get$buffer$x($.$get$__int32()), 0);
    });
    _lazyFinal($, "__float32", "$get$__float32", function() {
      return H.NativeFloat32List_NativeFloat32List(1);
    });
    _lazyFinal($, "__float32ToUint32", "$get$__float32ToUint32", function() {
      return P.Uint32List_Uint32List$view(J.get$buffer$x($.$get$__float32()), 0);
    });
    _lazyFinal($, "__uint64", "$get$__uint64", function() {
      return P.Uint64List_Uint64List(1);
    });
    _lazyFinal($, "__uint64ToFloat64", "$get$__uint64ToFloat64", function() {
      return P.Float64List_Float64List$view(J.get$buffer$x($.$get$__uint64()));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, AbortPaymentEvent: W.AbortPaymentEvent, AnimationEvent: W.AnimationEvent, AnimationPlaybackEvent: W.AnimationPlaybackEvent, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, BackgroundFetchClickEvent: W.BackgroundFetchClickEvent, BackgroundFetchEvent: W.BackgroundFetchEvent, BackgroundFetchFailEvent: W.BackgroundFetchFailEvent, BackgroundFetchedEvent: W.BackgroundFetchedEvent, BeforeInstallPromptEvent: W.BeforeInstallPromptEvent, BeforeUnloadEvent: W.BeforeUnloadEvent, Blob: W.Blob, BlobEvent: W.BlobEvent, CanMakePaymentEvent: W.CanMakePaymentEvent, ClipboardEvent: W.ClipboardEvent, CloseEvent: W.CloseEvent, CompositionEvent: W.CompositionEvent, CustomEvent: W.CustomEvent, DedicatedWorkerGlobalScope: W.DedicatedWorkerGlobalScope, DeviceMotionEvent: W.DeviceMotionEvent, DeviceOrientationEvent: W.DeviceOrientationEvent, DOMError: W.DomError, DOMException: W.DomException, ErrorEvent: W.ErrorEvent, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, EventTarget: W.EventTarget, ExtendableEvent: W.ExtendableEvent, ExtendableMessageEvent: W.ExtendableMessageEvent, FetchEvent: W.FetchEvent, File: W.File, FocusEvent: W.FocusEvent, FontFaceSetLoadEvent: W.FontFaceSetLoadEvent, ForeignFetchEvent: W.ForeignFetchEvent, GamepadEvent: W.GamepadEvent, HashChangeEvent: W.HashChangeEvent, InstallEvent: W.InstallEvent, KeyboardEvent: W.KeyboardEvent, MediaEncryptedEvent: W.MediaEncryptedEvent, MediaError: W.MediaError, MediaKeyMessageEvent: W.MediaKeyMessageEvent, MediaQueryListEvent: W.MediaQueryListEvent, MediaStreamEvent: W.MediaStreamEvent, MediaStreamTrackEvent: W.MediaStreamTrackEvent, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, MIDIConnectionEvent: W.MidiConnectionEvent, MIDIMessageEvent: W.MidiMessageEvent, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, MutationEvent: W.MutationEvent, NavigatorUserMediaError: W.NavigatorUserMediaError, NotificationEvent: W.NotificationEvent, OverconstrainedError: W.OverconstrainedError, PageTransitionEvent: W.PageTransitionEvent, PaymentRequestEvent: W.PaymentRequestEvent, PaymentRequestUpdateEvent: W.PaymentRequestUpdateEvent, PointerEvent: W.PointerEvent, PopStateEvent: W.PopStateEvent, PositionError: W.PositionError, PresentationConnectionAvailableEvent: W.PresentationConnectionAvailableEvent, PresentationConnectionCloseEvent: W.PresentationConnectionCloseEvent, ProgressEvent: W.ProgressEvent, PromiseRejectionEvent: W.PromiseRejectionEvent, PushEvent: W.PushEvent, RTCDataChannelEvent: W.RtcDataChannelEvent, RTCDTMFToneChangeEvent: W.RtcDtmfToneChangeEvent, RTCPeerConnectionIceEvent: W.RtcPeerConnectionIceEvent, RTCTrackEvent: W.RtcTrackEvent, SecurityPolicyViolationEvent: W.SecurityPolicyViolationEvent, SensorErrorEvent: W.SensorErrorEvent, SpeechRecognitionError: W.SpeechRecognitionError, SpeechRecognitionEvent: W.SpeechRecognitionEvent, SpeechSynthesisEvent: W.SpeechSynthesisEvent, StorageEvent: W.StorageEvent, SyncEvent: W.SyncEvent, TextEvent: W.TextEvent, TouchEvent: W.TouchEvent, TrackEvent: W.TrackEvent, TransitionEvent: W.TransitionEvent, WebKitTransitionEvent: W.TransitionEvent, UIEvent: W.UIEvent, VRDeviceEvent: W.VRDeviceEvent, VRDisplayEvent: W.VRDisplayEvent, VRSessionEvent: W.VRSessionEvent, WheelEvent: W.WheelEvent, WorkerGlobalScope: W.WorkerGlobalScope, MojoInterfaceRequestEvent: W._MojoInterfaceRequestEvent, ResourceProgressEvent: W._ResourceProgressEvent, USBConnectionEvent: W._USBConnectionEvent, IDBVersionChangeEvent: P.VersionChangeEvent, AudioProcessingEvent: P.AudioProcessingEvent, OfflineAudioCompletionEvent: P.OfflineAudioCompletionEvent, WebGLContextEvent: P.ContextEvent, SQLError: P.SqlError});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: false, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, Blob: false, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DedicatedWorkerGlobalScope: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, DOMError: true, DOMException: true, ErrorEvent: true, Event: false, InputEvent: false, SubmitEvent: false, EventTarget: false, ExtendableEvent: false, ExtendableMessageEvent: true, FetchEvent: true, File: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaError: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MessagePort: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: false, DragEvent: false, MutationEvent: true, NavigatorUserMediaError: true, NotificationEvent: true, OverconstrainedError: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PositionError: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: false, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: false, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, WorkerGlobalScope: false, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, SQLError: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = Y.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=crop_worker.js.map
